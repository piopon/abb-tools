<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ABB.Robotics.Controllers.PC</name>
    </assembly>
    <members>
        <member name="T:ABB.Robotics.Controllers.Configuration.AttributeNode">
            <summary>
            Holds name and value for an attribute.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.INode">
            <summary>
            Defines the interface of a node object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.INode.Text">
            <summary>
            Gets/Sets the text of the node.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.AttributeNode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new attribute instance.
            </summary>
            <param name="text">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.AttributeNode.Equals(ABB.Robotics.Controllers.Configuration.AttributeNode)">
            <summary>
            Checks two attrbute nodes for eqaulity.
            </summary>
            <param name="attribute">The to compare with.</param>
            <returns>True if the nodes are equal.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.AttributeNode.Text">
            <summary>
            Gets/Sets the name.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.AttributeNode.Value">
            <summary>
            Gets/Sets the value.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.Cfg10Writer">
            <summary>
            Writes the cfg v1 format to a stream.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.Writer">
            <summary>
            This defines the main interface for a configuration
            writer object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.#ctor">
            <summary>
            Initializes a new writer object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.Finalize">
            <summary>
            Finalizer for the Writer class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.Dispose">
            <summary>
            Disposes the current writer object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.Flush">
            <summary>
            Flushes the content into the underlaying stream.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.WriteAttribute(System.String)">
            <summary>
            Writes an attribute.
            </summary>
            <param name="name">The name.</param>   
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.WriteAttribute(System.String,System.String)">
            <summary>
            Writes an attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.WriteHeader(System.String,System.String)">
            <summary>
            Writes a simple header.
            </summary>
            <param name="domain">The domain.</param>
            <param name="version">The configuration format version.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.WriteHeader(System.String,System.String,System.String,System.String)">
            <summary>
            Writes a versioned header.
            </summary>
            <param name="domain">The domain.</param>
            <param name="cfgVersion">The configuration format version.</param>
            <param name="ctrlHighVersion">The high controller version.</param>
            <param name="ctrlLowVersion">The low controller version.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.WriteProperties(System.String)">
            <summary>
            Writes properties.
            </summary>
            <param name="Properties">The properties/header comments of the file.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.WriteStartInstance">
            <summary>
            Starts a new instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.WriteEndInstance">
            <summary>
            Ends the current instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.WriteStartType(System.String)">
            <summary>
            Writes a configuration type.
            </summary>
            <param name="name">The name of the type.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.WriteStartType(System.String,System.String)">
            <summary>
            Writes a configuration type.
            </summary>
            <param name="name">The name of the type.</param>
            <param name="alias">The type alias.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Writer.Dispose(System.Boolean)">
            <summary>
            Dispose extension point.
            </summary>
            <param name="disposing">
            True if called by dispose, otherwise false.
            </param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Cfg10Writer.#ctor(System.IO.Stream)">
            <summary>
            Initializes the writer object with a stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Cfg10Writer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes the writer object with a stream and the max number of 
            characters for each row.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Cfg10Writer.Flush">
            <summary>
            Flushes the writer object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Cfg10Writer.WriteAttribute(System.String,System.String)">
            <summary>
            Writes an attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Cfg10Writer.WriteHeader(System.String,System.String,System.String,System.String)">
            <summary>
            Writes a cfg header.
            </summary>
            <param name="domain">Domain.</param>
            <param name="cfgVersion">Version.</param>
            <param name="ctrlHighVersion">Controller version high.</param>
            <param name="ctrlLowVersion">Controller version low.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Cfg10Writer.WriteProperties(System.String)">
            <summary>
            Writes Properties.
            </summary>
            <param name="Properties">The properties/header comments of the file.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Cfg10Writer.WriteStartInstance">
            <summary>
            Writes the start of an instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Cfg10Writer.WriteEndInstance">
            <summary>
            Writes the end of an instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Cfg10Writer.WriteStartType(System.String,System.String)">
            <summary>
            Writes the start of a type.
            </summary>
            <param name="name">The name.</param>
            <param name="alias">The alias, optional.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Cfg10Writer.WriteEndType">
            <summary>
            Writes the end of a the type.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Cfg10Writer.Dispose(System.Boolean)">
            <summary>
            Disposes the current writer object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.Collection`1">
            <summary>
            Base class of all collection nodes.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Collection`1.ClearItems">
            <summary>
            Clears all items.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Collection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item at the index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Collection`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Collection`1.SetItem(System.Int32,`0)">
            <summary>
            Sets an item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Collection`1.Item(System.String)">
            <summary>
            Gets an item from its name.
            </summary>
            <param name="text">The name.</param>
            <returns>The item.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.Document">
            <summary>
            Encapsulates a complete configuration document.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Document.Equals(ABB.Robotics.Controllers.Configuration.Document)">
            <summary>
            Checks is two documents are equal.
            </summary>
            <param name="doc">The document to compare to.</param>
            <returns>True if the documents are equal.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Document.ControllerVersionHigh">
            <summary>
            Gets/Sets the controller version.
            May be an empty string if no version is specified.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Document.ControllerVersionLow">
            <summary>
            Gets/Sets the controller version.
            May be an empty string if no version is specified.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Document.Domain">
            <summary>
            Gets/Sets the domain for this object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Document.Version">
            <summary>
            Gets/Sets the version string.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Document.UnitProperties">
            <summary>
            Gets/Sets the unit property string.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.DocumentSerializer">
            <summary>
            Use this class to serialize a document object into a file
            format using a supplied writer object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.DocumentSerializer.#ctor(ABB.Robotics.Controllers.Configuration.Document)">
            <summary>
            Initializes the DocumentSerializer object.
            </summary>
            <param name="doc">The Document to serialize.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.DocumentSerializer.Serialize(ABB.Robotics.Controllers.Configuration.Writer)">
            <summary>
            Serializes the document to disk.
            </summary>
            <param name="writer">The writer to serialize to.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.InstanceNode">
            <summary>
            Holds data for a cfg instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.InstanceNode.#ctor">
            <summary>
            Initializes a unnamed instance node.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.InstanceNode.#ctor(System.String)">
            <summary>
            Initializes a named instance node.
            </summary>
            <param name="text">The name of the instance.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.InstanceNode.Equals(ABB.Robotics.Controllers.Configuration.InstanceNode)">
            <summary>
            Checks if two instances are equal.
            </summary>
            <param name="instance">The instance to compare with.</param>
            <returns>True if the nodes are equal.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.InstanceNode.Text">
            <summary>
            Gets the name of the instance.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.Parser">
            <summary>
            Parses a configuration file into configuration document.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Parser.#ctor(System.String)">
            <summary>
            Initializes a parser object.
            </summary>
            <param name="path">The file to open.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Parser.#ctor(System.IO.Stream)">
            <summary>
            Initializes a parser object.
            </summary>
            <param name="stream">The stream to parse.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Parser.Dispose">
            <summary>
            Disposes the current object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Parser.Parse">
            <summary>
            Parses the data into a Document.
            </summary>
            <returns>The document.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.Scanner">
            <summary>
            Use this class to scan a stream for configuration tokens.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Scanner.#ctor(System.IO.Stream)">
            <summary>
            Initializes the scanner with a stream object.
            </summary>
            <param name="stream">The stream to scan.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Scanner.Dispose">
            <summary>
            Disposes the current object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Scanner.GetChar">
            <summary>
            Gets the next char from the stream.
            </summary>
            <returns>The next char from the stream.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Scanner.GetToken">
            <summary>
            Gets the next token from the stream.
            </summary>
            <returns>The token.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Scanner.PeekChar">
            <summary>
            Peeks the next char from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Scanner.PeekToken">
            <summary>
            Peeks for the next token.
            </summary>
            <returns>The token.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.Token">
            <summary>
            Abstraction of a configuration token.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Token.#ctor(System.String,ABB.Robotics.Controllers.Configuration.TokenType)">
            <summary>
            Initializes a new token object.
            </summary>
            <param name="type">The token type.</param>
            <param name="text">The token text.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Token.#ctor(System.Char,ABB.Robotics.Controllers.Configuration.TokenType)">
            <summary>
            Initializes a new token object.
            </summary>
            <param name="type">The token type.</param>
            <param name="c">The charachter.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Token.Equals(System.Object)">
            <summary>
            Checks if two tokens are equal.
            </summary>
            <param name="obj">The object.</param>
            <returns>True if the objects are equal, otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Token.Equals(ABB.Robotics.Controllers.Configuration.Token)">
            <summary>
            Checks if two tokens are equal.
            </summary>
            <param name="obj">The token.</param>
            <returns>True if the tokens are equal, otherwise false.</returns>    
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Token.GetHashCode">
            <summary>
            Gets the hash code for this object.
            This is based on the text property.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.Token.ToString">
            <summary>
            Gets a string representation of the current token.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Token.Char">
            <summary>
            Gets the char if not a string.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Token.Column">
            <summary>
            Gets/sets the column.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Token.IsContinue">
            <summary>
            Indicates that the current token is a continue line char.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Token.IsEndOfStream">
            <summary>
            Inidicates that the current token is a end of stream token.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Token.IsLineFeed">
            <summary>
            Indicates that the current token is a LineFeed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Token.IsText">
            <summary>
            Indicates that the current token is a text token.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Token.IsSeparator">
            <summary>
            Indicates that the current token is a separator.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Token.Row">
            <summary>
            Gets/Sets the row of the token.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Token.Text">
            <summary>
            Gets the token text.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.Token.Type">
            <summary>
            Gets the token type.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.TokenType">
            <summary>
            All available tokens in a configuration file.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Configuration.TokenType.Unknown">
            <summary>
            Unknown token.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Configuration.TokenType.Separator">
            <summary>
            Token is a separator.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Configuration.TokenType.Comment">
            <summary>
            Token is a comment.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Configuration.TokenType.Text">
            <summary>
            Token is a text.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Configuration.TokenType.EndOfStream">
            <summary>
            End of stream token.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Configuration.TokenType.Continue">
            <summary>
            Token is a line continue char. '\'
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Configuration.TokenType.LineFeed">
            <summary>
            Token is a line feed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Configuration.TypeNode">
            <summary>
            Special node for a configuration type.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.TypeNode.#ctor(System.String)">
            <summary>
            Initializes a new TypeNode instance.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Configuration.TypeNode.Equals(ABB.Robotics.Controllers.Configuration.TypeNode)">
            <summary>
            Checks if this node is equal to the provided node.
            </summary>
            <param name="type">The node to compare with.</param>
            <returns>True if the node are equal.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.TypeNode.Alias">
            <summary>
            Gets/Sets the type alias.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Configuration.TypeNode.Text">
            <summary>
            Gets/Sets the text, this is the type name.
            </summary>
        </member>
        <member name="T:ABB.Robotics.BlockUrl">
            <summary>
            Specialization of the Url class to represent a block url.
            </summary>
            <remarks>
            Only for internal use.
            </remarks>                                               
        </member>
        <member name="T:ABB.Robotics.Url">
            <summary>
            An url is the internal type used to address any resource on
            the controller.
            </summary>
            <remarks>
            Only for internal use.
            </remarks>                                                 
        </member>
        <member name="F:ABB.Robotics.Url.Separator">
            <summary>
            The separator used within a url.
            </summary>
            <remarks>
            Only for internal use.
            </remarks>                      
        </member>
        <member name="F:ABB.Robotics.Url.SeparatorString">
            <summary>
            The separator as string.
            </summary>
            <remarks>
            Only for internal use.
            </remarks>              
        </member>
        <member name="F:ABB.Robotics.Url.DefaultResizeValue">
            <summary>
            The default resize value.
            </summary>
            <remarks>
            Only for internal use.
            </remarks>               
        </member>
        <member name="F:ABB.Robotics.Url.DefaultPadding">
            <summary>
            The default padding size.
            </summary>
            <remarks>
            Only for internal use.
            </remarks>               
        </member>
        <member name="F:ABB.Robotics.Url._url">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Url._parts">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Url._insertAt">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Url.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Private constructor to avoid external object construction.
            </summary>
            <param name="incompleteUrl">Flag to determine if incomplete
                                        urls are allowed.</param>
            <param name="padding">The padding of url object.</param>
            <param name="url">The url to create object for.</param>    
        </member>
        <member name="M:ABB.Robotics.Url.#ctor(System.String,System.Int32)">
            <summary>
            Private constructor to avoid external object construction.
            </summary>
            <param name="url">The url.</param>
            <param name="padding">The padding.</param>                
        </member>
        <member name="M:ABB.Robotics.Url.#ctor(ABB.Robotics.Url)">
            <summary>
            Private constructor used to create a clone.
            </summary>
            <param name="objectToClone">The object to clone.</param>
        </member>
        <member name="M:ABB.Robotics.Url.#ctor(ABB.Robotics.Url,System.Int32)">
            <summary>
            Private constructor used to create a copy of the supplied
            url.
            </summary>
            <param name="objectToClone">The object to clone.</param>
            <param name="padding">The padding.</param>               
        </member>
        <member name="M:ABB.Robotics.Url.Append(ABB.Robotics.Url,System.String[])">
            <summary>
            Appends the content to the url, all items will get an appended slash.
            </summary>
            <param name="root">Root url.</param>
            <param name="parts">Parameter list.</param>
            <returns>The complete url.</returns>
        </member>
        <member name="M:ABB.Robotics.Url.Append(ABB.Robotics.Url,System.String)">
            <summary>
            Appends a single string to current url.
            </summary>
            <param name="root">Root url.</param>
            <param name="part1">New part to add, must be prefixed with /</param>		
            <returns>The new url.</returns>
        </member>
        <member name="M:ABB.Robotics.Url.Append(ABB.Robotics.Url,System.String,System.Boolean)">
            <summary>
            Appends a single string to current url.
            </summary>
            <param name="root">Root url.</param>
            <param name="part1">New part to add, must be prefixed with /</param>
            <param name="appendSlash">True to append slash.</param>
            <returns>The new url.</returns>
        </member>
        <member name="M:ABB.Robotics.Url.Append(ABB.Robotics.Url,System.String,System.String,System.Boolean)">
            <summary>
            Appends a single string to current url.
            </summary>
            <param name="root">Root url.</param>
            <param name="part1">New part to add, must be prefixed with /</param>
            <param name="part2">New part to add, must be prefixed with /</param>
            <param name="appendSlash">True to append slash.</param>
            <returns>The new url.</returns>
        </member>
        <member name="M:ABB.Robotics.Url.Append(ABB.Robotics.Url,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends a single string to current url.
            </summary>
            <param name="root">Root url.</param>
            <param name="part1">New part to add, must be prefixed with /</param>
            <param name="part2">New part to add, must be prefixed with /</param>
            <param name="part3">New part to add, must be prefixed with /</param>
            <param name="appendSlash">True to append slash.</param>
            <returns>The new url.</returns>
        </member>
        <member name="M:ABB.Robotics.Url.Append(ABB.Robotics.Url,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends a single string to current url.
            </summary>
            <param name="root">Root url.</param>
            <param name="part1">New part to add, must be prefixed with /</param>
            <param name="part2">New part to add, must be prefixed with /</param>
            <param name="part3">New part to add, must be prefixed with /</param>
            <param name="part4">New part to add, must be prefixed with /</param>
            <param name="appendSlash">True to append slash.</param>
            <returns>The new url.</returns>
        </member>
        <member name="M:ABB.Robotics.Url.Build(System.String,System.String)">
            <summary>
            Appends two strings into a correct url object.
            </summary>
            <param name="s1">String one.</param>
            <param name="s2">String two.</param>
            <returns>
            The url from the combined strings.
            </returns>                                    
        </member>
        <member name="M:ABB.Robotics.Url.Create(System.String)">
            <summary>
            Creates a new url from a string.
            </summary>
            <param name="url">The string.</param>
            <returns>
            The url object.
            </returns>                           
        </member>
        <member name="M:ABB.Robotics.Url.CreateEmpty">
            <summary>
            Creates a new empty url object.
            </summary>
            <returns>
            The empty url object.
            </returns>                     
        </member>
        <member name="M:ABB.Robotics.Url.Extract(System.String)">
            <summary>
            This method extracts the formatted controller Url from any
            url string.
            </summary>
            <param name="url">Url to extract controller Url from\-</param>
            <returns>
            The url of the controller.
            </returns>                                                    
        </member>
        <member name="M:ABB.Robotics.Url.CreateChild(ABB.Robotics.Url)">
            <summary>
            Creates a "child" url object.
            </summary>
            <param name="parent">The parent url object.</param>
            <returns>
            The new Url object.
            </returns>                                         
        </member>
        <member name="M:ABB.Robotics.Url.GetParent(System.Int32)">
            <summary>
            Gets the parent url at specified level.
            </summary>
            <param name="level">Level or parent, 1 is immediate parent.</param>
            <returns>
            The parent url.
            </returns>                                                         
        </member>
        <member name="M:ABB.Robotics.Url.GetParent">
            <summary>
            Gets the parent url.
            </summary>
            <returns>
            The parent url.
            </returns>          
        </member>
        <member name="M:ABB.Robotics.Url.Append(System.String)">
            <summary>
            appends a single url part to the current url
            </summary>
            <param name="url">url to append</param>
        </member>
        <member name="M:ABB.Robotics.Url.Append(ABB.Robotics.Url,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Appends the content of the parts to the root url.
            </summary>
            <param name="root">Root of new url.</param>
            <param name="part1">Part to append or null.</param>
            <param name="part2">Part to append or null.</param>
            <param name="part3">Part to append or null.</param>
            <param name="part4">Part to append or null.</param>
            <param name="count">Part to append or null.</param>
            <param name="appendSlash">True to append /.</param>
            <returns>New Url object.</returns>
        </member>
        <member name="M:ABB.Robotics.Url.Append(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Appends parts to current url.
            </summary>
            <param name="part1">The part to append or null.</param>
            <param name="part2">The part to append or null.</param>
            <param name="part3">The part to append or null.</param>
            <param name="part4">The part to append or null.</param>
            <param name="count">Number of parts.</param>
            <param name="appendSlash">True to append a / infront of all parts.</param>
        </member>
        <member name="M:ABB.Robotics.Url.GetLastPart">
            <summary>
            Gets the last part of the url as string.
            </summary>
            <returns>
            The last part of the url.
            </returns>                              
        </member>
        <member name="M:ABB.Robotics.Url.GetParentUrl(System.Int32)">
            <summary>
            gets the parent url
            </summary>
            <param name="level">Parent level, 1 is immediate.</param>
            <returns>the parent url</returns>
        </member>
        <member name="M:ABB.Robotics.Url.BuildPartialUrl(System.Int32,System.Int32)">
            <summary>
            builds a part of the url depending on the stop 
            and start indicies
            </summary>
            <param name="startIndex">index to start at</param>
            <param name="stopIndex">index to stop at</param>
            <returns>the partial url built</returns>
        </member>
        <member name="M:ABB.Robotics.Url.BuildUrl">
            <summary>
            builds an url to the _url field
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Url.CanAddParts(System.Int32)">
            <summary>
            checks if the current state of the object is 
            big enough to allow adding of a part
            </summary>
            <returns>true if possible</returns>
        </member>
        <member name="M:ABB.Robotics.Url.Split(System.String,System.Int32,System.Boolean)">
            <summary>
            splits the string into parts but leaves the separator
            in each subpart
            </summary>
            <param name="url">string to split</param>
            <param name="notComplete">signals that the method is used to split a string to append</param>
            <param name="padding">this is the number of elements that are normally padded to 
            every url to avoid reallocation when the url is grown</param>
            <returns>all sub parts or the same string if none is found</returns>
        </member>
        <member name="M:ABB.Robotics.Url.TrimTrailingSeparator(System.String[])">
            <summary>
            this method remove any trailing Separatores that 
            the user might pass, it asserts on any such 
            occurences to notify the developer of the trailing
            Separator charachter
            </summary>
            <param name="parts">string array to check</param>				
            <returns>the array without trailing Separatores if such is found</returns>
        </member>
        <member name="M:ABB.Robotics.Url.TrimTrailingSeparator(System.String[],System.Int32)">
            <summary>
            this method remove any trailing Separatores that 
            the user might pass, it asserts on any such 
            occurences to notify the developer of the trailing
            Separator charachter
            </summary>
            <param name="parts">string array to check</param>
            <param name="lastPart">this indicates the last part in the 
            array, this is used if the array contains less elements
            then its capacity</param>
            <returns>the array without trailing Separatores if such is found</returns>
        </member>
        <member name="M:ABB.Robotics.Url.TrimTrailingSeparator(System.String)">
            <summary>
            removes any trailing slahes from the supplied url string
            </summary>
            <param name="url">url to trim</param>
            <returns>the string without any trailing Separatores</returns>
        </member>
        <member name="M:ABB.Robotics.Url.AppendPrecedingSeparator(System.String)">
            <summary>
            appends any preceding separators if such is missing
            </summary>
            <param name="url">url to verify</param>
            <returns>a correctly formated url</returns>
        </member>
        <member name="M:ABB.Robotics.Url.Resize(System.Int32[],System.Int32)">
            <summary>
            Grows the specified array with the term.
            </summary>
            <param name="array">The array to grow.</param>
            <param name="growthTerm">The factor used to grow the array
                                     with.</param>
            <returns>
            The new array.
            </returns>                                                
        </member>
        <member name="M:ABB.Robotics.Url.Resize(System.String[],System.Int32)">
            <summary>
            grows the specified array with the term?
            </summary>
            <param name="array">array to grow</param>
            <param name="growthTerm">factor used to grow the array with</param>
            <returns>the new array</returns>		
        </member>
        <member name="M:ABB.Robotics.Url.GetUrl">
            <summary>
            this is the internal implementation that returns
            the build url of this instance. This method shall
            always ne used internally to get the _url
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Url.IsEqual(ABB.Robotics.Url,ABB.Robotics.Url)">
            <summary>
            compares two instances of the url class
            </summary>
            <param name="x">instance one</param>
            <param name="y">instance two</param>
            <returns>true if both objects are considered equal</returns>
        </member>
        <member name="M:ABB.Robotics.Url.IsConsideredEqual(ABB.Robotics.Url,System.String)">
            <summary>
            compares the url object with an string that 
            holds another url
            </summary>
            <param name="x">instance one</param>
            <param name="y">instance two</param>
            <returns>true if equal</returns>
        </member>
        <member name="M:ABB.Robotics.Url.Invalidate">
            <summary>
            calling this method invalidates the current
            _url and forces a rebuild of the url at next
            access 
            </summary>
        </member>
        <member name="M:ABB.Robotics.Url.op_Addition(ABB.Robotics.Url,System.String)">
            <summary>
            Add operator between a url and a string.
            </summary>
            <param name="url1">The url object.</param>
            <param name="url2">The string.</param>
            <returns>
            The new url with the string appended.
            </returns>                                
        </member>
        <member name="M:ABB.Robotics.Url.op_Implicit(ABB.Robotics.Url)~System.String">
            <summary>
            implicit conversions from url to string handled by this 
            method
            </summary>
            <param name="url">url to convert into a string</param>
            <returns>the corresponding string</returns>
        </member>
        <member name="M:ABB.Robotics.Url.op_Equality(System.String,ABB.Robotics.Url)">
            <summary>
            Equality operator between two urls.
            </summary>
            <param name="x">The url object.</param>
            <param name="y">The string object.</param>
            <returns>
            True if the string and url are considered equal. 
            </returns>                                       
        </member>
        <member name="M:ABB.Robotics.Url.op_Inequality(System.String,ABB.Robotics.Url)">
            <summary>
            Inequality operator between a url and a string.
            </summary>
            <param name="x">The url object.</param>
            <param name="y">The string object.</param>
            <returns>
            True if the string and the url isn't considered equal. 
            </returns>                                             
        </member>
        <member name="M:ABB.Robotics.Url.op_Equality(ABB.Robotics.Url,System.String)">
            <summary>
            Equality operator between two urls.
            </summary>
            <param name="x">The url object.</param>
            <param name="y">The string object.</param>
            <returns>
            True if the string and url are considered equal.
            </returns>                                      
        </member>
        <member name="M:ABB.Robotics.Url.op_Inequality(ABB.Robotics.Url,System.String)">
            <summary>
            Inequality operator between a url and a string.
            </summary>
            <param name="x">The url object.</param>
            <param name="y">The string object.</param>
            <returns>
            True if the string and the url isn't considered equal.
            </returns>                                            
        </member>
        <member name="M:ABB.Robotics.Url.op_Equality(ABB.Robotics.Url,ABB.Robotics.Url)">
            <summary>
            Equality operator between two urls.
            </summary>
            <param name="x">The left hand statement.</param>
            <param name="y">The right hand statement.</param>
            <returns>
            True if the urls are considered equal.
            </returns>                                       
        </member>
        <member name="M:ABB.Robotics.Url.op_Inequality(ABB.Robotics.Url,ABB.Robotics.Url)">
            <summary>
            Inequality operator between two urls.
            </summary>
            <param name="x">The left hand statement.</param>
            <param name="y">The right hand statement.</param>
            <returns>
            True if objects are not equal. 
            </returns>                                       
        </member>
        <member name="M:ABB.Robotics.Url.Equals(System.Object)">
            <summary>
            Checks if this instance is equal to the supplied object
            instance that is passed to this method.
            </summary>
            <param name="obj">The object to compare this instance with.</param>
            <returns>
            True if the objects are considered equal.
            </returns>                                                         
        </member>
        <member name="M:ABB.Robotics.Url.GetHashCode">
            <summary>
            Gets the hash code of the url, this is the same as the hash
            code for a string with the same content, ie we use the
            GetHashCode() method on the build _url field to get this
            value.
            </summary>
            <returns>
            The hash code for the url.
            </returns>                                                 
        </member>
        <member name="M:ABB.Robotics.Url.ToString">
            <summary>
            \Returns the Url in string form.
            </summary>
            <returns>
            The url as string.
            </returns>                      
        </member>
        <member name="M:ABB.Robotics.Url.ToString(System.Int32,System.Int32)">
            <summary>
            \Returns the Url in string form.
            </summary>
            <param name="startIndex">The index to start extraction from.</param>
            <param name="stopIndex">The index to stop extraction from.</param>
            <returns>
            The url as string. 
            </returns>                                                          
        </member>
        <member name="M:ABB.Robotics.Url.ToString(System.Int32)">
            <summary>
            \Returns the Url in string form.
            </summary>
            <param name="startIndex">The index to start at.</param>
            <returns>
            The url as string.
            </returns>                                             
        </member>
        <member name="M:ABB.Robotics.Url.CreateEmpty(System.Int32)">
            <summary>
            Creates a new empty url object.
            </summary>                
            <param name="padding">The padding.</param>
        </member>
        <member name="M:ABB.Robotics.Url.GetInternalParts">
            <summary>
            Gets the internal parts of the url as a string array.
            </summary>
            <returns>
            The internal parts.
            </returns>                                           
        </member>
        <member name="M:ABB.Robotics.Url.GetEnumerator">
            <summary>
            IEnumerable implementation for Url.
            </summary>
            <returns>
            The enumerator object.
            </returns>                         
        </member>
        <member name="P:ABB.Robotics.Url.LastPart">
            <summary>
            gets the LastPart of the url
            </summary>
        </member>
        <member name="P:ABB.Robotics.Url.LastPartAsName">
            <summary>
            Returns the last part of the Url as a name, ie without the preceding /
            </summary>
        </member>
        <member name="P:ABB.Robotics.Url.Length">
            <summary>
            the length of the url
            </summary>
        </member>
        <member name="P:ABB.Robotics.Url.Item(System.Int32)">
            <summary>
            indexer for url to get the corresponding level 
            in the url
            </summary>
        </member>
        <member name="P:ABB.Robotics.Url.InternalInsertAt">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Url.InternalUrl">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.BlockUrl.#ctor(System.String)">
            <summary>
            Private constructor to avoid external creation.
            </summary>                                     
        </member>
        <member name="M:ABB.Robotics.BlockUrl.Create(System.String)">
            <summary>
            Creates a new BlockUrl object from a string.
            </summary>
            <param name="url">String to create BlockUrl object from.</param>
            <returns>A new BlockUrl object.</returns>
        </member>
        <member name="M:ABB.Robotics.BlockUrl.AppendBlock(ABB.Robotics.Url,ABB.Robotics.Url,System.Int32)">
            <summary>
            Creates a new Url object from a complete url and a block url. Use the 
            intersection index to determine where the intersection will be.
            </summary>
            <param name="root">Url to append with block.</param>
            <param name="block">Block url to append.</param>
            <param name="intersectionIndex">Index within block where the intersection will be.</param>
            <returns>The new complete url.</returns>
        </member>
        <member name="M:ABB.Robotics.BlockUrl.AppendBlock(ABB.Robotics.Url,ABB.Robotics.Url)">
            <summary>
            Creates a new Url object from a complete url and a block url. Use the 
            intersection index to determine where the intersection will be.
            </summary>
            <param name="root">Url to append with block.</param>
            <param name="block">Block url to append.</param>
            <returns>The new complete url.</returns>
        </member>
        <member name="T:ABB.Robotics.CallContext2">
            <summary>
            The call context holds information such as call timeout
            and the current controller client id. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.CallContext2.Activate(System.Object)">
            <summary>
            Activates a new target object.
            </summary>
            <param name="target">The target object to activate.</param>
        </member>
        <member name="M:ABB.Robotics.CallContext2.IsActive(System.Object)">
            <summary>
            Checks if the current callcontext is valid for the 
            supplied target object.
            </summary>
            <param name="target">The target object.</param>
            <returns>True if the context is valid.</returns>
        </member>
        <member name="P:ABB.Robotics.CallContext2.ClientId">
            <summary>
            Gets/Sets the current client id.
            </summary>
        </member>
        <member name="P:ABB.Robotics.CallContext2.SlowMultiplier">
            <summary>
            Gets/Sets the multiplier used for "slow" calls.
            </summary>
        </member>
        <member name="P:ABB.Robotics.CallContext2.Timeout">
            <summary>
            Gets/Sets the call timeout.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IControllerObject">
            <summary>
            Defines a interface for all the objects of a Robot Controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IControllerObject.Name">
            <summary> Gets the Name of a data in the Robot controller. </summary>
            <value> A text that represents the data's name.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.Availability">
            <summary>
            Describes the current availability of a Controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Availability.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Availability.Available">
            <summary>
            Controller is available.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Availability.Removed">
            <summary>
            Controller was removed from network.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Availability.Unavailable">
            <summary>
            Controller has become unavailable through an external event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Level">
            <summary>
            Current run level of controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Level.Unknown">
            <summary>
            Unknown level.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Level.Boot">
            <summary>
            Boot.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Level.System">
            <summary>
            System running.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerInfo">
            <summary>
            This class contains the "simple" information 
            that is available about a controller without
            connecting to it
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.NamedObject">
            <summary>
            This abstract any class that has a readable name.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.INamedObject">
            <summary>
            Defines a named object in the api.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.INamedObject.Name">
            <summary>
            Gets the name of the named object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.#ctor(System.String)">
            <summary>
            Creates a named object with the supplied name.
            </summary>
            <param name="name">Name of object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.#ctor">
            <summary>
            Creates a named object without a name. Name will be string.Empty.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.Equals(System.String)">
            <summary>
            Checks if the name of the object is same as name.
            </summary>
            <param name="name">Name to compare against.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.Equals(ABB.Robotics.Controllers.NamedObject)">
            <summary>
            Compares if the name of this object is equal to the name
            of the supplied object.
            </summary>
            <param name="obj">Named object to compare with.</param>
            <returns>True if the names are equal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.Equals(System.Object)">
            <summary>
            Merges the functionality of Equals( string ) and Equals( NamedObject ).
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns>True if the names are equals.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.CompareTo(System.String)">
            <summary>
            Compares this object with a name for sorting.
            </summary>
            <param name="name">Name to compare with.</param>
            <returns>See IComparer.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.CompareTo(ABB.Robotics.Controllers.NamedObject)">
            <summary>
            Compares this object with a name for sorting.
            </summary>
            <param name="obj">Name to compare with.</param>
            <returns>See IComparer.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.CompareTo(System.Object)">
            <summary>
            Compares this object with a name for sorting.
            </summary>
            <param name="obj">Name to compare with.</param>
            <returns>See IComparer.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.GetHashCode">
            <summary>
            Gets the hash code of the object based on the name.
            </summary>
            <returns>Hash code for object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.op_Equality(ABB.Robotics.Controllers.NamedObject,ABB.Robotics.Controllers.NamedObject)">
            <summary>
            Compares two named object for equality.
            </summary>
            <param name="no1">Named object 1.</param>
            <param name="no2">Named object 2.</param>
            <returns>True if the object are considered equal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.op_Inequality(ABB.Robotics.Controllers.NamedObject,ABB.Robotics.Controllers.NamedObject)">
            <summary>
            Compares two named object for inequality.
            </summary>
            <param name="no1">Named object 1.</param>
            <param name="no2">Named object 2.</param>
            <returns>True if the object are considered inequal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.op_LessThan(ABB.Robotics.Controllers.NamedObject,ABB.Robotics.Controllers.NamedObject)">
            <summary>
            Compares two objects.
            </summary>
            <param name="no1">Named object 1.</param>
            <param name="no2">Named object 2.</param>
            <returns>True if no1 less then no2</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.op_GreaterThan(ABB.Robotics.Controllers.NamedObject,ABB.Robotics.Controllers.NamedObject)">
            <summary>
            Compares two objects.
            </summary>
            <param name="no1">Named object 1.</param>
            <param name="no2">Named object 2.</param>
            <returns>True if no1 more then no2.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NamedObject.ToString">
            <summary>
            Returns the string representation of this object.
            Shall always return same result as Name property.
            </summary>
            <returns>The name of the object.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.NamedObject.Name">
            <summary>
            Gets the name of the obejct.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfo.#ctor(System.Guid)">
            <summary>
            Creats an info object for a pre known local virtual controller.
            </summary>
            <param name="systemId">System if of virtual controller.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfo.#ctor(System.Int32,System.Net.IPAddress,System.Version,System.String,System.String,System.String,System.String,System.Guid,ABB.Robotics.Controllers.Level,ABB.Robotics.Controllers.Availability,System.String)">
            <summary>
            Not for public use.
            </summary>        
            <param name="address">Not for public use.</param>
            <param name="version">Not for public use.</param>
            <param name="id">Not for public use.</param>
            <param name="hostName">Not for public use.</param>
            <param name="macAddress">Not for public use.</param>
            <param name="systemName">Not for public use.</param>
            <param name="systemId">Not for public use.</param>
            <param name="runLevel">Not for public use.</param>
            <param name="availability">Not for public use.</param>
            <param name="netscanId">Not for public use.</param>
            <param name="controllerName">Not for public use.</param>
            <exclude />
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfo.#ctor(System.Int32,System.Boolean,System.Net.IPAddress,System.Version,System.String,System.String,System.String,System.String,System.Guid,ABB.Robotics.Controllers.Level,ABB.Robotics.Controllers.Availability,System.String)">
            <summary>
            Not for public use.
            </summary>
            <param name="isVirtual">Not for public use.</param>
            <param name="address">Not for public use.</param>
            <param name="version">Not for public use.</param>
            <param name="id">Not for public use.</param>
            <param name="hostName">Not for public use.</param>
            <param name="macAddress">Not for public use.</param>
            <param name="systemName">Not for public use.</param>
            <param name="systemId">Not for public use.</param>
            <param name="runLevel">Not for public use.</param>
            <param name="availability">Not for public use.</param>
            <param name="netscanId">Not for public use.</param>
            <param name="controllerName">Not for public use.</param>
            <exclude />
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfo.#ctor(System.Int32,System.Version,System.String,System.String,System.String,System.String,System.Guid,ABB.Robotics.Controllers.Level,ABB.Robotics.Controllers.Availability,System.IO.DirectoryInfo,System.String)">
            <summary>
            Not for public use.
            </summary>
            <param name="baseDirectory">Not for public use.</param>    
            <param name="version">Not for public use.</param>
            <param name="id">Not for public use.</param>
            <param name="hostName">Not for public use.</param>
            <param name="macAddress">Not for public use.</param>
            <param name="systemName">Not for public use.</param>
            <param name="systemId">Not for public use.</param>
            <param name="runLevel">Not for public use.</param>
            <param name="availability">Not for public use.</param>
            <param name="netscanId">Not for public use.</param>
            <param name="controllerName">Not for public use.</param>
            <exclude />
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfo.Equals(System.Guid)">
            <summary>
            Checks if this object system id is equal to the provided Guid.
            </summary>
            <param name="systemId">Guid to compare two.</param>
            <returns>True if this objects SystemId is equal as systemId.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfo.Equals(ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Checks if this object has same systemId as the provided info object.
            </summary>
            <param name="info">ControllerInfo object to compare two.</param>
            <returns>True if the systemId is same on both objects.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfo.Equals(System.Object)">
            <summary>
            Combines the two other equals operations.
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns>True if the system ids are equal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfo.op_Equality(ABB.Robotics.Controllers.ControllerInfo,ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Compares two ControllerInfo objects for equility.
            </summary>
            <param name="co1">Object 1.</param>
            <param name="co2">Object 2.</param>
            <returns>True if both objects have the same system id.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfo.op_Inequality(ABB.Robotics.Controllers.ControllerInfo,ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Compares two ControllerInfo objects for in equility.
            </summary>
            <param name="co1">Object 1.</param>
            <param name="co2">Object 2.</param>
            <returns>True if both doesn't have the same system id.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfo.GetHashCode">
            <summary>
            Gets the hash code for this object. Based on the system id.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.Availability">
            <summary>
            Gets the Availability of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.ControllerName">
            <summary>
            Gets the controller name of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.RunLevel">
            <summary>
            Get the RunLevel of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.SystemId">
            <summary>
            Gets the system id of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.SystemName">
            <summary>
            Gets the system name of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.MacAddress">
            <summary>
            Gets the mac address of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.NetscanId">
            <summary>
            Gets the netscan id of the object. Not for public use.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.HostName">
            <summary>
            Gets the host name of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.Id">
            <summary>
            Get the Id of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.BaseDirectory">
            <summary>
            Gets the base directory of the controller for a virtual controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.Version">
            <summary>
            Gets the version of the system on the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.IPAddress">
            <summary>
            Gets the IP address of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfo.IsVirtual">
            <summary>
            Gets a flag to indicate if the controller is virtual or real.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerInfoCollection">
            <summary>
            A collection of ControllerInfo object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfoCollection.Add(ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Adds a ControllerInfo object to the collection.
            </summary>
            <param name="value">Object to add.</param>
            <returns>The index of the object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfoCollection.AddRange(ABB.Robotics.Controllers.ControllerInfo[])">
            <summary>
            Adds a range of ControllerInfo objectst o the collection.
            </summary>
            <param name="values">The objects to add.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfoCollection.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds a range of controller info objects to the collection.
            </summary>
            <param name="enum">The objects to add.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfoCollection.IndexOf(ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Gets the index of the object.
            </summary>
            <param name="value">Object to look for in the collection.</param>
            <returns>Index if found, -1 if not available in the collection.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfoCollection.Insert(System.Int32,ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Insert a object at the specified index.
            </summary>
            <param name="index">Index to insert object at.</param>
            <param name="value">Object to insert.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfoCollection.Remove(ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Removes a object from the collection.
            </summary>
            <param name="value">Object to remove.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfoCollection.Contains(ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Checks if a object is available in the collection.
            </summary>
            <param name="value">Object to look for.</param>
            <returns>True if the object is found.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfoCollection.CopyTo(ABB.Robotics.Controllers.ControllerInfo[],System.Int32)">
            <summary>
            Copies the content of this collection into the array.
            </summary>
            <param name="array">Target array.</param>
            <param name="index">Start index in array.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfoCollection.ToArray">
            <summary>
            Creates an array object that contains all objects from this array.
            </summary>
            <returns>A matching array with the same objects.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerInfoCollection.Item(System.Int32)">
            <summary>
            Gets/Sets the ControllerInfo object at the specified
            index.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerInfoComparer">
            <summary>
            Compares two instances of ControllerInfo through
            the IComparer interface. Used for sorting and searching.
            Built for extensibility since the default only compares
            the System Names.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerInfoComparer.OnCompare(ABB.Robotics.Controllers.ControllerInfo,ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Used to compare two instances of ControllerInfo, this method
            only compares the SystemNames, override and extend if needed.
            </summary>
            <param name="x">Instance X.</param>
            <param name="y">Instance Y.</param>
            <returns>Zero if equal, less then 0 if x is less then y, otherwise more then one.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.DeviceAccess">
            <summary>
            This enum controls how a stream to the controller is opened.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.DeviceAccess.None">
            <summary>
            No access. 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.DeviceAccess.Read">
            <summary>
            Read access to stream.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.DeviceAccess.ReadWrite">
            <summary>
            Read and write access to stream, same as Read | Write.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.DeviceAccess.Write">
            <summary>
            Write access to stream.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerOperatingMode">
            <summary>
            Specifies the operating modes of the controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerOperatingMode.Auto">
            <summary>
            Automatic mode (production)
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerOperatingMode.AutoChange">
            <summary>
            A change to automatic mode has been requested. 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerOperatingMode.Init">
            <summary>
            Initialize mode.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerOperatingMode.ManualFullSpeed">
            <summary>
            Manual full speed mode.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerOperatingMode.ManualFullSpeedChange">
            <summary>
            A change to manual full speed has been requested.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerOperatingMode.ManualReducedSpeed">
            <summary>
            Manual reduced speed mode
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerOperatingMode.NotApplicable">
            <summary>
            Controller operating mode is not applicable in current controller state.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerState">
            <summary>
            Specifies the states of the controller. 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerState.EmergencyStop">
            <summary>
            Emergency stop state.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerState.EmergencyStopReset">
            <summary>
            Emergency stop reset state.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerState.GuardStop">
            <summary>
            Guard stop state.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerState.Init">
            <summary>
            Initialize state.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerState.MotorsOff">
            <summary>
            Motors off state.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerState.MotorsOn">
            <summary>
            Motors on state.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerState.SystemFailure">
            <summary>
            System failure state.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerState.Unknown">
            <summary>
            Unknown state.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerEnableState">
            <summary>
            Specifies the enable state of the controller. 
            </summary>    
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerEnableState.Enable">
            <summary>
            Enable
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerEnableState.Disable">
            <summary>
            Disable
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerMastershipPolicy">
            <summary>
            Specifies how mastership should be handled by a GUI client
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerMastershipPolicy.Manual">
            <summary>
            The user must explicitly take mastership before executing an action.
            This is the default for real controllers.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerMastershipPolicy.Automatic">
            <summary>
            The client should automatically request mastership before executing
            an action, and release it afterwards.
            This is the default for Station controllers.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.EventLogDomain.CategoryType">
            <summary>
            Predefined event categories available in the event log in a ABB Controller. 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.Common">
            <summary>All elog events, but internal.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.Operational">
            <summary>Operational events.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.System">
            <summary>System events.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.Hardware">
            <summary>Hardware events.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.Program">
            <summary>Program events.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.Motion">
            <summary>Motion events.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.Operator">
            <summary>Operator events.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.IOCommunication">
            <summary>IO events.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.User">
            <summary>User defined events.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.Internal">
            <summary>Optional productos events. These events are obsolete</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.Process">
            <summary>Process events.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.Configuration">
            <summary> Configuration events. </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.SpotWeld">
            <summary>SpotWeld events.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.Paint">
            <summary>Paint events.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.CategoryType.Picker">
            <summary>Picker events.</summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidLoadMode">
            <summary>
            Specifies how a Rapid program should be loaded.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.RapidLoadMode.Add">
            <summary>
            Do not allow replacement of a allready loaded module
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.RapidLoadMode.Replace">
            <summary>
            Allow replacement of a allready loaded module
            </summary>
        </member>
        <member name="T:ABB.Robotics.BaseException">
            <summary>
            The BaseException class is the base class for all exceptions
            within the PC SDK.
            </summary>                                                  
        </member>
        <member name="M:ABB.Robotics.BaseException.#ctor">
            <summary>
            Overloaded constructor.
            </summary>	
        </member>
        <member name="M:ABB.Robotics.BaseException.#ctor(System.String)">
            <summary>
            Overloaded constructor.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:ABB.Robotics.BaseException.#ctor(System.String,System.Exception)">
            <summary>
            Overloaded constructor.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="exception">Inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.BaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.BaseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable interface.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="P:ABB.Robotics.BaseException.ExtendedErrorInformation">
            <summary>
            Gets/Sets the extended error information.
            </summary>
            <remarks>
            Obsolete.
            </remarks>                               
        </member>
        <member name="T:ABB.Robotics.TimeoutException">
            <summary>
            This exception is thrown whenever a timeout is reached.
            </summary>                                             
        </member>
        <member name="M:ABB.Robotics.TimeoutException.#ctor">
            <summary>
            Creates a timeout exception object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.TimeoutException.#ctor(System.String)">
            <summary>
            Creates a timeout exception object.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.TimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a timeout exception object.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message.</param>               
        </member>
        <member name="M:ABB.Robotics.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="context">See MSDN.</param>
            <param name="info">See MSDN.</param>   
        </member>
        <member name="T:ABB.Robotics.ExceptionManager">
            <summary>
            This class handles the conversion between RobApi HRESULTS and
            .NET PC SDK exceptions. It is a utility class and can not be
            instantiated.
            </summary>
            <returns>
            Only for internal use.
            </returns>                                                   
        </member>
        <member name="M:ABB.Robotics.ExceptionManager.Create(System.Int32)">
            <summary>
            Generates the an exception that corresponds to
            the provided error code.
            </summary>
            <param name="hresult">The hresult to create an exception for.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.ExceptionManager.Create(System.UInt32)">
            <summary>
            Generates the an exception that corresponds to
            the provided error code.
            </summary>
            <param name="hresult">The hresult to create an exception for.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.ExceptionManager.CreateLastW32">
            <summary>
            Creates a new W32 exception with GetLastError() as inparameter
            for the constructor.
            </summary>
            <returns>W32Exception object.</returns>
        </member>
        <member name="M:ABB.Robotics.ExceptionManager.Failed(System.Int32)">
            <summary>
            True if the hresult is an failure code.
            </summary>
            <param name="hresult">The hresult to verify.</param>
            <returns>
            True if the code is an error code.
            </returns>                                          
        </member>
        <member name="M:ABB.Robotics.ExceptionManager.Failed(System.UInt32)">
            <summary>
            True if the hresult is an failure code.
            </summary>
            <param name="hresult">The hresult to verify.</param>
            <returns>
            True if the code is an error code.
            </returns>                                          
        </member>
        <member name="M:ABB.Robotics.ExceptionManager.Succeeded(System.Int32)">
            <summary>
            \Returns true if the hresult is a success code.
            </summary>
            <param name="hresult">The hresult to verify.</param>
            <returns>
            True if the code is a success code.
            </returns>                                          
        </member>
        <member name="M:ABB.Robotics.ExceptionManager.Succeeded(System.UInt32)">
            <summary>
            \Returns true if the hresult is a success code.
            </summary>
            <param name="hresult">The hresult to verify.</param>
            <returns>
            True if the code is a success code.
            </returns>                                          
        </member>
        <member name="T:ABB.Robotics.Internal.BackupEventInfo">
            <summary>
            Holds information for a backup event.
            </summary>
            <exclude />
        </member>
        <member name="F:ABB.Robotics.Internal.BackupEventInfo.Finished">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.BackupEventInfo.SequenceNo">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.CfgAttributeInfo">
            <summary>
            Internal.
            </summary>
            <exclude />
        </member>
        <member name="F:ABB.Robotics.Internal.CfgAttributeInfo.Mandatory">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.CfgAttributeInfo.Size">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.CfgAttributeInfo.Initial">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.CfgAttributeInfo.Max">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.CfgAttributeInfo.Min">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.CfgAttributeInfo.Unit">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.CfgInstance">
            <summary>
            Internal.
            </summary>
            <exclude />
        </member>
        <member name="M:ABB.Robotics.Internal.CfgInstance.#ctor(System.String,System.Int32)">
            <summary>
            Internal.
            </summary>
            <param name="name">Internal.</param>
            <param name="id">Internal.</param>
        </member>
        <member name="F:ABB.Robotics.Internal.CfgInstance.Name">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.CfgInstance.Id">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.ControllerType">
            <summary>
            Internal.
            </summary>
            <exclude />
        </member>
        <member name="F:ABB.Robotics.Internal.ControllerType.Unknown">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.ControllerType.Real">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.ControllerType.Virtual">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.ControllerFileEntry">
            <summary>
            Internal.
            </summary>
            <exclude />
        </member>
        <member name="F:ABB.Robotics.Internal.ControllerFileEntry.AccessTime">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.ControllerFileEntry.Attributes">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.ControllerFileEntry.CreationTime">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.ControllerFileEntry.Name">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.ControllerFileEntry.Size">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.ControllerFileEntry.Path">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.ControllerFileEntry.WriteTime">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Internal.ControllerFileEntry.Equals(System.Object)">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Internal.ControllerFileEntry.Equals(ABB.Robotics.Internal.ControllerFileEntry)">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Internal.ControllerFileEntry.GetHashCode">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Internal.ControllerFileEntry.op_Equality(ABB.Robotics.Internal.ControllerFileEntry,ABB.Robotics.Internal.ControllerFileEntry)">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Internal.ControllerFileEntry.op_Inequality(ABB.Robotics.Internal.ControllerFileEntry,ABB.Robotics.Internal.ControllerFileEntry)">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Internal.ControllerFileEntry.IsDirectory">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.IControllerAdapter">
            <summary>
            Defines the controller adapter interface.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.IDataAdapter">
            <summary>
            Defines the interface of a data adapter.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Internal.IDataAdapter.Get">
            <summary>
            Gets the value.
            </summary>
            <returns>The value as string.</returns>
        </member>
        <member name="M:ABB.Robotics.Internal.IDataAdapter.Set(System.String)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">The value as string.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ABB.Robotics.Internal.IDataAdapter.Subscribe(ABB.Robotics.Url,System.Object,System.EventHandler,System.Boolean)" -->
        <member name="T:ABB.Robotics.Internal.IIpcAdapter">
            <summary>
            Defines the interface of a Ipc adapter.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Internal.IIpcAdapter.GetMaxPackageSize">
            <summary>
            Get the max package size that can be used from controller
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Internal.IIpcAdapter.GetMaxMessageSize">
            <summary>
            Get max standard message size from controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Internal.IIpcAdapter.GetQueueName(System.Int16)">
            <summary>
            Gets the name for a queue from the id.
            </summary>
            <param name="id">The id.</param>
            <returns>The name or null.</returns>
        </member>
        <member name="M:ABB.Robotics.Internal.IIpcAdapter.GetQueueId(System.String)">
            <summary>
            Gets the id for a queue from the name.
            </summary>
            <param name="name">The name.</param>
            <returns>The id or -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Internal.IIpcAdapter.CreateQueue(System.String,System.Int16,System.Int16)">
            <summary>
            Creates a queue on the controller.
            </summary>
            <param name="name">The name.</param>
            <param name="queueSize">The size of the queue.</param>
            <param name="messageSize">The size of the message.</param>
            <returns>The queue id.</returns>
        </member>
        <member name="M:ABB.Robotics.Internal.IIpcAdapter.DeleteQueue(System.Int16)">
            <summary>
            Deletes the queue by it's id.
            </summary>
            <param name="id">The queue id.</param>
        </member>
        <member name="M:ABB.Robotics.Internal.IIpcAdapter.Receive(System.Int32,System.Int16,System.Byte[]@,System.Int32@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int32@)">
            <summary>
            Receives a byte array from the ipc queue.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="id">The id.</param>
            <param name="buffer">The buffer.</param>
            <param name="size">The Size of buffer.</param>
            <param name="senderId">The sender id.</param>
            <param name="cmd">The command.</param>
            <param name="msgType">The message type.</param>
            <param name="userDef">The user defined value.</param>
            <param name="userData">The user defined data.</param>
        </member>
        <member name="M:ABB.Robotics.Internal.IIpcAdapter.Send(System.Int16,System.Int16,System.Byte[],System.Int16,System.Int16,System.Int16,System.Int32)">
            <summary>
            Sends a buffer to the ipc queue.
            </summary>
            <param name="id">The id.</param>
            <param name="destinationId">The destination id.</param>
            <param name="buffer">The buffer.</param>
            <param name="command">The command.</param>
            <param name="type">The Type of message.</param>
            <param name="userDef">The user defined value.</param>
            <param name="userData">The user defined data.</param>
        </member>
        <member name="M:ABB.Robotics.Internal.IIpcAdapter.Send(System.Int16,System.Int16,System.Byte[],System.Int32,System.Int16,System.Int16,System.Int16,System.Int32)">
            <summary>
            Sends a buffer to the ipc queue.
            </summary>
            <param name="id">The id.</param>
            <param name="destinationId">The destination id.</param>
            <param name="buffer">The buffer.</param>
            <param name="length">Length of the buffer.</param>
            <param name="command">The command.</param>
            <param name="type">The Type of message.</param>
            <param name="userDef">The user defined value.</param>
            <param name="userData">The user defined data.</param>
        </member>
        <member name="T:ABB.Robotics.Internal.IObjectBrowserAdapter">
            <summary>
            Defines the interface of an object browser instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Internal.IObjectBrowserAdapter.GetChildren">
            <summary>
            Gets all the children from the current node.
            </summary>
            <returns>The children.</returns>
        </member>
        <member name="T:ABB.Robotics.Internal.IOBusPhysState">
            <summary>
            Defines the physical state for a bus.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusPhysState.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusPhysState.Halted">
            <summary>
            Halted
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusPhysState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusPhysState.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusPhysState.Startup">
            <summary>
            Startup.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusPhysState.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.IOBusLogState">
            <summary>
            Defines the logical state for a bus.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusLogState.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusLogState.Stopped">
            <summary>
            Halted
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusLogState.Started">
            <summary>
            Running
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.IOBusData">
            <summary>
            A IOBus data object. Contains data for a bus.
            </summary>
            <exclude />
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusData.Name">
            <summary>
            Name of bus.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusData.Type">
            <summary>
            Type of bus.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOBusData.State">
            <summary>
            State of bus.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.IOUnitPhysState">
            <summary>
            Defines the physical state for a bus.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitPhysState.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitPhysState.Deactivated">
            <summary>
            Deactivated
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitPhysState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitPhysState.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitPhysState.Unconnected">
            <summary>
            Unconnected.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitPhysState.Unconfigured">
            <summary>
            Unconfigured
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitPhysState.Startup">
            <summary>
            Startup
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitPhysState.Init">
            <summary>
            Init
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.IOUnitLogState">
            <summary>
            Defines the physical state for a bus.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitLogState.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitLogState.Disabled">
            <summary>
            Disabled.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitLogState.Enabled">
            <summary>
            Enabled.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.IOUnitData">
            <summary>
            A IOUnitData data object. Contains data for a unit.
            </summary>
            <exclude />
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitData.mask">
            <summary>
            Mask of unit.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.IOUnitData.data">
            <summary>
            data of unit.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.MastershipResource">
            <summary>
            Internal.
            </summary>
            <exclude />
        </member>
        <member name="F:ABB.Robotics.Internal.MastershipResource.Rapid">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.MastershipResource.Configuration">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.MastershipResource.Motion">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.MastershipResource.InfoStream">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.MastershipResource.All">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.MastershipStatus">
            <summary>
            Internal.
            </summary>
            <exclude />
        </member>
        <member name="F:ABB.Robotics.Internal.MastershipStatus.None">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.MastershipStatus.Remote">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.MastershipStatus.Local">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.MastershipStatus.Internal">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.MastershipInfo">
            <summary>
            Internal.
            </summary>
            <exclude />
        </member>
        <member name="M:ABB.Robotics.Internal.MastershipInfo.#ctor(System.Boolean,ABB.Robotics.Internal.MastershipStatus)">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Internal.MastershipInfo.CurrentUserIsMaster">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Internal.MastershipInfo.Status">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.RmmpStatus">
            <summary>
            Internal.
            </summary>
            <exclude />
        </member>
        <member name="F:ABB.Robotics.Internal.RmmpStatus.None">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.RmmpStatus.Modify">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.RmmpStatus.Execute">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.RmmpStatus.PendingModify">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.RmmpInfo">
            <summary>
            Internal.
            </summary>
            <exclude />
        </member>
        <member name="M:ABB.Robotics.Internal.RmmpInfo.#ctor(System.Boolean,ABB.Robotics.Internal.RmmpStatus)">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Internal.RmmpInfo.Status">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Internal.RmmpInfo.CurrentUserHasRmmp">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.NativeMethods">
            <summary>
            Internal.
            </summary>
            <exclude />
        </member>
        <member name="T:ABB.Robotics.Internal.NativeMethods.COM">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Internal.NativeMethods.COM.ClearAndFreeVariant(System.IntPtr)">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Internal.NativeMethods.COM.VariantClear(System.IntPtr)">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.RapidSymbolData">
            <summary>
            A Rapid Symbol data object. Contains data for a 
            Rapid symbol. The content varies heavily on the
            Type variable. See SymbolFactory.h for populating code.
            </summary>
            <exclude />
        </member>
        <member name="F:ABB.Robotics.Internal.RapidSymbolData.Name">
            <summary>
            Name of symbol.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.RapidSymbolData.Type">
            <summary>
            Type of symbol.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.RapidSymbolData.TypeUrl">
            <summary>
            BlockUrl of type, only valid for data (var, pers, const).
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.RapidSymbolData.Url">
            <summary>
            Url of current symbol.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.RapidSymbolData.Dim">
            <summary>
            Dimensions for data.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.RapidSymbolData.AliasedTypeUrl">
            <summary>
            The underlying type of a alias.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.RapidSymbolData.SymbolProperties">
            <summary>
            Properties of symbol.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.TaskSelectionState">
            <summary>
            Task state in selection panel
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.TaskSelectionState.TaskSelectionStateOn">
            <summary>
            Commment
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.TaskSelectionState.TaskSelectionStateOff">
            <summary>
            Commment
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.TaskSelectionState.TaskSelectionStateNA">
            <summary>
            Commment
            </summary>
        </member>
        <member name="T:ABB.Robotics.Internal.TaskPanelItem">
            <summary>
            Comment
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.TaskPanelItem.TskName">
            <summary>
            Commment
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.TaskPanelItem.MotionTsk">
            <summary>
            Commment
            </summary>
        </member>
        <member name="F:ABB.Robotics.Internal.TaskPanelItem.state">
            <summary>
            Commment
            </summary>
        </member>
        <member name="T:ABB.Robotics.PoolFactory`2">
            <summary>
            Pool factory delegate.
            </summary>
            <typeparam name="TObject">The object type.</typeparam>
            <typeparam name="TBindArg">The bind target arg.</typeparam>
            <param name="target">The target object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="T:ABB.Robotics.IRecycle">
            <summary>
            Marks a class for recyling within an object pool.
            </summary>
        </member>
        <member name="M:ABB.Robotics.IRecycle.Recycle(System.Object)">
            <summary>
            Recycles the object.
            </summary>
            <param name="obj">Object to recycle.</param>
        </member>
        <member name="T:ABB.Robotics.IObjectPool`2">
            <summary>
            Defines the interface for an object pool.
            </summary>  
        </member>
        <member name="M:ABB.Robotics.IObjectPool`2.GetObject(`1)">
            <summary>
            Gets an object from the pool and binds it to the target.
            </summary>    
            <param name="target">The bind target.</param>
            <returns>An object from the pool.</returns>
        </member>
        <member name="M:ABB.Robotics.IObjectPool`2.RegisterFactory(ABB.Robotics.PoolFactory{`0,`1})">
            <summary>
            Registers a factory object.
            </summary>    
            <param name="factory">The factory.</param>
        </member>
        <member name="T:ABB.Robotics.IPoolable`1">
            <summary>
            Implements this interface on a class to mark it as poolable. (Required)
            </summary>  
        </member>
        <member name="M:ABB.Robotics.IPoolable`1.BindPool(ABB.Robotics.IRecycle)">
            <summary>
            Binds this object to a pool.
            </summary>
            <param name="pool">The pool.</param>
        </member>
        <member name="M:ABB.Robotics.IPoolable`1.Bind(`0)">
            <summary>
            Binds the object.
            </summary>
            <param name="target">Target data.</param>
        </member>
        <member name="M:ABB.Robotics.IPoolable`1.Unbind">
            <summary>
            Unbinds the object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.IPoolable`1.UnbindPool">
            <summary>
            Releases the object from the pool.
            </summary>
        </member>
        <member name="T:ABB.Robotics.MasterRejectException">
            <summary>
            This exception is thrown if an operation fails when
            the caller doesn't have the required mastership privilege.
            </summary>
        </member>
        <member name="T:ABB.Robotics.GeneralException">
            <summary>
            Base exception type for all exceptions that are raised by the
            <see cref="T:ABB.Robotics.ExceptionManager" text="ExceptionManager Class"/>;
            and that supports lazy loading of the message.
            </summary>
            <remarks>
            Mostly for internal use, external usage should be limited to
            try/catch( ... ) statements.
            </remarks>                                                                 
        </member>
        <member name="M:ABB.Robotics.GeneralException.#ctor">
            <summary>
            Initializes a general exception object. 
            </summary>                              
        </member>
        <member name="M:ABB.Robotics.GeneralException.#ctor(System.String)">
            <summary>
            Creates a general exception object.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.GeneralException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a general exception object.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The Message.</param>               
        </member>
        <member name="M:ABB.Robotics.GeneralException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="context">See MSDN.</param>
            <param name="info">See MSDN.</param>   
        </member>
        <member name="M:ABB.Robotics.GeneralException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:ABB.Robotics.GeneralException.Message">
            <summary>
            Get the message.
            </summary>      
        </member>
        <member name="M:ABB.Robotics.MasterRejectException.#ctor">
            <summary>
            Initializes a new MasterReject instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.MasterRejectException.#ctor(System.String)">
            <summary>
            Initializes a new MasterReject instance.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.MasterRejectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new MasterReject instance.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.MasterRejectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new MasterReject instance.
            </summary>
            <param name="context">See MSDN.</param>
            <param name="info">See MSDN.</param>    
        </member>
        <member name="M:ABB.Robotics.MasterRejectException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitStatus">
            <summary>
            The status of one or more mechanical uint
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitStatus.Undefined">
            <summary>
            Undefined status
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitStatus.Initiated">
            <summary>
            Axis/axes have been initiated.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitStatus.NotCommutated">
            <summary>
            Axis/axes are not commutated
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitStatus.NotCalibrated">
            <summary>
            Axis/axes are not calibrated
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitStatus.NotSynchronized">
            <summary>
            Axis/axes are not synchronized
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitStatus.Synchronized">
            <summary>
            Axis/axes are synchronized
            </summary>
        </member>
        <member name="T:ABB.Robotics.ModeRejectException">
            <summary>
            This exception is throw in a operation fails due to the
            current mode of the controller, ie a user tried to perform
            a operation that isn't supported in current mode.
            </summary>
        </member>
        <member name="M:ABB.Robotics.ModeRejectException.#ctor">
            <summary>
            Initializes a new ModeRejectException instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.ModeRejectException.#ctor(System.String)">
            <summary>
            Initializes a new ModeRejectException instance.
            </summary>
            <param name="message">The Message.</param>     
        </member>
        <member name="M:ABB.Robotics.ModeRejectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new ModeRejectException instance.
            </summary>
            <param name="message">The Message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.ModeRejectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new ModeRejectException instance.
            </summary>
            <param name="context">See MSDN.</param>
            <param name="info">See MSDN.</param>           
        </member>
        <member name="M:ABB.Robotics.ModeRejectException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.GenericControllerException">
            <summary>
            \Exceptions of this type is thrown by the <see cref="T:ABB.Robotics.ExceptionManager" text="ExceptionManager Class"/>
            if no specialized type is registered for a HRESULT.
            </summary>
            <remarks>
            Only for internal use.
            </remarks>                                                                                                          
        </member>
        <member name="M:ABB.Robotics.GenericControllerException.#ctor">
            <summary>
            Creates a GenericController Exception object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.GenericControllerException.#ctor(System.String)">
            <summary>
            Creates a GenericController Exception object.
            </summary>
            <param name="message">The Message.</param>   
        </member>
        <member name="M:ABB.Robotics.GenericControllerException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a GenericController Exception object.
            </summary>
            <param name="message">The Message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.GenericControllerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a GenericController Exception object. Deserialization
            constructor.
            </summary>
            <param name="context">See MSDN.</param>
            <param name="info">See MSDN.</param>                         
        </member>
        <member name="T:ABB.Robotics.Controllers.ServiceNotSupportedException">
            <summary>
            An exception of this class is thrown if no specialized
            type is found.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ServiceNotSupportedException.#ctor">
            <summary>
            Creates a ServiceNotSupportedException object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ServiceNotSupportedException.#ctor(System.String)">
            <summary>
            Creates a ServiceNotSupportedException object.
            </summary>
            <param name="message">Message for object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ServiceNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a ServiceNotSupportedException object.
            </summary>
            <param name="innerException">Inner exception of object.</param>
            <param name="message">Message for object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ServiceNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a ServiceNotSupportedException object.
            Deserialization constructor.
            </summary>
            <param name="context">SEE MSDN.</param>
            <param name="info">SEE MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerBufferOverflowException">
            <summary>
            An exception of this class is thrown if no specialized
            type is found.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerBufferOverflowException.#ctor">
            <summary>
            Creates a ControllerBufferOverflowException object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerBufferOverflowException.#ctor(System.String)">
            <summary>
            Creates a ControllerBufferOverflowException object.
            </summary>
            <param name="message">Message for object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerBufferOverflowException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a ControllerBufferOverflowException object.
            </summary>
            <param name="innerException">Inner exception of object.</param>
            <param name="message">Message for object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerBufferOverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a ControllerBufferOverflowException object.
            Deserialization constructor.
            </summary>
            <param name="context">SEE MSDN.</param>
            <param name="info">SEE MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.AuthenticationException">
            <summary>
            An exception of this class is thrown if no specialized type is found.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.AuthenticationException.#ctor">
            <summary>
            Creates a AuthenticationException object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.AuthenticationException.#ctor(System.String)">
            <summary>
            Creates a AuthenticationException object.
            </summary>
            <param name="message">Message for object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a AuthenticationException object.
            </summary>
            <param name="innerException">Inner exception of object.</param>
            <param name="message">Message for object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.AuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a AuthenticationException object.
            Deserialization constructor.
            </summary>
            <param name="context">SEE MSDN.</param>
            <param name="info">SEE MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.ObjectPool`2">
            <summary>
            Fixed size object pool.
            </summary>
            <typeparam name="TObject">The pooled type.</typeparam>
            <typeparam name="TBindArg">The type of the bind argument.</typeparam>
        </member>
        <member name="M:ABB.Robotics.ObjectPool`2.#ctor(System.Int32,ABB.Robotics.PoolFactory{`0,`1})">
            <summary>
            Initializes a new instance of ObjectPool class.
            </summary>
            <param name="max">The max ammount of pooled objects.</param>
            <param name="factory">Object factory.</param>
        </member>
        <member name="M:ABB.Robotics.ObjectPool`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of ObjectPool class.
            </summary>
            <param name="max">The max ammount of pooled objects.</param>
        </member>
        <member name="M:ABB.Robotics.ObjectPool`2.Dispose">
            <summary>
            Disposes the object pool and all pooled objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.ObjectPool`2.GetObject(`1)">
            <summary>
            Gets an object from the object pool.
            </summary>
            <param name="arg">The bind argument.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:ABB.Robotics.ObjectPool`2.Recycle(System.Object)">
            <summary>
            Recycles an pooled object.
            </summary>
            <param name="obj">The pooled object.</param>
        </member>
        <member name="M:ABB.Robotics.ObjectPool`2.RegisterFactory(ABB.Robotics.PoolFactory{`0,`1})">
            <summary>
            Registers a factory object.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="T:ABB.Robotics.PCounter">
            <summary>
            Holds two performance counters, one process instance
            and one global instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.PCounter.#ctor(System.String)">
            <summary>
            Creates a new performance counter object.
            </summary>    
            <param name="name">The counter name.</param>
        </member>
        <member name="M:ABB.Robotics.PCounter.Decrement">
            <summary>
            Increments both counters.
            </summary>
        </member>
        <member name="M:ABB.Robotics.PCounter.Increment">
            <summary>
            Increments both the process and global counters.
            </summary>
        </member>
        <member name="M:ABB.Robotics.PCounter.op_Increment(ABB.Robotics.PCounter)">
            <summary>
            This operator shall not be used to any calculations
            since it will always return 0.
            </summary>
            <param name="counter">The counter to increment.</param>
            <returns>This object.</returns>
        </member>
        <member name="M:ABB.Robotics.PCounter.op_Decrement(ABB.Robotics.PCounter)">
            <summary>
            Decrements the counter by one.
            </summary>
            <param name="counter">The counter to increment.</param>
            <returns>This object.</returns>
        </member>
        <member name="P:ABB.Robotics.PCounter.ProcessValue">
            <summary>
            Gets the process value.
            (For test)
            </summary>
        </member>
        <member name="P:ABB.Robotics.PCounter.GlobalValue">
            <summary>
            Gets the global value.
            (For test)
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.SymbolSearchMethod">
            <summary>
            Defines the search method for a symbol search.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolSearchMethod.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolSearchMethod.Block">
            <summary>
            Search current block.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolSearchMethod.Scope">
            <summary>
            Search current scope.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.TaskType">
            <summary>
            Defines the task types.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.TaskType.Normal">
            <summary>
            Normal task type.
            Possible to enable/disable in task selection panel.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.TaskType.Static">
            <summary>
            Static task type.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.TaskType.SemiStatic">
            <summary>
            Semi-static task type.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.SymbolTypes">
            <summary>
            Symbol types possible to search for.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.None">
            <summary>
            No type.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Atomic">
            <summary>
            All atomic types.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Record">
            <summary>
            Records.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Alias">
            <summary>
            Aliases.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.RecordComponent">
            <summary>
            Record components.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Constant">
            <summary>
            Constants.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Variable">
            <summary>
            Variables.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Persistent">
            <summary>
            Persistent data.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Parameter">
            <summary>
            Parameters.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Label">
            <summary>
            Labels.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Function">
            <summary>
            Functions.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Procedure">
            <summary>
            Procedures.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Trap">
            <summary>
            Traps.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Module">
            <summary>
            Modules.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Task">
            <summary>
            Tasks.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Routine">
            <summary>
            Routines, Function | Procedures | Trap.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Data">
            <summary>
            Data, Constant | Variable | Persistent
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.SymbolProperties">
            <summary>
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.SymbolProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolTypes)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.SymbolProperties.Type">
            <summary>
            Type of symbol.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.AtomicProperties">
            <summary>
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.AtomicProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolTypes,System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.AtomicProperties.DataType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.AtomicProperties.TypeUrl">
            <summary>
            
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RecordProperties">
            <summary>
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RecordProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolTypes,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RecordProperties.Local">
            <summary>
            
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.AliasProperties">
            <summary>
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.AliasProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolTypes,System.Boolean,System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.AliasProperties.Local">
            <summary>
            
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.AliasProperties.DataType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.AliasProperties.TypeUrl">
            <summary>
            
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RecordComponentProperties">
            <summary>
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RecordComponentProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolTypes,System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RecordComponentProperties.TypeUrl">
            <summary>
            Url to type declaration
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RecordComponentProperties.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ConstantProperties">
            <summary>
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConstantProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolTypes,System.Boolean,System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ConstantProperties.Local">
            <summary>
            
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ConstantProperties.TypeUrl">
            <summary>
            Url to type declaration
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ConstantProperties.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.VariableProperties">
            <summary>
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.VariableProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolTypes,System.Boolean,System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.VariableProperties.Local">
            <summary>
            
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.VariableProperties.TypeUrl">
            <summary>
            Url to type declaration
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.VariableProperties.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.PersistentProperties">
            <summary>
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.PersistentProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolTypes,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Properties for persistent data
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.PersistentProperties.Local">
            <summary>
            Whether locally declared or not, false if global module persistent, else true
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.PersistentProperties.TaskPers">
            <summary>
            Whether declared as task pers or not
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.PersistentProperties.TypeUrl">
            <summary>
            Url to type declaration
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.PersistentProperties.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ParameterProperties">
            <summary>
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ParameterProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolTypes,System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ParameterProperties.TypeUrl">
            <summary>
            Url to type declaration
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ParameterProperties.DataType">
            <summary>
            Data type
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ExecutionLevel">
             <summary>
             Defines task execution level. 
             </summary>
             <remarks>
             An execution level basically consists of 
             the RAPID program stack, callchain and PCP.
             A task has exactly one (or no) current execution level. 
            	The three execution levels form a hierarchy, where User is the highest,
            	and Normal is the lowest. That is, if User exists, 
            	it is the current level etc.
             
             The normal execution level must exist for the trap or user level to be able to exist.
            	The user execution level can exist without the trap execution level to exist.
            
            	When a higher execution level is cleared, the next execution level in the hierarchy is
            	made current, i.e., the PCP is restored etc.
             </remarks>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionLevel.None">
            <summary>
            No execution level active.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionLevel.Normal">
            <summary>
            Normal execution level. For normal program execution.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionLevel.Trap">
            <summary>
            Trap execution level. Created by RAPID for execution of 
            trap-routines when RAPID interrupts occur.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionLevel.User">
            <summary>
            User execution level. Created by RAB clients, e.g., 
            for execution of service-routines.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties">
            <summary>
            Defines the search properties for a symbol search.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolSearchMethod,ABB.Robotics.Controllers.RapidDomain.SymbolTypes,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a symbol search property object.
            </summary>
            <param name="method">Search method.</param>
            <param name="types">Types to search for.</param>
            <param name="recursive">Recursive search.</param>
            <param name="local">Include local parameters.</param>
            <param name="global">Include global parameters. </param>
            <param name="inUse">Include only symbols that are in use.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolSearchMethod,ABB.Robotics.Controllers.RapidDomain.SymbolTypes)">
            <summary>
            Creates a symbol search property object.
            </summary>
            <param name="method">Search method.</param>
            <param name="types">Types to search for.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.#ctor(ABB.Robotics.Controllers.RapidDomain.SymbolSearchMethod)">
            <summary>
            Creates a symbol search property object.
            </summary>
            <param name="method">Search method.</param>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.#ctor">
            <summary>
            Creates a symbol search property object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.CreateDefault">
            <summary>
            Creates the default search properties
            </summary>
            <returns>Default search properties for NO kind of symbol. MUST set Type!!!</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.CreateDefaultForData">
            <summary>
            Creates default properties for a data search.
            </summary>
            <returns>Default search properties for a data search.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.CreateDefaultForData(System.Boolean)">
            <summary>
            Creates default properties for a data search.
            </summary>
            <param name="recursive">Recursive search.</param>
            <returns>Default search properties for a data search.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.CreateDefaultForRoutine">
            <summary>
            Creates default properties for a data search.
            </summary>
            <returns>Default search properties for a data search.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.CreateDefaultForRoutine(System.Boolean)">
            <summary>
            Creates default properties for a data search.
            </summary>
            <param name="recursive">Recursive search.</param>
            <returns>Default search properties for a data search.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.GlobalSymbols">
            <summary>
            Include global symbols.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.InUse">
            <summary>
            Include symbols in use.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.LocalSymbols">
            <summary>
            Include local symbols.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.Recursive">
            <summary>
            Search recursive.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.SearchMethod">
            <summary>
            Search method.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties.Types">
            <summary>
            Types to search for.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.SystemDirectoryCorruptException">
            <summary>
            This class is thrown a system directory was corrupt.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.SystemDirectoryCorruptException.#ctor">
            <summary>
            Creates a SystemDirectoryCorruptException.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.SystemDirectoryCorruptException.#ctor(System.String)">
            <summary>
            Creates a SystemDirectoryCorruptException.
            </summary>
            <param name="message">Message of exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.SystemDirectoryCorruptException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a SystemDirectoryCorruptException.
            </summary>
            <param name="message">Message of exception.</param>
            <param name="innerException">Inner exception of exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.SystemDirectoryCorruptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a SystemDirectoryCorruptException.
            </summary>
            <param name="context">See MSDN.</param>
            <param name="info">See MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.SystemDirectoryCorruptException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="M:Adapters.Adapter.CreateControllerObject(System.String)">
            <summary>
            Creates RobControllerConnection one object for each controller and returns the object if already exists.
            </summary>        
        </member>
        <member name="M:Adapters.Adapter.Unsubscribe(System.UInt32)">
            <summary>
            Unsubscribes the event for the specified cookie.
            </summary>
        </member>
        <member name="M:Adapters.TaskSelectionFactory.AddTaskPanelItemFactory(RobotStudio.Services.RobApi.RobTaskPanelItem)">
            <summary>
            Add TaskPanelItem to the list
            </summary>
        </member>
        <member name="M:Adapters.RapidAdapter.InitSearchProps(RobotStudio.Services.RobApi.RobSymbolSearchProperties,ABB.Robotics.Url)">
            <summary>
            Set default search props as a starting point.
            </summary>
        </member>
        <member name="M:Adapters.RapidAdapter.InitSearchProps(RobotStudio.Services.RobApi.RobSymbolSearchProperties,ABB.Robotics.Url,ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties)">
            <summary>
            Set default search props as a starting point. And assign the specified properties.
            </summary>
        </member>
        <member name="M:Adapters.UIParamsFactory.AddUIParamToFactory(Adapters.UIParams)">
            <summary>
            Add UIParam to the UIParamsFactory list.
            </summary>
        </member>
        <member name="M:Adapters.Rapid.UnpackExecutionInfo">
            <summary>
            Unpacks eventInfoExecutionChanged to an integer.
            </summary>        
        </member>
        <member name="M:Adapters.Rapid.GetExecutionCycle">
            <summary>
            Gets the remaining execution cycles.
            </summary>
        </member>
        <member name="M:Adapters.Rapid.GetExecutionStatus">
            <summary>
            Gets the execution status of the RAPID.
            </summary>        
        </member>
        <member name="M:Adapters.Rapid.SetExecutionCycle(System.Int32)">
            <summary>
            Sets the cycleId as execution cycles.
            </summary>
            <param name="cycle"></param>
        </member>
        <member name="M:Adapters.Rapid.GetRecordComponents(ABB.Robotics.Url)">
            <summary>
            Gets the Record Components of the UserDefined record as mentioned in the url.
            </summary>        
        </member>
        <member name="M:Adapters.Rapid.GetSymbol(ABB.Robotics.Url)">
            <summary>
            Get symbool data for the specified url.
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:Adapters.Rapid.Start(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>
        </member>
        <member name="M:Adapters.Rapid.Stop(System.Int32)">
            <summary>
            Stops RAPID execution according to the specified mode.
            </summary>
        </member>
        <member name="M:Adapters.Rapid.GetTaskSelectionState">
            <summary>
            Task activated/deactivated
            Get the task selection panel and its items with state.
            </summary>        
        </member>
        <member name="M:Adapters.Rapid.SetTaskSelectionState(System.String,ABB.Robotics.Internal.TaskSelectionState)">
            <summary>
            Set cannot be done from remote clients and is allowed from local clients only.
            </summary>
            <remarks>
            Set cannot be done from remote clients and is allowed from local clients only.
            Set requires controller to be in manual mode.
            </remarks>
        </member>
        <member name="M:Adapters.Rapid.WriteUIInstruction(System.String,System.String,System.Collections.Generic.List{Adapters.UIParams},System.Int32)">
            <summary>
            Writes UIInstruction for the specified stackUrl and data in the List.
            </summary>
        </member>
        <member name="M:Adapters.Rapid.ReadUIInstruction(System.String,System.String,System.String)">
            <summary>
            Reads UIInstruction arguments based upon UIInstruction and stackUrl + argument names of instruction.
            </summary>
        </member>
        <member name="M:Adapters.Rapid.Subscribe(Adapters.EventId,System.Object,System.EventHandler,System.Boolean)">
            <summary>
            Subscribe to an event handler based upon the EventID. UIIn
            </summary>
        </member>
        <member name="M:Adapters.Rapid.UnpackUIInstructionEvent">
            <summary>
            Unpacks _UIInstructionEventData string from the event 'UIInstructionChanged' to 'UIInstructionEventData'.
            </summary>        
        </member>
        <member name="M:Adapters.Rapid.UnpackExecutionState">
            <summary>
            Unpacks the ExecutionState returned from the event handler. 
            </summary>        
        </member>
        <member name="T:Adapters.Rapid.AdaptUIInstructionEventType">
            <summary>
            Defines the different UIInstruction event types.
            It is similar to UIInstructionEventType of ABB.Robotics.Controllers.RapidDomain, created in Adapters to avoid cyclic reference.        
            </summary>
        </member>
        <member name="F:Adapters.Rapid.AdaptUIInstructionEventType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Adapters.Rapid.AdaptUIInstructionEventType.Post">
            <summary>
            Post event type, eg. TPWrite, TPErase
            </summary>
        </member>
        <member name="F:Adapters.Rapid.AdaptUIInstructionEventType.Send">
            <summary>
            Send event type, UI-Instructions of this type can be aborted/closed/confirmed, eg. TPReadNum, UIListView
            </summary>
        </member>
        <member name="F:Adapters.Rapid.AdaptUIInstructionEventType.Abort">
            <summary>
            UI-Instruction aborted/closed/confirmed by the operator.
            If you receive a new Send event type from the same task, 
            the previous dialog should be removed and the new dialog displayed, as a RAPID task can only handle 
            one dialog. This may happen if RAPID execution is stopped while a UI-Instruction dialog is being displayed, 
            then restarted and executing a new UIInstruction.
            </summary>
        </member>
        <member name="M:Adapters.CfgInstanceFactory.AddInstanceItemFactory(RobotStudio.Services.RobApi.Retained.RobRetainedCfgInstance)">
            <summary>
            Add InstanceItem to the list
            </summary>
        </member>
        <member name="M:Adapters.Configuration.#ctor(ABB.Robotics.Url)">
            <summary>
            Constructor for Configuration
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Adapters.Configuration.Load(System.String,System.Int32)">
            <summary>
            Loads a configuration file into the database.
            </summary>
            <param name="path">The path. (On the controller).</param>
            <param name="loadMode">The load mode code.</param>
        </member>
        <member name="M:Adapters.Configuration.RobLoad(System.String,RobotStudio.Services.RobApi.RobCfgLoadMode)">
            <summary>
            Loads a configuration file into the database.
            </summary>
            <param name="path">The path. (On the controller).</param>
            <param name="mode">The load mode in RobCfgLoadMode format.</param>
        </member>
        <member name="M:Adapters.ConfigDomain.Reset">
            <summary>
            Remove all external instances in a domain.
            </summary>
            <param name="domain"></param>
            <returns></returns>
            <remarks>
            Remove and free all unprotected instances of the specified domain.
            Requires UAS grant UAS_CFG_WRITE.
            </remarks>
        </member>
        <member name="M:Adapters.ConfigDomain.Save(System.String)">
            <summary>
            Saves database domain to a specified file.
            </summary>    
            <param name="destFile">Path of the destination file.</param>
            <returns></returns>
            <remarks>
            The method overwrites the specified file if it exists.
            Requires UAS grant UAS_BACKUP.
            </remarks>
        </member>
        <member name="M:Adapters.ConfigType.GetAttributeType(System.String)">
            <summary>
            Gets the TypeCode of the attribute.
            </summary>        
        </member>
        <member name="M:Adapters.ConfigType.InstanceIsReadOnly(System.Int32)">
            <summary>
            Flag that signals that the object is readonly or not.
            </summary>
            <param name="id">object Id</param>
            <returns>boolean value</returns>
        </member>
        <member name="M:Adapters.ConfigType.Create(System.String)">
            <summary>
            Creates an object with the specified name.
            </summary>
            <param name="name">Name of instance.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Adapters.ConfigType.Delete(System.Int32)">
            <summary>
             Deletes the given object from the database.
            </summary>
            <param name="id">Id of the instance</param>
        </member>
        <member name="M:Adapters.ConfigType.SetAttributeValue(System.Int32,System.String,System.Int32,System.Object)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="id">Id of attribute to set.</param>
            <param name="name">Name of attribute to set.</param>
            <param name="index">Index of attribute,1-based.</param>
            <param name="value">New Value of attribute.</param>
        </member>
        <member name="M:Adapters.ConfigType.GetAttributeValue(System.Int32,System.String,System.Int32)">
            <summary>
             Returns the value of the attribute.
            </summary>
            <param name="id">Id of attribute to fetch.</param>
            <param name="name">Name of attribute to fetch.</param>
            <param name="index">Index of attribute, 1-based.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:Adapters.ConfigType.GetInstance(System.String)">
            <summary>
            Gets the CfgInstance Id for the specified name.
            </summary>        
        </member>
        <member name="M:Adapters.ConfigType.GetInstances">
            <summary>
            Gets all instances for the specified CfgDomainType.
            </summary>        
        </member>
        <member name="M:Adapters.ConfigType.GetAttributes">
            <summary>
            Gets attributes list for the specified CfgDomainType.
            </summary>
        </member>
        <member name="M:Adapters.ConfigType.GetAttributeInfo(System.String)">
            <summary>
            Gets the Attribute info for the specified attribute name.
            </summary>        
        </member>
        <member name="M:Adapters.Controller.Acknowledge(Adapters.ControllerAcknowledge)">
            <summary>
            Acknowledge the controller.
            </summary>
        </member>
        <member name="M:Adapters.Controller.CancelRMMPRequest">
            <summary>
            Cancel held privileges or pending request.
            WI 12159 : RobAPI exception occurs when launching Virtual flexpendant in a VC having EPS option
            </summary>
        </member>
        <member name="M:Adapters.Controller.Compress(System.String,System.String)">
            <summary>
            This method compresses the given directory and return the path of compressed file. 
            </summary>
            <param name="path">path of directory to compress</param>
            <param name="output">target path of compressed file</param>
            <returns>target path of compressed file</returns>
        </member>
        <member name="M:Adapters.Controller.CompressToTemp(System.String)">
            <summary>
            This method compresses the given directory and return the path of compressed file. 
            </summary>
            <param name="path">path of directory to compress</param>
            <returns>target path of compressed file (Temporary location)</returns>
        </member>
        <member name="M:Adapters.Controller.CheckOption(System.String)">
            <summary>
            To check if the given option is present.
            </summary>
        </member>
        <member name="M:Adapters.Controller.CheckIsMaster(ABB.Robotics.Internal.MastershipResource)">
            <summary>
            Check if Mastership is already held.
            </summary>
        </member>
        <member name="M:Adapters.Controller.CheckIsTpuMaster(ABB.Robotics.Internal.MastershipResource)">
            <summary>
            Check if Mastership is already held Local (TPU).
            </summary>
        </member>
        <member name="M:Adapters.Controller.CheckHasRmmp">
            <summary>
            Checks if the current user has RMMP.
            </summary>        
        </member>
        <member name="M:Adapters.Controller.CheckRestore(System.String,System.Int32,System.Int32)">
            <summary>
            Checks for possible mismatches and other problems with a backup.
            </summary>
            <param name="path">Path of directory.</param>
            <param name="includes">What to include from backup.</param>
            <param name="ignores">What errors to ignore.</param>
            <returns>True if restore will complete successfully.</returns>
        </member>
        <member name="M:Adapters.Controller.CreateQueue(System.String,System.Int16,System.Int16)">
            <summary>
            Creates a queue on the controller.
            </summary>
            <param name="name">The name.</param>
            <param name="queueSize">The size of the queue.</param>
            <param name="messageSize">The size of the message.</param>
            <returns>The queue id.</returns>
        </member>
        <member name="M:Adapters.Controller.DeleteQueue(System.Int16)">
            <summary>
            Deletes the queue by it's id.
            </summary>
            <param name="id">The queue id.</param>
        </member>
        <member name="M:Adapters.Controller.GetBackupInfo(System.String)">
            <summary>
            Gets the Backup version info for the specified Controller path.
            </summary>        
        </member>
        <member name="M:Adapters.Controller.GetDHCPStatus">
            <summary>
            Gets the current RobIPMethod is DHCP status.
            </summary>
        </member>
        <member name="M:Adapters.Controller.GetInstalledSystems">
            <summary>
            Gets all installed systems from the controller.
            </summary>
        </member>
        <member name="M:Adapters.Controller.GetNICInfo">
            <summary>
            Gets the public network settings.
            </summary>
        </member>
        <member name="M:Adapters.Controller.GetMaxMessageSize">
            <summary>
            Get max standard message size from controller.
            </summary>
        </member>
        <member name="M:Adapters.Controller.GetMaxPackageSize">
            <summary>
            Get the max package size that can be used from controller
            </summary>
        </member>
        <member name="M:Adapters.Controller.GetQueueId(System.String)">
            <summary>
            Gets the id for a queue from the name.
            </summary>
            <param name="name">The name.</param>
            <returns>The id or -1.</returns>
        </member>
        <member name="M:Adapters.Controller.GetQueueName(System.Int16)">
            <summary>
            Gets the name for a queue from the id.
            </summary>
            <param name="id">The id.</param>
            <returns>The name or null.</returns>
        </member>
        <member name="M:Adapters.Controller.GetSystemName">
            <summary>
            Gets the SystemName of the Controller.
            </summary>
        </member>
        <member name="M:Adapters.Controller.GetVariable(System.String)">
            <summary>
            Get controller environment variable value.
            </summary>
            <param name="name">string name</param>
            <returns>string</returns>
        </member>
        <member name="M:Adapters.Controller.GetName">
            <summary>
            Gets the name of the controller.
            </summary>
        </member>
        <member name="M:Adapters.Controller.GetSlotInformation">
            <summary>
            Gets a list of IPCSlots.
            </summary>
        </member>
        <member name="M:Adapters.Controller.RobRestart(RobotStudio.Services.RobApi.RobRestartMode)">
            <summary>
            Restart the controller with given Restart Mode
            </summary>
            <param name="mode">Restart Mode</param>
        </member>
        <member name="M:Adapters.Controller.Receive(System.Int32,System.Int16,System.Byte[]@,System.Int32@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int32@)">
            <summary>
            Receives a byte array from the ipc queue.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="id">The id.</param>
            <param name="buffer">The buffer.</param>
            <param name="size">The Size of buffer.</param>
            <param name="senderId">The sender id.</param>
            <param name="cmd">The command.</param>
            <param name="msgType">The message type.</param>
            <param name="userDef">The user defined value.</param>
            <param name="userData">The user defined data.</param>
        </member>
        <member name="M:Adapters.Controller.RobReceiveIpc(System.Int32,System.Int16,System.Byte[]@,System.Int32@,System.Int16@,System.Int16@,System.Int16@,System.Int16@,System.Int32@)">
            <summary>
            Receives a byte array from the ipc queue.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="id">The id.</param>
            <param name="buffer">The buffer.</param>
            <param name="length">The length of buffer.</param>
            <param name="senderId">The sender id.</param>
            <param name="cmd">The command.</param>
            <param name="msgType">The message type.</param>
            <param name="userDef">The user defined value.</param>
            <param name="userData">The user defined data.</param>
        </member>
        <member name="M:Adapters.Controller.Send(System.Int16,System.Int16,System.Byte[],System.Int16,System.Int16,System.Int16,System.Int32)">
            <summary>
            Sends a buffer to the ipc queue.
            </summary>
            <param name="id">The id.</param>
            <param name="destinationId">The destination id.</param>
            <param name="buffer">The buffer.</param>
            <param name="command">The command.</param>
            <param name="type">The Type of message.</param>
            <param name="userDef">The user defined value.</param>
            <param name="userData">The user defined data.</param>
        </member>
        <member name="M:Adapters.Controller.Send(System.Int16,System.Int16,System.Byte[],System.Int32,System.Int16,System.Int16,System.Int16,System.Int32)">
            <summary>
            Sends a buffer to the ipc queue.
            </summary>
            <param name="id">The id.</param>
            <param name="destinationId">The destination id.</param>
            <param name="buffer">The buffer.</param>
            <param name="length">Length of the buffer.</param>
            <param name="command">The command.</param>
            <param name="type">The Type of message.</param>
            <param name="userDef">The user defined value.</param>
            <param name="userData">The user defined data.</param>
        </member>
        <member name="M:Adapters.Controller.RobSendIpc(System.Int16,System.Int16,System.Byte[],System.Int32,System.Int16,System.Int16,System.Int16,System.Int32)">
            <summary>
            Sends a buffer to the ipc queue.
            </summary>
            <param name="id">The id.</param>
            <param name="did">The destination id.</param>
            <param name="buffer">The buffer.</param>
            <param name="length">Length of the buffer.</param>
            <param name="command">The command.</param>
            <param name="type">The Type of message.</param>
            <param name="userDef">The user defined value.</param>
            <param name="userData">The user defined data.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Adapters.Controller.ReleaseMastership(ABB.Robotics.Internal.MastershipResource)" -->
        <member name="M:Adapters.Controller.RequestMastership(ABB.Robotics.Internal.MastershipResource)">
            <summary>
            Request Mastership for the specified resource.
            </summary>
        </member>
        <member name="M:Adapters.Controller.EnsureMastership(ABB.Robotics.Internal.MastershipResource)">
            <summary>
            Ensure Mastership for the specified resource.
            </summary>
        </member>
        <member name="M:Adapters.Controller.Restart(System.Int32)">
            <summary>
            Restart the controller with given Restart Mode
            </summary>
            <param name="mode">Restart Mode</param>
        </member>
        <member name="M:Adapters.Controller.Restore(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>        
            Performs a Restore operation of a controller system.
            </summary>
            <param name="path">Path to the backup.</param>
            <param name="include">Defines what to restore from the backup.</param>
            <param name="ignore">Defines what mismatches between current system and backup to ignore.</param>
            <param name="removeBackup">Flag to indicate if the backup folder shall be removed.</param>
            <remarks>
            Requires mastership of Rapid and Configuration domains. 
            Requires UAS_RESTORE grant. 
            Requires Auto mode.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Adapters.Controller.CheckAvailability(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{ABB.Robotics.Internal.MastershipResource},System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:Adapters.Controller.GetState">
            <summary>
            Gets the current state of the controller.
            </summary>
            <returns>ControllerState</returns>
        </member>
        <member name="M:Adapters.Controller.SetState(ABB.Robotics.Controllers.ControllerState)">
            <summary>
            Sets the ControllerState of the Controller.
            </summary>        
        </member>
        <member name="M:Adapters.Controller.GetTime">
            <summary>
            This method returns System Time
            </summary>
            <returns>Returning System Time</returns>
        </member>
        <member name="M:Adapters.Controller.SetTime(System.DateTime)">
            <summary>
            Set the system time
            </summary>
            <param name="value">Time to Set</param>
        </member>
        <member name="M:Adapters.Controller.GetOperatingMode">
            <summary>
            Gets the Controller Operating Mode.
            </summary>
        </member>
        <member name="M:Adapters.Controller.InitRMMPRequest">
            <summary>
            Request Manual Mode Previliges to modify.
            </summary>
        </member>
        <member name="M:Adapters.Controller.IsBackupInProgress">
            <summary>
            Check if Backup process in progress
            </summary>
            <returns>boolean value</returns>
        </member>
        <member name="M:Adapters.Controller.PollRMMPRequest">
            <summary>
            Refresh a request made by RequestManualModePrivileges.
            </summary>
        </member>
        <member name="M:Adapters.Controller.StartBackup(System.String)">
            <summary>
            Initiate the Backup process
            </summary>
            <param name="path">location of to take backup</param>
        </member>
        <member name="M:Adapters.Controller.UnpackAutoConditions">
            <summary>
            Unpacks RobAutoCondition array from the event handler to ControllerAutoCondition list.
            </summary>        
        </member>
        <member name="M:Adapters.Controller.UnpackMastershipInfo(System.Int32,ABB.Robotics.Internal.MastershipResource)">
            <summary>
            Unpack the details from the event to MastershipInfo to return.
            </summary>        
        </member>
        <member name="M:Adapters.Controller.UnpackBackupEvent">
            <summary>
            Unpacks Backup event properties Finished and SequenceNo to BackupEventInfo.
            </summary>        
        </member>
        <member name="M:Adapters.Controller.GetStorageDevices">
            <summary>
            Gets storage devices for the controller.
            </summary>        
        </member>
        <member name="M:Adapters.Controller.Subscribe(Adapters.EventId,System.Object,System.EventHandler)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:Adapters.Controller.UnpackConnectionChanged">
            <summary>
            Return isConnected from eventhandler.
            </summary>
        </member>
        <member name="M:Adapters.Controller.UnpackStateChanged">
            <summary>
            Returns RobControllerState from StateChanged event handler.
            </summary>        
        </member>
        <member name="M:Adapters.Controller.Unsubscribe(System.EventHandler)">
            <summary>
            Unsubscribe the ConnectionStateChanged event handler.
            </summary>
        </member>
        <member name="P:Adapters.Controller.MastershipPolicy">
            <summary>
            Specifies how mastership should be handled by a GUI client
            </summary>
        </member>
        <member name="M:Adapters.Controller.SlotInfoFactory.AddToSlotInfoFactory(RobotStudio.Services.RobApi.RobIPCSlot)">
            <summary>
            Adds IpcSlotInfo to SlotInfoFactory by unpacking RobIPCSlot.
            </summary>
            <param name="itemRobIPCSlot"></param>
        </member>
        <member name="M:Adapters.ControllerAutoConditionFactory.AddControllerAutoConditionToFactory(RobotStudio.Services.RobApi.RobAutoCondition)">
            <summary>
            Adds RobAutoCondition to the ControllerAutoConditionFactory.
            </summary>        
        </member>
        <member name="M:Adapters.Data.Get">
            <summary>
            Gets the value of the RapidData for the specified url.
            </summary>
        </member>
        <member name="M:Adapters.Data.Set(System.String)">
            <summary>
            Sets the given value of the RapidData for the specified url.
            </summary>
        </member>
        <member name="M:Adapters.Data.Subscribe(ABB.Robotics.Url,System.Object,System.EventHandler,System.Boolean)">
            <summary>
            Subscribe to an event handler based upon the EventID. In this case only one SubscribeOnValueChange eventhandler.
            </summary>
        </member>
        <member name="M:Adapters.DeviceStream.#ctor(ABB.Robotics.Url,System.String,ABB.Robotics.Controllers.DeviceAccess,System.Int32)">
            <summary>
            Opens a stream with the specified name and access.
            </summary>
        </member>
        <member name="M:Adapters.DeviceStream.Close">
            <summary>
            Closes the stream object.
            </summary>
        </member>
        <member name="M:Adapters.DeviceStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream.
            </summary>       
        </member>
        <member name="M:Adapters.DeviceStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream.
            </summary>
        </member>
        <member name="M:Adapters.EventLog.Subscribe(Adapters.EventId,System.Object,System.EventHandler)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:Adapters.DirectoryContentFactory.AddDirectoryContentFactory(RobotStudio.Services.RobApi.RobFileInfo)">
            <summary>
            Add RobFileInfo to the list.
            </summary>
        </member>
        <member name="M:Adapters.FileBrowser.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the Robot Controller.
            </summary>
        </member>
        <member name="M:Adapters.FileBrowser.CopyLocalDirectory(System.String,System.String)">
            <summary>
            Copy Local Directory to Remote Controller
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Adapters.FileBrowser.CopyLocalFile(System.String,System.String)">
            <summary>
            Copies a file locally on the controller, from the source to the destination
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Adapters.FileBrowser.Download(System.String,System.String)">
            <summary>
            Gets a file from the Robot Controller and stores it on the local system.
            </summary>
        </member>
        <member name="M:Adapters.FileBrowser.DirectoryExists(System.String)">
            <summary>
            Verify that directory exists in the robot controller.
            </summary>
        </member>
        <member name="M:Adapters.FileBrowser.FileExists(System.String)">
            <summary>
            Verify that file exists in the robot controller.
            </summary>
        </member>
        <member name="M:Adapters.FileBrowser.ListDirectory(System.String,Adapters.FileListIncludes)">
            <summary>
            Lists all the files and directories in the specified path of the robot controller.
            </summary>
        </member>
        <member name="M:Adapters.FileBrowser.Move(System.String,System.String)">
            <summary>
            Renames a file or directory on the controller.
            </summary>
        </member>
        <member name="M:Adapters.FileBrowser.RemoveDirectoryW(System.String,System.Boolean)">
            <summary>
            Removes the directory from robot controller with specified path.        
            </summary>
        </member>
        <member name="M:Adapters.FileBrowser.Upload(System.String,System.String)">
            <summary>
            Stores a file from the local system to the Robot Controller.
            </summary>
        </member>
        <member name="M:Adapters.FileBrowser.GetEntry(System.String,System.Boolean)">
            <summary>
            Gets the ControllerFileEntry for the specified path.
            </summary>
        </member>
        <member name="M:Adapters.IOBus.GetState">
            <summary>
            Gets the IOBusStateInfo for a specified bus.
            </summary>
        </member>
        <member name="M:Adapters.IOBus.RobGetProperties(RobotStudio.Services.RobApi.RobIOBusLogicalState,RobotStudio.Services.RobApi.RobIOBusPhysicalState)">
            <summary>
            Get RobIOBusProperties for a specified IOBus.
            </summary>
        </member>
        <member name="M:Adapters.IOBus.TranslateState(RobotStudio.Services.RobApi.RobIOBusLogicalState,RobotStudio.Services.RobApi.RobIOBusPhysicalState,ABB.Robotics.Internal.IOBusLogState,ABB.Robotics.Internal.IOBusPhysState)">
            <summary>
            Translate state from RobIOBusLogicalState and RobIOBusPhysicalState to IOBusLogState and IOBusPhysState respectively.
            </summary>
        </member>
        <member name="M:Adapters.IOSignal.GetSignalType">
            <summary>
            Gets the IOSignalTypes for the specified signal.
            </summary>
        </member>
        <member name="M:Adapters.IOSignal.GetValue">
            <summary>
            Gets the value of the signal.
            </summary>
        </member>
        <member name="M:Adapters.IOSignal.GetDigitalValue">
            <summary>
            Gets the value of the group signal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adapters.IOSignal.SetValue(System.Single,System.Boolean,System.Boolean)">
            <summary>
            Sets the value of the digital signal to <b>0</b>.
            </summary>
            <param name="value">Value of the digital signal</param>
            <param name="digital">Flag if signal is Digital</param>
            <param name="inputAsPhysical">Flag if physical input-signals shall be used for the virtual controller.</param>
        </member>
        <member name="M:Adapters.IOSignal.SetDigitalValue(System.UInt32,System.Boolean)">
            <summary>
            Sets the value of the group signal
            </summary>
            <param name="value">value of the group signal</param>
            <param name="inputAsPhysical">Flag if physical input-signals shall be used for the virtual controller.</param>
        </member>
        <member name="M:Adapters.IOSignal.GetState">
            <summary>
            Gets the state info for the Signal.
            </summary>
        </member>
        <member name="M:Adapters.IOSignal.Pulse(System.Int32,System.Boolean)">
            <summary>
            Generates a pulse on the digital signal.
            </summary>
            <param name="duration">Duration of pulse</param>
            <param name="inputAsPhysical">Flag if physical input-signals shall be used for the virtual controller.</param>
        </member>
        <member name="M:Adapters.IOSignal.Invert(System.Boolean)">
            <summary>
            Inverts the value of the digital signal.
            </summary>
            <param name="inputAsPhysical">Flag if physical input-signals shall be used for the virtual controller.</param>
        </member>
        <member name="M:Adapters.IOSignal.UnpackState">
            <summary>
            Fills Adpater.IOSignalStateInfo with robIOSignalLogicalState and robIOSignalValue details for SignalChangedEventArgs.
            </summary>        
        </member>
        <member name="M:Adapters.IOSignal.InitSearchForName">
            <summary>
            Intializes the search properties RobIOSignalSearchProperties for SearchIOSignals.
            </summary>
        </member>
        <member name="M:Adapters.IOSignal.RobGetProperties(RobotStudio.Services.RobApi.RobIOSignalLogicalState@,RobotStudio.Services.RobApi.RobIOSignalValue@,RobotStudio.Services.RobApi.RobIOSignalValue@)">
            <summary>
            Gets the properties from MgROBAPI and assigns it to the function paramters.
            </summary>
        </member>
        <member name="M:Adapters.IOSignal.Subscribe(Adapters.EventId,System.Object,System.EventHandler,System.Boolean)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:Adapters.IOSignalNameFactory.AddToIOSignalNameFactory(RobotStudio.Services.RobApi.RobIOSignalObject)">
            <summary>
            Adds itemRobIOSignalObject Name to IOSignalNameFactory.
            </summary>
        </member>
        <member name="M:Adapters.IOSystem.SearchByCategory(System.String)">
            <summary>
            Gets all Signals by Category.
            </summary>       
        </member>
        <member name="M:Adapters.IOUnit.WriteInputData(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Write IO Input Data to the controller.
            </summary>
        </member>
        <member name="M:Adapters.IOUnit.GetState">
            <summary>
            Gets IOUnitStateInfo for the specified bus and Unit.
            </summary>
        </member>
        <member name="M:Adapters.IOUnit.RobGetProperties">
            <summary>
            Gets RobIOUnitProperties for the specified bus and Unit.
            </summary>        
        </member>
        <member name="M:Adapters.IOUnit.UnpackProperties(Adapters.EventId)">
            <summary>
            Unpacks to IOUnitStateInfo properties from IOUnitLogState and IOUnitPhysState.
            </summary>        
        </member>
        <member name="M:Adapters.IOUnit.ReadOutputData">
            <summary>
            Reads OutputData for the specified bus and unit.
            </summary> 
        </member>
        <member name="M:Adapters.IOUnit.ReadInputData">
            <summary>
            Reads InputData for the specified bus and unit.
            </summary>        
        </member>
        <member name="M:Adapters.IOUnit.Subscribe(Adapters.EventId,System.Object,System.EventHandler,System.Boolean)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:Adapters.MechUnit.GetCartesianValues(System.Int32)">
            <summary>
            Calculate cartesian position for the mechunit.
            </summary>
            The tool. The current tool is used if empty string (or null)
            The workobject. Used if coord is RobCoordSystem.Wobj, ignored for other values of coord.
            The current workobject is used if empty string (or null).
            <remarks>
            Get the current position for the given tool (TCP) in the given workobject expressed in the given coordinate system.
            Only IRB mechunits can return a cartesian position.
            </remarks>
        </member>
        <member name="M:Adapters.MechUnit.GetCartesianValues(System.String,System.String,System.Int32)">
            <summary>
            Calculate cartesian position for the mechunit.
            </summary>
            <param name="tool">The tool. The current tool is used if empty string (or null).</param>
            <param name="wobj">The workobject. Used if coord is RobCoordSystem.Wobj, ignored for other values of coord.
            The current workobject is used if empty string (or null).</param>
            <remarks>
            Get the current position for the given tool (TCP) in the given workobject expressed in the given coordinate system.
            Only IRB mechunits can return a cartesian position.
            </remarks>
        </member>
        <member name="M:Adapters.MechUnit.FineCalibrate(System.Int32)">
            <summary>
            Fine calibrate specified TCP mechanical unit and axis. 
            The current position of the axis will be the new calibration value.
            </summary>
            <param name="axis">Axis to calibrate</param>
        </member>
        <member name="M:Adapters.MechUnit.SetRevolutionCounter(System.Int32)">
            <summary>
            Set revolution counter on a specified TCP mechanical unit and axis.
            </summary>
            <param name="axis"></param>
        </member>
        <member name="M:Adapters.MechUnit.GetMechanicalUnitStatus">
            <summary>
            Gets MechanicalUnitStatus for the specified MechanicalUnit.
            </summary>
        </member>
        <member name="M:Adapters.MechUnit.GetSingleAxisStatus(System.Int32)">
            <summary>
            Gets SingleAxis MechanicalUnitStatus for the specified MechanicalUnit.
            </summary>
        </member>
        <member name="M:Adapters.MechUnit.MapMechanicalUnitStatus(RobotStudio.Services.RobApi.RobMechUnitStatus)">
            <summary>
            Gets the mapping the MechanicalUnitStatus for RobMechUnitStatus.
            </summary>
        </member>
        <member name="M:Adapters.Module.GetAttributes">
            <summary>
            Gets attributes of the module.
            </summary>
        </member>
        <member name="M:Adapters.MotionSystem.GetMechUnitsOld">
            <summary>
            Gets MechUnits for older version below RW 5.10.
            </summary>
        </member>
        <member name="M:Adapters.MotionSystem.Subscribe(Adapters.EventId,System.Object,System.EventHandler)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:Adapters.MechUnitFactory.AddMechUnitFactory(RobotStudio.Services.RobApi.RobMechUnitNameAndMode)">
            <summary>
            Adds RobMechUnitNameAndMode to MechUnitFactory.
            </summary>
        </member>
        <member name="M:Adapters.Netscan.GetInfo(System.Int32)">
            <summary>
            Gets ControllerInfo for the specified NetScan ID.
            </summary>
        </member>
        <member name="M:Adapters.Netscan.GetLevel(System.Int32)">
            <summary>
            Get ControllerInfo for specified NetScan ID and return Level.
            </summary>
        </member>
        <member name="M:Adapters.Netscan.GetType(System.Int32)">
            <summary>
            Gets ControllerType for the specified NetScan ID.
            </summary>
        </member>
        <member name="M:Adapters.Netscan.GetId(ABB.Robotics.Url)">
            <summary>
            Gets NetScan ID for the specified url.
            </summary>
        </member>
        <member name="M:Adapters.Netscan.Scan">
            <summary>
            To scan the controllers available in the network.
            </summary>
            <returns>The list of ControllerInfo object</returns>
        </member>
        <member name="M:Adapters.Netscan.Unpack">
            <summary>
            Unpack event args into NetscanChangedInfo.
            </summary>       
        </member>
        <member name="M:Adapters.Netscan.Subscribe(Adapters.EventId,System.Object,System.EventHandler)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>       
        </member>
        <member name="M:Adapters.Netscan.Subscribe(Adapters.EventId,System.Object,System.EventHandler,System.Int32)">
            <summary>
            Subscribe to an event handler based upon the EventID for the specified priority.
            </summary>
        </member>
        <member name="M:Adapters.Netscan.Unsubscribe(System.Object)">
            <summary>
            Unsubscribe event handler for the specified token.
            </summary>
        </member>
        <member name="M:Adapters.ObjectBrowser.GetChildren">
            <summary>
            Get the Children of the current object (as per the path in url)
            </summary>
        </member>
        <member name="M:Adapters.RobObjectInfoFactory.AddRobObjectInfo(RobotStudio.Services.RobApi.RobObjectInfo)">
            <summary>
            Add RobObjectInfo to the list
            </summary>
        </member>
        <member name="M:Adapters.StorageDeviceInfoFactory.AddToStorageDeviceInfoToFactory(RobotStudio.Services.RobApi.RobStorageDevice)">
            <summary>
            Adds the RobStorageDevice as StorageDeviceInfo item to the StorageDeviceInfo factory list.
            </summary>        
        </member>
        <member name="M:Adapters.SymbolFactory.AddRapidSymbolDataFactory(RobotStudio.Services.RobApi.RobSymbol)">
            <summary>
            Add RapidSymbolData to the list.
            </summary>
        </member>
        <member name="M:Adapters.SymbolFactory.Create(RobotStudio.Services.RobApi.RobSymbol)">
            <summary>
            Create RapidSymbolData object from RobSymbol.
            </summary>
        </member>
        <member name="M:Adapters.SymbolFactory.Create(RobotStudio.Services.RobApi.RobSymbol,ABB.Robotics.Url)">
            <summary>
            Create RapidSymbolData from MgROBAPI RobSymbol object.
            </summary>        
        </member>
        <member name="M:Adapters.Task.DeleteModule(System.String)">
            <summary>
            Deletes the specified module from the controller.
            </summary>
        </member>
        <member name="M:Adapters.Task.GetExecutionCycle">
            <summary>
            Gets the execution cycle of a task.
            </summary>        
        </member>
        <member name="M:Adapters.Task.GetExecutionType">
            <summary>
            Returns Execution Type as an integer for the specified task.
            </summary>
        </member>
        <member name="M:Adapters.Task.GetMotionPointer">
            <summary>
            Gets the current position of the motion pointer.
            </summary>
            <returns>Program Counter Position object</returns>
        </member>
        <member name="M:Adapters.Task.GetProgramPointer">
            <summary>
            Gets the current position of the program pointer.
            </summary>
            <returns>Program Counter Position object</returns>
        </member>
        <member name="M:Adapters.Task.LoadModule(System.String,Adapters.TaskLoadModes)">
            <summary>
            Calls RobLoadModule with equivalent RobRapidLoadMode for the specified TaskLoadModes.
            </summary>
        </member>
        <member name="M:Adapters.Task.LoadProgram(System.String,Adapters.TaskLoadModes)">
            <summary>
            Calls RobLoadProgram with equivalent RobRapidLoadMode for the specified TaskLoadModes.
            </summary>
        </member>
        <member name="M:Adapters.Task.ResestProgramPointer">
            <summary>
            Resets the program pointer of this task to the main entry point.
            </summary>
            <remarks>
            Requires mastership of RAPID domain. Requires the "ExecuteRapid"
            grant. Requires Auto mode.
            </remarks>             
        </member>
        <member name="M:Adapters.Task.SaveModule(System.String,System.String)">
            <summary>
            Save a module loaded in the task to file.
            </summary>
        </member>
        <member name="M:Adapters.Task.SaveProgram(System.String)">
            <summary>
            Saves the current RAPID program.
            </summary>
        </member>
        <member name="M:Adapters.Task.SetExecutionCycle(System.Int32)">
            <summary>
            Sets the cycleId as execution cycles.
            </summary>
            <param name="cycle"></param>
        </member>
        <member name="M:Adapters.Task.SetPCPToRoutineByUrl(System.String)">
            <summary>
            Set the position of the program pointer
            </summary>
            <param name="routineUrl">String Routine URL</param>
        </member>
        <member name="M:Adapters.Task.SetToRoutineAtUserLevel(System.String)">
            <summary>
            Set User PP to selected routine 
            </summary>
            <param name="routineName">Name of the selected routine</param>
        </member>
        <member name="M:Adapters.Task.AbortExecutionLevel">
            <summary>
            Clears and removes the current execution level and the next execution level in the hierarchy is restored
            </summary>
        </member>
        <member name="M:Adapters.Task.Start(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <param name="regain">Regain mode.</param>
            <param name="execution">Execution mode.</param>
            <param name="cycle">The number of cycles to execute the program.</param>
            <param name="pre">Check to perform prior to start.</param>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks> 
        </member>
        <member name="M:Adapters.Task.Stop(System.Int32)">
            <summary>
            Stops Task execution according to the specified mode.
            </summary>
        </member>
        <member name="M:Adapters.Task.SearchForSymbols(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,ABB.Robotics.Url,System.String,System.String)">
            <summary>
            Search symbols for the specified details and RapidSymbolSearchProperties.
            </summary>
        </member>
        <member name="M:Adapters.Task.SearchForSymbols(ABB.Robotics.Controllers.RapidDomain.SymbolTypes,ABB.Robotics.Url,System.String)">
            <summary>
            Search symbols for the specified details.
            </summary>
        </member>
        <member name="M:Adapters.Task.UnloadProgram">
            <summary>
            Deletes the RAPID program of the task from the controller program memory.
            </summary>
        </member>
        <member name="M:Adapters.Task.UnpackPCP(Adapters.EventId)">
            <summary>
            Fills Adpater.PCP with ROBPCP details for ProgramPositionEventArgs.
            </summary>
        </member>
        <member name="M:Adapters.Task.GetTaskType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Adapters.Task.RobGetExecutionType">
            <summary>
            Gets the Execution Type for the specified task.
            </summary>        
        </member>
        <member name="M:Adapters.Task.RobLoadModule(System.String,RobotStudio.Services.RobApi.RobRapidLoadMode)">
            <summary>
            Loads a RAPID module to the task in the robot controller.
            </summary>
        </member>
        <member name="M:Adapters.Task.RobLoadProgram(System.Boolean,System.String,RobotStudio.Services.RobApi.RobRapidLoadMode)">
            <summary>
            Loads a RAPID program to the controller program memory.
            </summary>
        </member>
        <member name="M:Adapters.Task.GetJointTarget">
            <summary>
            Gets the JointTarget for the specified task as in url.
            </summary>        
        </member>
        <member name="M:Adapters.Task.GetRobTarget(System.String,System.String,System.Boolean)">
            <summary>
            Gets RobTarget for the specified task, for the tool and workobject.
            </summary>        
        </member>
        <member name="M:Adapters.Task.GetExecutionStatus">
            <summary>
            Gets the execution status of the specified task.
            </summary> 
        </member>
        <member name="M:Adapters.Task.Subscribe(Adapters.EventId,System.Object,System.EventHandler)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:Adapters.Uas.GetGrants">
            <summary>
            Get the grants of the current user.
            </summary>
            <returns>XmlTextReader formatted list of grants</returns>
        </member>
        <member name="M:Adapters.Uas.GrantListInXML(System.String[])">
            <summary>
            This method will return XmlTextReader formatted list of Grants
            </summary>
            <param name="grants">String array of Grants</param>
            <returns>XmlTextReader list of Grants</returns>
        </member>
        <member name="M:Adapters.Uas.GetUasConfig">
            <summary>
            Get resource definitions for all available grants.
            </summary>
            <returns>In XmlTextReader format returns the UAS config details</returns>
        </member>
        <member name="M:Adapters.Uas.Logoff">
            <summary>
            Logoff current user logged in from the controller.
            </summary>
        </member>
        <member name="M:Adapters.Uas.Logon(System.Int32,System.Boolean)">
            <summary>
            Logon to the controller.
            </summary>        
        </member>
        <member name="M:Adapters.Uas.Logon(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Logon to the controller with the specified userName and password.
            </summary>        
        </member>
        <member name="M:Adapters.Uas.Register(System.String,System.String,System.String)">
            <summary>
            Register is not required in MgROBAPI. Hence, returning default 0.
            </summary>   
        </member>
        <member name="M:Adapters.Uas.Unregister">
            <summary>
            Register/Unregister is not required in MgROBAPI.
            </summary> 
        </member>
        <member name="M:Adapters.Uas.Init">
            <summary>
            static method to Initiate set_TlsIndex method
            </summary>
        </member>
        <member name="M:Adapters.UasTls.SetThreadUserId(System.Int32)">
            <summary>
            Register/Unregister is not required in MgROBAPI. 
            </summary> 
        </member>
        <member name="M:Adapters.UasTls.GetThreadUserId">
            <summary>
            Register/Unregister is not required in MgROBAPI. Hence, returning default 0.
            </summary> 
        </member>
        <member name="M:Adapters.VCFactory.Dispose">
            <summary>
            Dispose is not required. As no unmanaged resources to release but, for the backward compatibility it cannot be removed.
            </summary>
        </member>
        <member name="M:Adapters.VCFactory.Start(System.String,System.Int32)">
            <summary>
            Starts a new Virtual Controller of the specified path and for the specified startMode.
            </summary>
        </member>
        <member name="M:Adapters.VCFactory.Stop(System.Guid)">
            <summary>
            Stops the Virtual Controller for the specified Guid.
            </summary>
        </member>
        <member name="M:Adapters.VCFactory.ReleaseOwnership(System.Guid)">
            <summary>
            ReleaseOwnership for the Virtual Controller for the specified Guid.
            </summary>
        </member>
        <member name="M:Adapters.VCFactory.RequestOwnership(System.Guid)">
            <summary>
            RequestOwnership for the Virtual Controller for the specified Guid.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Argument.CheckEnum(System.Int32,ABB.Robotics.Controllers.EnumRange)">
            <summary>
            Checks if the enum value is in range.
            </summary>
            <param name="value">Value to check.</param>
            <param name="range">Allowed range for enum.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Argument.CheckEnum(System.Int32,ABB.Robotics.Controllers.EnumRange,System.String)">
            <summary>
            Checks if the enum value is in range.
            </summary>
            <param name="value">Value to check.</param>
            <param name="range">Allowed range for enum.</param>
            <param name="name">Argument name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Argument.CheckString(System.String)">
            <summary>
            checks the provided string argument and throws an exception
            if it is null och empty
            </summary>
            <param name="arg">argument to check</param>		
        </member>
        <member name="M:ABB.Robotics.Controllers.Argument.CheckString(System.String,System.String)">
            <summary>
            checks the provided string argument and throws an exception
            if it is null och empty
            </summary>
            <param name="arg">argument to check</param>
            <param name="name">name of parameter</param>    
        </member>
        <member name="M:ABB.Robotics.Controllers.Argument.CheckString(System.String,System.String,ABB.Robotics.Controllers.ArgumentStringChecks)">
            <summary>
            checks the provided string argument and throws an exception
            if it is null och empty
            </summary>
            <param name="arg">Argument to check.</param>
            <param name="name">Name of parameter.</param>   
            <param name="checks">What checks to perform on the string.</param> 
        </member>
        <member name="M:ABB.Robotics.Controllers.Argument.CheckString(System.String,System.String,System.String)">
            <summary>
            Checks the provided string argument and throws an exception
            if it is null och empty.
            </summary>
            <param name="arg">Argument to check.</param>
            <param name="name">Name of parameter.</param>
            <param name="message">Exception message.</param>		
        </member>
        <member name="M:ABB.Robotics.Controllers.Argument.CheckString(System.String,System.String,System.String,ABB.Robotics.Controllers.ArgumentStringChecks)">
            <summary>
            checks the provided string argument and throws an exception
            if it is null och empty
            </summary>
            <param name="arg">argument to check</param>
            <param name="name">name of parameter</param>
            <param name="message">exception message</param>
            <param name="checks">Checks to perform on string</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Backup">
            <summary>
            Contains information about a backup on the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Backup.#ctor(System.String,System.Xml.XmlTextReader,System.Guid)">
            <summary>
            Initiates a new Backup instance.
            </summary>
            <param name="name">Name of backup.</param>
            <param name="reader">Reader with information.</param>
            <param name="id">System id of system.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Backup.SystemId">
            <summary>
            Gets the system id of the backup.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.BackupEventArgs">
            <summary>
            Event data from a restore event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerEventArgs">
            <summary>
            Base class of all event args from the controller since
            they always contain a timestamp of the event.
            </summary>  
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.ControllerEventArgs"/> class.
            </summary>    
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerEventArgs.Time">
            <summary>
            Gets the time when event occurs
            </summary>
            <value> Timestamp</value>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupEventArgs.#ctor">
            <summary>
            Creates a backup event args object.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupEventArgs.Unpack(Adapters.Controller)">
            <summary>
            Unpacks the BackupEventInfo to BackupEventArgs properties.
            </summary>      
        </member>
        <member name="P:ABB.Robotics.Controllers.BackupEventArgs.EventSequenceNumber">
            <summary>
            Gets the event log sequence number.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.BackupEventArgs.Succeeded">
            <summary>
            Gets a flag that indicates if the backup succeeded or not.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.BackupException">
            <summary>
            This exception is thrown whenever a backup fails.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupException.#ctor">
            <summary>
            Creates a new Backup exception object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupException.#ctor(System.String)">
            <summary>
            Creates a new Backup exception object.
            </summary>
            <param name="message">Message for object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new Backup exception object.
            </summary>
            <param name="innerException">Inner exception.</param>		
            <param name="message">Message for object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.BackupManager">
            <summary>
            This class handles backup / restore operations.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.SDKControllerBoundBase">
            <summary>
            Base class for public classes in the api that
            needs a connection to the contorller. Not for
            public use.
            </summary>
            <exclude />
        </member>
        <member name="T:ABB.Robotics.Controllers.SDKBase">
            <summary>
            This is the base class of all public classes in the api.
            </summary>
            <exclude />
        </member>
        <member name="M:ABB.Robotics.Controllers.SDKBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.SDKBase"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.SDKBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.SDKBase"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.SDKBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.SDKBase.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if set to <c>true</c> [disposing].</param>
        </member>
        <member name="F:ABB.Robotics.Controllers.SDKControllerBoundBase._controller">
            <summary>
            Internal, not for public use.
            </summary>	
        </member>
        <member name="M:ABB.Robotics.Controllers.SDKControllerBoundBase.#ctor(ABB.Robotics.Controllers.Controller,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.SDKControllerBoundBase"/> class.
            </summary>
            <param name="controller">The controller.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.SDKControllerBoundBase.#ctor(ABB.Robotics.Controllers.Controller)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.SDKControllerBoundBase"/> class.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.SDKControllerBoundBase.CurrentContext">
            <summary>
            Context of internal controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.SDKControllerBoundBase.EventServer">
            <summary>
            Gets the internal events server object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.SDKControllerBoundBase.InternalController">
            <summary>
            Accessor for controller object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.SDKControllerBoundBase.Url">
            <summary>
            Gets the url of the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.#ctor(ABB.Robotics.Controllers.Controller)">
            <summary>
            Creates a backup manager object for the supplied 
            controller instance.
            </summary>
            <param name="controller">Controller to create a backup manager for.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:ABB.Robotics.Controllers.BackupManager"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.Backup">
            <summary>
            Starts a backup operation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.BeginBackup(System.AsyncCallback,System.Object)">
            <summary>
            Starts an async backup operation.
            </summary>
            <param name="callback">Callback operation for completion notification</param>
            <param name="state">Operation state for user.</param>
            <returns>Async result.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.EndBackup(System.IAsyncResult)">
            <summary>
            Completes the backup operation.
            </summary>
            <param name="result">Result from begin backup operation.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.ClearBackupDirectory">
            <summary>
            Deletes all backups stored in the /Backup directory of the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.GetBackups">
            <summary>
            Returns all available backups in the /Backup directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.GetBackupDirectory(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the backup directory from a controller object.
            </summary>
            <param name="controller">Controller to get backup directory path from.</param>
            <returns>The path to the backup directory for the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.Restore">
            <summary>
            Starts a restore operation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.Restore(System.String)">
            <summary>
            Starts a restore operation from the local name.
            </summary>
            <param name="localName">LocalName to start restore from.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.Restore(System.String,System.String)">
            <summary>
            Starts a restore operation from the dir and name.
            </summary>
            <param name="localDir">Directory containing the file.</param>
            <param name="localName">Filename to use during restore.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.Restore(System.IO.DirectoryInfo,System.String)">
            <summary>
            Starts a restore operation from the dir and name.
            </summary>
            <param name="localDir">Directory to start from.</param>
            <param name="name">Name of file.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.Restore(System.IO.FileInfo)">
            <summary>
            Starts a restore operation with a the specified file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.
            </summary>
            <param name="disposing">if set to <c>true</c> [disposing].</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.BackupManager.ListBackupDirectory">
            <summary>
            Lists the content of the backup directory
            of the controller.
            </summary>
            <returns>All content of the backup directory.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.BackupManager.BackupDirectory">
            <summary>
            Gets the path to the backup directory of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.BackupManager.DefaultExtension">
            <summary>
            Gets the default extension of a backup file.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.BackupManager.IgnoredMismatches">
            <summary>
            Gets/Sets the ignore flag for restores.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.BackupManager.Includes">
            <summary>
            Controls what data that shall be included during the restore operation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.BackupManager.InProgress">
            <summary>
            Flag that indicates if a backup operation is in progress or not.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.BackupManager.LocalDirectory">
            <summary>
            Gets/Sets the local directory where the backup will be downloaded
            or uploaded from. The default value if the current directory. The directory
            must exist.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.BackupManager.LocalName">
            <summary>
            Gets/Sets the local name.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.BackupManager.RemoveBackupDirectory">
            <summary>
            Gets/Sets a value to indicate if the backup directory shall
            be removed from the controller after the operation has completed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.BackupManager.TransferBackup">
            <summary>
            Gets/Sets a flag to indicate if the backup shall be transfered to/from
            the controller prior/after the restore/backup operation. The file to transfer
            to/from is indicated by the LocalDirectory + LocalName properties.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.BackupManager.ExecuteCallback">
            <summary>
            Callback used internally.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RestoreIncludes">
            <summary>
            Enum to control what to include from the backup during a restore operation.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RestoreIncludes.None">
            <summary>
            Nothing, not a valid value but available as named default value.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RestoreIncludes.Configuration">
            <summary>
            Include configuration database.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RestoreIncludes.Modules">
            <summary>
            Invclude Rapid modules.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RestoreIncludes.All">
            <summary>
            Include everything.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RestoreIgnores">
            <summary>
            Enum to control what kind of mismatch errors that can be ignored during 
            a restore operations.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RestoreIgnores.None">
            <summary>
            Don't ignore any errors.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RestoreIgnores.SystemId">
            <summary>
            Ignore system id.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RestoreIgnores.TemplateId">
            <summary>
            Ignore template id.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RestoreIgnores.All">
            <summary>
            Ignore all errors.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.CapiDebug">
            <summary>
            Summary description for Common.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.CapiDebug.TraceException(System.Exception,System.String)">
            <summary>
            Traces an exception to any attached Trace listener through Trace.Write/Trace.WriteLine.
            The maximum depth of InnerExceptions are set to 9.    
            </summary>
            <param name="ex">Exception to trace.</param>
            <param name="category">Category of trace.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.CapiConfig">
            <summary>
            This class abstracts the configuration into an 
            object from the section stored in the config file.
            See ConfigurationHandler for a description of how
            to update this file and ConfigurationHandler when
            a new section is added to the capi section of the
            configuration file.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.CapiConfig.Instance">
            <summary>
            The single instance accessor, this is a shortcut to 
            the ConfigrationSettings.GetConfig( ... ) method.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.DataAccessObject">
            <summary>
            Base class for all data access objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.DAL.DataAccessObject.Url">
            <summary>
            Gets the url for this object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.LoadMode">
            <summary>
            Controls how a configuration file is loaded into the system.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ConfigurationDomain.LoadMode.Add">
            <summary>
            Adds all instances to the database. Any name conflicts 
            will cause the entire load to fail.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ConfigurationDomain.LoadMode.Replace">
            <summary>
            Adds all instances to the database, if a name conflict is
            encountered the value will be replaced.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ConfigurationDomain.LoadMode.ResetAndAdd">
            <summary>
            Resets the domain then adds the content of the configuration file.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationHandler">
            <summary>
            this class handles the internal configuration 
            of the controller api. This class must be public
            with a default ctor to enable reflection creation
            from the runtime when the configuration is requested.
            
            Todo when adding a new section:
            	- Create a new parser method with signature void Method();
            	- Implement the parser with a simple check for the section
            		and a trace if the section is missing.
            	- Add trace statements to TraceConfiguration().
            	- Create default values on the CapiConfig class to keep 
            		the api less sensitive to bad config files.
            	- Register the parser _sectionParsers array to enable execution.
            	
            </summary>
            <exclude />
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.ConfigurationHandler"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            creates the configuration object
            </summary>
            <param name="parent">parent object</param>
            <param name="configContext">context of current configuration</param>
            <param name="section">section in config file</param>
            <returns>the configuration object</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.Attribute">
            <summary>
            Contains description of the Attribute for Configuration Domain.
            This cannot be used to read/write the value of attribute.
            In order to read and write attribute value use the GetAttribute() and SetAttribute() methods of Instance class respectively.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Attribute.Accept(ABB.Robotics.Controllers.ConfigurationDomain.IMetadataVisitor)">
            <summary>
            Accepts a visitor object.
            </summary>
            <param name="visitor">Visitor object.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Attribute.InitialValue">
            <summary>
            Gets the initial value of the attribute.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Attribute.Mandatory">
            <summary>
            Use this flag to determine if the attribute is mandatory or not.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Attribute.MaxValue">
            <summary>
            Gets the maximum value of the attribute.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Attribute.MinValue">
            <summary>
            Gets the minimum value of the attribute.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Attribute.Size">
            <summary>
            Gets the size of the attribute. 1 is a single value, all others are arrays.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Attribute.Type">
            <summary>
            Gets the parent type of this attribute.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Attribute.NativeType">
            <summary>
            Gets the native type of the attribute.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Attribute.TypeCode">
            <summary>
            Gets the TypeCode of the attribute.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Attribute.Unit">
            <summary>
            Gets the unit of the attribute.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.AttributeCollection">
            <summary>
            Summary description for AttributeCollection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.AttributeCollection.Add(ABB.Robotics.Controllers.ConfigurationDomain.Attribute)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The inserted index.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.AttributeCollection.IndexOf(ABB.Robotics.Controllers.ConfigurationDomain.Attribute)">
            <summary>
            Gets the index of the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The index, otherwise -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.AttributeCollection.IndexOf(System.String)">
            <summary>
            Returns the index of the name.
            </summary>
            <param name="name">The name.</param>
            <returns>Index of the name, otherwise -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.AttributeCollection.Insert(System.Int32,ABB.Robotics.Controllers.ConfigurationDomain.Attribute)">
            <summary>
            Inserts a value at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.AttributeCollection.Remove(ABB.Robotics.Controllers.ConfigurationDomain.Attribute)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.AttributeCollection.Contains(ABB.Robotics.Controllers.ConfigurationDomain.Attribute)">
            <summary>
            Determines if the collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if collection contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.AttributeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.Controllers.ConfigurationDomain.Attribute"/> at the specified index.
            </summary>
            <value>Value to set.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.AttributeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.Controllers.ConfigurationDomain.Attribute"/> with the specified name.
            </summary>
            <value>The Value.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.Domain">
            <summary>
            Main interface to the configuration domain. Requires special license.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Domain.Accept(ABB.Robotics.Controllers.ConfigurationDomain.IMetadataVisitor)">
            <summary>
            Accepts a visitor object.
            </summary>
            <param name="visitor">Visitor object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Domain.Reset">
            <summary>
            Resets the domain to its initial state. This removes
            any externally created instances.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Domain.Save(System.String)">
            <summary>
            Saves database configuration domain to a specified file.
            </summary>
            <param name="destFile">Path of the destination file.</param>
            <returns></returns>
            <remarks>
            The method overwrites the specified file if it exists.
            Requires UAS grant UAS_BACKUP.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Domain.Item(System.String)">
            <summary>
            Gets the type object with the specified name.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Domain.Types">
            <summary>
            Gets all types in the domain.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.DomainCollection">
            <summary>
            A collection of CfgDomain objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.DomainCollection.Add(ABB.Robotics.Controllers.ConfigurationDomain.Domain)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.DomainCollection.IndexOf(ABB.Robotics.Controllers.ConfigurationDomain.Domain)">
            <summary>
            Get the index of the domain.
            </summary>
            <param name="value">The value.</param>
            <returns>Index of the domain, otherwise -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.DomainCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the domain with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The index of the domain; otherwise -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.DomainCollection.Insert(System.Int32,ABB.Robotics.Controllers.ConfigurationDomain.Domain)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.DomainCollection.Remove(ABB.Robotics.Controllers.ConfigurationDomain.Domain)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.DomainCollection.Contains(ABB.Robotics.Controllers.ConfigurationDomain.Domain)">
            <summary>
            Determines whether the collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if value is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.DomainCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.Controllers.ConfigurationDomain.Domain"/> at the specified index.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.DomainCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.Controllers.ConfigurationDomain.Domain"/> with the specified name.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.Instance">
            <summary>
            An instance of a specific Type. This object is a disconnected set of data from the configuration database.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Instance.Delete">
            <summary>
            Deletes the current object from the database.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Instance.GetAttribute(System.String)">
            <summary>
            Returns the value of the attribute.
            </summary>
            <param name="name">Name of attribute to get value for.</param>
            <returns>The value of the attribute.</returns>
            <example>This example shows how to get the value of the attribute for an instance.
            <note type="implementnotes">
            <font color="black">
            <b>Following are the namespaces and initializations to be added:</b><br></br>
            using ABB.Robotics;<br></br>
            using ABB.Robotics.Controllers;<br></br>
            using ABB.Robotics.Controllers.ConfigurationDomain;<br></br>
            <br></br>
            // Create an instance to connect to your controller.<br></br> 
            Controller _ctrl = new Controller("/10.140.60.29"); <br></br>       
            ConfigurationDatabase _database = _ctrl.Configuration;<br></br>
            Instance objInstance;<br></br>
            </font>
            </note>
            <code title="C#" lang="C#.Net">
            <code source="..\..\Tests\Sdk.Test\AutoTest\ConfigurationT\ConfigurationTest.cs" region="Ref_Manual_GetSetInstanceAttribute" />
            </code>        
            </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Instance.GetAttribute(System.String,System.Int32)">
            <summary>
            Returns the value of the attribute.
            </summary>
            <param name="name">Name of attribute to fetch.</param>
            <param name="index">Index of attribute, 1-based.</param>
            <returns>The value of the attribute.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Instance.SetAttribute(System.String,System.Object)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="name">Name of attribute to set.</param>
            <param name="value">New value of attribute.</param>
            <example>This example shows how to set the value of the attribute for an instance.
            <note type="implementnotes">
            <font color="black">
            <b>Following are the namespaces and initializations to be added:</b><br></br>
            using ABB.Robotics;<br></br>
            using ABB.Robotics.Controllers;<br></br>
            using ABB.Robotics.Controllers.ConfigurationDomain;<br></br>
            <br></br>
            // Create an instance to connect to your controller.<br></br> 
            Controller _ctrl = new Controller("/10.140.60.29"); <br></br>       
            ConfigurationDatabase _database = _ctrl.Configuration;<br></br>
            Instance objInstance;<br></br>
            </font>
            </note>
            <code title="C#" lang="C#.Net">
            <code source="..\..\Tests\Sdk.Test\AutoTest\ConfigurationT\ConfigurationTest.cs" region="Ref_Manual_GetSetInstanceAttribute" />
            </code>        
            </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Instance.SetAttribute(System.String,System.Object,System.Int32)">
            <summary>
            Sets the value of the attribute.
            </summary>
            <param name="name">Name of attribute to set.</param>
            <param name="value">New value of attribute.</param>
            <param name="index">Index of attribute, 1-based.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Instance.Item(ABB.Robotics.Controllers.ConfigurationDomain.Attribute)">
            <summary>
            Gets/Sets the value of the attribute.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Instance.Item(System.String)">
            <summary>
            Gets/Sets the value of the named attribute.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Instance.EnableLocalCheck">
            <summary>
            Gets/Sets a flag to control wheter the limits and readonly flag are controlled
            locally and prior to the SetCall against the controller. Default ít is true.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Instance.IsReadOnly">
            <summary>
            Flag that signals that the object is readonly or not.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Instance.Type">
            <summary>
            Gets the type of the object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Instance.Id">
            <summary>
            Gets the instance id.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.InstanceCollection">
            <summary>
            A collection of configuration Instance objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.InstanceCollection.#ctor">
            <summary>
            Initiates a new collection of instances.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.InstanceCollection.Add(ABB.Robotics.Controllers.ConfigurationDomain.Instance)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The index of the Value.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.InstanceCollection.IndexOf(ABB.Robotics.Controllers.ConfigurationDomain.Instance)">
            <summary>
            Gets the index of the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The index, otherwise -1;</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.InstanceCollection.Insert(System.Int32,ABB.Robotics.Controllers.ConfigurationDomain.Instance)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.InstanceCollection.Remove(ABB.Robotics.Controllers.ConfigurationDomain.Instance)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.InstanceCollection.Contains(ABB.Robotics.Controllers.ConfigurationDomain.Instance)">
            <summary>
            Determines whether the collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if collection contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.InstanceCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.Controllers.ConfigurationDomain.Instance"/> at the specified index.
            </summary>
            <value>The object at the specfied index.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.Type">
            <summary>
            This class contains abstract for a configuration type.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Type.Accept(ABB.Robotics.Controllers.ConfigurationDomain.IMetadataVisitor)">
            <summary>
            Accepts a visitor object.
            </summary>
            <param name="visitor">Visitor object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Type.Create(System.String)">
            <summary>
            Creates an object with the specified name.
            </summary>
            <param name="name">Name of instance.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Type.GetObjects">
            <summary>
            Returns an array of all available instances. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.ConfigurationDomain.Type.GetInstances"/> instead.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Type.GetObject(System.String)">
            <summary>
            Gets the named instance. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.ConfigurationDomain.Type.GetInstance(System.String)"/> instead.
            </summary>
            <param name="name">Name of instance.</param>
            <returns>A Cfg object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Type.GetInstances">
            <summary>
            Returns the read only copy of instances.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.Type.GetInstance(System.String)">
            <summary>
            Returns the read only copy of named instance.
            </summary>
            <param name="name">Name of instance.</param>
            <returns>A Cfg object.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Type.Item(System.String)">
            <summary>
            Gets a named instance of this type.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Type.Attributes">
            <summary>
            Gets the collection of attributes for this type.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.Type.Domain">
            <summary>
            Gets the parent domain.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.TypeCollection">
            <summary>
            A collection of configuration Type objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.TypeCollection.Add(ABB.Robotics.Controllers.ConfigurationDomain.Type)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The value to add.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.TypeCollection.IndexOf(ABB.Robotics.Controllers.ConfigurationDomain.Type)">
            <summary>
            Gets the index of the specifed value.
            </summary>
            <param name="value">The value.</param>
            <returns>The index otherwise -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.TypeCollection.IndexOf(System.String)">
            <summary>
            The index of the name.
            </summary>
            <param name="name">The name.</param>
            <returns>The index otherwise -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.TypeCollection.Insert(System.Int32,ABB.Robotics.Controllers.ConfigurationDomain.Type)">
            <summary>
            Inserts the value at specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.TypeCollection.Remove(ABB.Robotics.Controllers.ConfigurationDomain.Type)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.TypeCollection.Contains(ABB.Robotics.Controllers.ConfigurationDomain.Type)">
            <summary>
            Determines whether the collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the collection contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.TypeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.Controllers.ConfigurationDomain.Type"/> at the specified index.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.ValueComparer">
            <summary>
            Used to compare a cfg attribute value to it's configured limits.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.ValueComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects. This method is special for the internal workings
            of a CfgObject. The x parameter must always be the value and the right
            parameter must always be the limit.
            Instead of this function using CompareObjects.
            </summary>
            <param name="x">Value.</param>
            <param name="y">Limit.</param>
            <returns>See comparer in MSDN.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.ValueComparer.CompareObjects(ABB.Robotics.Controllers.ConfigurationDomain.Attribute,System.Object,System.Object)">
            <summary>
            Compares two objects. Used specifically for attribute object. The x parameter must always be the value and the right
            parameter must always be the limit.
            </summary>
            <param name="objAttribute">Attribute to compare.</param>
            <param name="x">Value of attribute to be set.</param>
            <param name="y">Min/Max value to compare.</param>
            <returns>Less than zero - This instance is less than obj. Zero - This instance is equal to obj. Greater than zero - This instance is greater than obj. </returns>        
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase">
            <summary>
            Main class for configuration management.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IMastershipResource">
            <summary>
            This class defines the interface of a resource that 
            is controlled through the concept of Mastership.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IMastershipResource.Request">
            <summary>
            Call this method to request the mastership of 
            the resource.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IMastershipResource.Ensure">
            <summary>
            Call this method to ensure the mastership of 
            the resource.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IMastershipResource.Release">
            <summary>
            call this method to release the mastership of 
            the resource.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IMastershipResource.IsMaster">
            <summary>
            gets the current mastership state.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.IMastershipResource.MastershipChanged">
            <summary>
            This event is raised when mastership is changed.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.ABB#Robotics#Controllers#IMastershipResource#Request">
            <summary>
            Call this method to request the mastership of 
            the resource.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.ABB#Robotics#Controllers#IMastershipResource#Ensure">
            <summary>
            Call this method to ensure the mastership of 
            the resource.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.ABB#Robotics#Controllers#IMastershipResource#Release">
            <summary>
            Call this method to release the mastership of the resource.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.Accept(ABB.Robotics.Controllers.ConfigurationDomain.IMetadataVisitor)">
            <summary>
            Accepts a visitor object.
            </summary>
            <param name="visitor">Visitor object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.Load(System.String)">
            <summary>
            Loads a configuration file into the database.
            Uses LoadMode.Add.
            </summary>
            <param name="path">The path. (On the controller).</param>    
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.Load(System.String,ABB.Robotics.Controllers.ConfigurationDomain.LoadMode)">
            <summary>
            Loads a configuration file into the database.
            </summary>
            <param name="path">The path. (On the controller).</param>
            <param name="mode">The load mode.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.Read(System.String[])">
            <summary>
            Reads the value localized by the path.
            </summary>
            <param name="path">The path.</param>
            <returns>The value as a string.</returns>
            <example>The first example reads the unitmap value for signal TestDI. 
            The variables in the path are the same as the ones in the 
            configuration files (in this case eio.cfg). 
            The second example reads the value of cal_offset for rob1_1 (moc.cfg).
            <code>
            using ABB.Robotics;
            using ABB.Robotics.Controllers;
            using ABB.Robotics.Controllers.ConfigurationDomain;
            ...
            Controller controller = new Controller();
            ConfigurationDatabase cfg = controller.Configuration;
            
            string[] path = { "EIO", "EIO_SIGNAL", "TestDI", "UnitMap" };
            string data = cfg.Read(path);
            
            string[] path = { "MOC", "MOTOR_CALIB", "rob1_1", "cal_offset" };
            string data = cfg.Read(path);
            </code>
            </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.Write(System.String,System.String[])">
             <summary>
             Writes a value to the path.
             </summary>
             <param name="value">The value.</param>
             <param name="path">The path.</param>
             <example>This example sets the unitmap of signal "TestDI" to 17.
             <code>
             using ABB.Robotics;
             using ABB.Robotics.Controllers;
             using ABB.Robotics.Controllers.ConfigurationDomain;
             ...
             try
             {
                 Controller controller = new Controller();
                 Mastership master;
                 ConfigurationDatabase cfg = controller.Configuration;               
                 
                 using (master = Mastership.Request(controller.Configuration))
                 {
                     string[] path = { "EIO", "EIO_SIGNAL", "TestDI", "UnitMap" };
                     cfg.Write("17", path);
                 } 
              }
              catch (System.InvalidOperationException ex)
              {
                  MessageBox.Show("Mastership is held by another client.");
              }
              catch (System.Exception ex)
              {
                 // TODO: Add error handling
              }
              finally
              {
                  //must release mastership in case an error occurred when Write was executed
                  if (master != null)
                  {
                      master.Dispose();
                      master = null;
                  }
              }
            }
             </code>
             </example>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.IsMaster">
            <summary>
            Get the current mastership state.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.MastershipChanged">
            <summary>
            This event is raised when mastership is changed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.ExternalIO">
            <summary>
            Gets the external IO configuration domain.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.MotionControl">
            <summary>
            Gets MotionController configuration domain.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.ManMachineCommunication">
            <summary>
            Gets Man Machine Communication domain.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.Process">
            <summary>
            Gets the process configuration domain.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.SerialIO">
            <summary>
            Gets the Serial IO configuration domain.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.System">
            <summary>
            Gets the system configuration domain.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase.Domains">
            <summary>
            Gets all domains as a collection.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConfigurationDomain.IMetadataVisitor">
            <summary>
            Defines the visitor interface for the Cfg database
            of a controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.IMetadataVisitor.OnConfiguration(ABB.Robotics.Controllers.ConfigurationDomain.ConfigurationDatabase)">
            <summary>
            Called during a Configuration visit.
            </summary>
            <param name="configuration">Configuration object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.IMetadataVisitor.OnDomain(ABB.Robotics.Controllers.ConfigurationDomain.Domain)">
            <summary>
            Called during a domain visit.
            </summary>
            <param name="domain">Configuration domain object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.IMetadataVisitor.OnType(ABB.Robotics.Controllers.ConfigurationDomain.Type)">
            <summary>
            Called during a CfgType visit.
            </summary>
            <param name="type">Configuration type object. </param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConfigurationDomain.IMetadataVisitor.OnAttribute(ABB.Robotics.Controllers.ConfigurationDomain.Attribute)">
            <summary>
            Called during a Cfg attribute visit.
            </summary>
            <param name="attribute">Configuration type object.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConnectionChangedEventArgs">
            <summary>
            This class is the event argument from a controller connection
            changed event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ConnectionChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.ConnectionChangedEventArgs"/> class.
            </summary>		
        </member>
        <member name="P:ABB.Robotics.Controllers.ConnectionChangedEventArgs.Connected">
            <summary>
            Flag to signal if the controller is connected or not.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Controller">
            <summary>
            The main entry point for any operation against the controller.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IController">
            <summary>
            Main interface of a controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IController.GetEnvironmentVariable(System.String)">
            <summary>
            Gets the value of an environment variable.
            </summary>
            <param name="name">The name.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.IController.UICulture">
            <summary>
            Gets the CultureInfo for the TP.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IController.FileSystem">
            <summary>
            Gets a reference to the filesystem.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IController.SystemId">
            <summary>
            Gets the system id.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IController.RobotWareVersion">
            <summary>
            Gets the RobotWare version.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.Public.IInternalController">
            <summary>
            This interface defines a api for internal
            access of a Controller object. Through this interface
            you can access data that are needed for interop with
            our internal api, RobAPI.
            This interface is not intended for external use.
            </summary>
            <exclude />
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Public.IInternalController.CurrentClientId">
            <summary>
            Gets the current client id if any client is
            logged on to the controller, otherwise -1.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.#ctor">
            <summary>
            Creates a controller from the defaultController id in the capi section of the App.config file.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.#ctor(System.Guid)">
            <summary>
            Creates a controller instance from a system id.
            </summary>
            <param name="systemId">System id.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.#ctor(ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Creates a controller from a controller info object.
            </summary>
            <param name="controller">Info object from NetworkScanner.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.#ctor(System.String)">
            <summary>
            Not for public use.
            </summary>
            <param name="controllerID">Not for public use.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.Backup(System.String)">
            <summary>
            Initiates a new backup operation. This operation stores
            the backup in the specified directory.
            </summary>
            <remarks>This method is asynchronous, wait for the BackupCompleted event.</remarks>
            <param name="path">Output path for backup operation.</param>
            <remarks>
            Requires UAS_BACKUP grant. Only one single backup may be in 
            progress at a time.
            </remarks> 
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.CheckRestore(System.String)">
            <summary>
            Checks for possible mismatches and other problems with a backup.
            </summary>
            <param name="path">Path of directory.</param>
            <returns>True if restore will complete successfully.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.CheckRestore(System.String,ABB.Robotics.Controllers.RestoreIncludes)">
            <summary>
            Checks for possible mismatches and other problems with a backup.
            </summary>
            <param name="path">Path of directory.</param>
            <param name="includes">What to include from backup.</param>
            <returns>True if restore will complete successfully.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.CheckRestore(System.String,ABB.Robotics.Controllers.RestoreIncludes,ABB.Robotics.Controllers.RestoreIgnores)">
            <summary>
            Checks for possible mismatches and other problems with a backup.
            </summary>
            <param name="path">Path of directory.</param>
            <param name="includes">What to include from backup.</param>
            <param name="ignores">What errors to ignore.</param>
            <returns>True if restore will complete successfully.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.GetEnvironmentVariable(System.String)">
            <summary>
            Gets the value of an environment variable.
            </summary>
            <param name="name">The name.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.Logon(ABB.Robotics.Controllers.UserInfo)">
            <summary>
            Logon as the specified user.
            </summary>
            <param name="user">The user.</param>
            <remarks>
            RobotStudio addins may not manually log on or off. RobotStudio will handle the same.
            See <see cref="T:ABB.Robotics.Controllers.Hosting.HostingServices"/>.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.Logoff">
            <summary>
            Logs off the current user.
            </summary>
            <remarks>
            RobotStudio addins may not manually log on or off. RobotStudio will handle the same.
            See also <see cref="M:ABB.Robotics.Controllers.Controller.Logon(ABB.Robotics.Controllers.UserInfo)"/>.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.ReleaseUnmanagedResources">
            <summary>
            Releases unmanaged resources, thus preventing memory leaks.
            If the PC SDK application is running in a Single Threaded Apartment (STA), the Dispose call will dispose of managed objects,
            but native objects created internally by the PC SDK will remain. To release these unmanaged resources, this method should be called periodically. 
            </summary>
            <remarks>
            For an application running in a Multi Threaded Apartment (MTA) the Dispose call will remove both managed and native objects.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.Restart">
            <summary>
            Performs a warm restart of the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.Restart(ABB.Robotics.Controllers.ControllerStartMode)">
            <summary>
            Restarts the controller.
            </summary>
            <param name="mode">The startup mode.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.Restore(System.String)">
            <summary>
            Performs a Restore operation of a controller system.
            </summary>
            <param name="path">Path to the backup.</param>
            <remarks>
            Requires mastership of Rapid and Configuration domains. 
            Requires UAS_RESTORE grant. 
            Requires Auto mode.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.Restore(System.String,ABB.Robotics.Controllers.RestoreIncludes)">
            <summary>
            Performs a Restore operation of a controller system.
            </summary>
            <param name="path">Path to the backup.</param>
            <param name="includes">Defines what to restore from the backup.</param>
            <remarks>
            Requires mastership of Rapid and Configuration domains. 
            Requires UAS_RESTORE grant. 
            Requires Auto mode.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.Restore(System.String,ABB.Robotics.Controllers.RestoreIncludes,ABB.Robotics.Controllers.RestoreIgnores)">
            <summary>
            Performs a Restore operation of a controller system.
            </summary>
            <param name="path">Path to the backup.</param>
            <param name="includes">Defines what to restore from the backup.</param>
            <param name="ignores">Defines what mismatches between current system and backup to ignore.</param>
            <remarks>
            Requires mastership of Rapid and Configuration domains. 
            Requires UAS_RESTORE grant. 
            Requires Auto mode.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.Restore(System.String,ABB.Robotics.Controllers.RestoreIncludes,ABB.Robotics.Controllers.RestoreIgnores,System.Boolean)">
            <summary>
            Performs a Restore operation of a controller system.
            </summary>
            <param name="path">Path to the backup.</param>
            <param name="includes">Defines what to restore from the backup.</param>
            <param name="ignores">Defines what mismatches between current system and backup to ignore.</param>
            <param name="removeBackup">Flag to indicate if the backup folder shall be removed.</param>
            <remarks>
            Requires mastership of Rapid and Configuration domains. 
            Requires UAS_RESTORE grant. 
            Requires Auto mode.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ABB.Robotics.Controllers.Controller.CheckAvailability(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{ABB.Robotics.Internal.MastershipResource},System.Boolean,System.Boolean,System.Boolean)" -->
        <member name="M:ABB.Robotics.Controllers.Controller.OnConnectionChanged(System.Object,System.EventArgs)">
            <summary>
            OnConnectionChanged event handler to unpack connection changed details and call external eventhandler.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.Dispose(System.Boolean)">
            <summary>
            Disposes the current controller object.
            </summary>
            <param name="disposing">Flag that indicates the orgin of the call, 
            true indicates a dispose false indicates a finalizer.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.ABB#Robotics#Controllers#IMastershipResource#Request">
            <summary>
            Call this method to request the mastership of all(Rapid,Configuration) resources.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.ABB#Robotics#Controllers#IMastershipResource#Ensure">
            <summary>
            Call this method to Ensure the mastership of all(Rapid,Configuration) resources.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Controller.ABB#Robotics#Controllers#IMastershipResource#Release">
            <summary>
            Call this method to release the mastership of all(Rapid,Configuration) resources.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.AuthenticationSystem">
            <summary>
            Gets the user authentication subsystem.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.Ipc">
            <summary>Gets a reference to the <see cref="T:ABB.Robotics.Controllers.Messaging.Ipc"/> class of the controller.</summary>
            <returns>A <see cref="T:ABB.Robotics.Controllers.Messaging.Ipc"/> reference that can be used to access the Ipc functionality of the controller.</returns>	
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.BackupInProgress">
            <summary>
            Gets a flag that indicates if a backup is in progress or not.
            </summary>    
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.Configuration">
            <summary>
            Gets the controller configuration.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.Connected">
            <summary>
            Indicates whether the controller is connected or not.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
            <value>The current context.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.CurrentUser">
            <summary>
            Gets the currently logged on user.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.DateTime">
            <summary>
            Gets/Sets the time of the controller.
            </summary>
            <remarks>        
            Grant: UAS_CONTROLLER_PROPERTIES_WRITE, not supported by boot server or Virtual Controller.
            <para>
            The System.DateTimeKind used by this property is System.DateTimeKind.Utc (Coordinated Universal Time). To set current datetime use DateTime.UtcNow.
            </para>
            <seealso cref="T:System.DateTimeKind"/>
            <seealso cref="P:System.DateTime.UtcNow"/>
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.DefaultSystemId">
            <summary>
            Gets the configured default system id.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.EventLog">
            <summary>
            Gets the event log of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.FileSystem">
            <summary>
            Gets the controller file system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.IOSystem">
            <summary>
            Gets the IOSystem of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.IPAddress">
            <summary>
            Gets the IPAddress of the controller.
            </summary>
            <remarks>
            For a virtual controller the value is the loopback address i.e. 127.0.0.1.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.IsVirtual">
            <summary>
            Gets a flag that indicates if the controller is 
            virtual or not.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.MacAddress">
            <summary>
            Gets the MAC address of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.MainComputerServiceInfo">
            <summary>
            Gets service information for the main computer.
            This property is not valid for Virtual Controllers.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.MotionSystem">
            <summary>
            Gets the motions system domain of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.Name">
            <summary>
            Gets the name of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.NetworkSettings">
            <summary>
            Gets the network settings of the controller.
            </summary>
            <remarks>
            Not supported by Virtual Controller.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.OperatingMode">
            <summary>
            Gets the current operating mode of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.Rapid">
            <summary>
            Gets the Rapid Domain of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.RobotWare">
            <summary>
            Gets information about the current system and options.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.RobotWareVersion">
            <summary>
            Gets the version of the robotware the current system uses.    
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.RunLevel">
            <summary>
            Gets the current run level of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.State">
            <summary>
            Gets/Sets the current state of the controller.
            </summary>
            <remarks>
            Set requires Auto mode. Can only be used to change between 
            MotorsOn and MotorsOff respectively. You can not change from
            MotorsOn to MotorsOff while a RAPID program is executing.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.SystemId">
            <summary>
            Gets the id of the current system of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.SystemName">
            <summary>
            Gets the name of the current system of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.UICulture">
            <summary>
            Gets the UI Culture.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.Controller.AutoConditionsChanged">
            <summary>
            This event is raised when a controller is moved from manual
            to auto, all the raised conditions needs to be acknowledged.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.Controller.BackupCompleted">
            <summary>
            This event is raised when a backup operation completes, 
            the event arguments hold information about the success of
            the backup operation.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.Controller.ConnectionChanged">
            <summary>
            This event is raised when the connection status 
            to the controller has changed.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.Controller.OperatingModeChanged">
            <summary>
            This event is raised when the operation mode of the
            controller has changed.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.Controller.StateChanged">
            <summary>
            This event is raised when the current state 
            of the controller has changed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.InternalController">
            <summary>
            gets a reference to the internal controller instance
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.Url">
            <summary>
            Gets the url for the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.IsMaster">
            <summary>
            Gets the current mastership state.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Controller.MastershipPolicy">
            <summary>
            Specifies how mastership should be handled by a GUI client
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.Controller.MastershipChanged">
            <summary>
            This event is not supported.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.BackupEventHandler">
            <summary>
            Defines the signature of a BackupCompleted event handler.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ConnectionChangedEventHandler">
            <summary>
            Defines the signature of a ConnectionChanged event handler.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.OperatingModeChangedEventHandler">
            <summary>
            Defines the signature of a OperatingModeChanged event handler.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.StateChangedEventHandler">
            <summary>
            Defines the signature of a StateChanged event handler.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerContext.Current">
            <summary>
            Gets the current context for this thread.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.FactoryFailedException">
            <summary>
            Thrown when factory failed to create instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.FactoryFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.FactoryFailedException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.FactoryFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.FactoryFailedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.FactoryFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.FactoryFailedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.FactoryFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.FactoryFailedException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerFactoryProperty">
            <summary>
            Enumerator to control what property the factory uses to create Controller 
            instance.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerFactoryProperty.SystemId">
            <summary>
            The System ID of the system is used to create the controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerFactoryProperty.IPAddress">
            <summary>
            The IP Address of the controller is used to create Controller instance.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerFactory">
            <summary>
            utility class that creates controller instances from a 
            ControllerInfo instance
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerFactory.#ctor">
            <summary>
            private ctor to avoid object creation
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerFactory.CreateFrom(ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            creates a controller instance
            </summary>
            <param name="info">controller info object</param>
            <returns>the controller instance</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerFactory.CreateFrom(ABB.Robotics.Controllers.ControllerInfo,ABB.Robotics.Controllers.ControllerFactoryProperty)">
            <summary>
            creates a controller info from the specified information
            </summary>
            <param name="info">information object about the controller</param>
            <param name="property">property on the info object to use for creation</param>
            <returns>a controller instance if possible to create</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerFactory.FormatControllerId(System.Guid)">
            <summary>
            formats a controllerId from the specified guid
            </summary>
            <param name="id">id to format</param>
            <returns>the controller id</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerFactory.FormatControllerId(System.Net.IPAddress)">
            <summary>
            formats a controllerId from the IPAddress
            </summary>
            <param name="address">address to format</param>
            <returns>the controller id</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerFactory.FormatControllerId(ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Formats a controller id from a controller info string.
            </summary>
            <param name="info">ControllerInfo object for controller.</param>
            <returns>A correctly formatted string.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerUserInfo">
            <summary>
            Defines all user properties in the internal impl.	
            </summary>	
        </member>
        <member name="T:ABB.Robotics.Controllers.UserInfo">
            <summary>
            abstracts a user in the system
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserInfo"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserInfo"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="password">The password.</param>
            <param name="application">The application.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserInfo.DemandWriteAccess">
            <summary>
            Demands write access to the object, throws an
            invalid operation exception if write access isn't
            granted.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserInfo.Password">
            <summary>
            gets / sets the password of the user
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserInfo.Application">
            <summary>
            gets / sets the application
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserInfo.ReadOnly">
            <summary>
            Gets a flag indicating that the object is
            readonly.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserInfo.DefaultUser">
            <summary>
            returns the default user for this application
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerUserInfo.HidePassword">
            <summary>
            Hides the current password for external acess.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerUserInfo.GetHiddenPassword">
            <summary>
            Gets the hidden password.
            </summary>
            <returns>Hidden password.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.IDeviceNode">
            <summary>
            Defines the interface of a device node.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IDeviceNode.GetChildren">
            <summary>
            Gets all nodes from a device.
            </summary>
            <returns>The device nodes.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.IPropertyNode">
            <summary>
            Defines the interface of a property node. 
            A property node doesn't have any children and
            therefore always return an empty enumerator.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IPropertyNode.Unit">
            <summary>
            Gets the unit of the node.
            If no unit is defined for the node a space is returned.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IPropertyNode.Value">
            <summary>
            Gets the value of the node.
            Will throw an exception if the value cannot be retrieved. 
            Some values cannot be retrieved from a Virtual Controller.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IDeviceManager">
            <summary>
            Defines the interface of the device manager.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.DeviceManager">
            <summary>
            Manages the devices in the system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceManager.#ctor(ABB.Robotics.Controllers.IController)">
            <summary>
            Initializes a new DeviceManager object.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceManager.GetChildren">
            <summary>
            Gets the children of the root device node.
            </summary>
            <returns>The children.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceManager.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.DeviceDriverStream">
            <summary>
            This stream encapsulates the interface between a user mode application 
            and a device driver on the controller.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerBoundStream">
            <summary>
            Stream object against a controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerBoundStream._controller">
            <summary>
            Controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ControllerBoundStream.#ctor(ABB.Robotics.Controllers.Controller)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.ControllerBoundStream"/> class.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerBoundStream.CurrentContext">
            <summary>
            Context of internal controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerBoundStream.InternalController">
            <summary>
            Accessor for controller object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.ControllerBoundStream.Url">
            <summary>
            Gets the url of the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceDriverStream.#ctor(ABB.Robotics.Controllers.Controller,System.String)">
            <summary>
            Opens the stream with Read access.
            </summary>
            <param name="name">Name of device.</param>
            <param name="controller">Controller that hosts the stream.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceDriverStream.#ctor(ABB.Robotics.Controllers.Controller,System.String,ABB.Robotics.Controllers.DeviceAccess)">
            <summary>
            Opens a stream with the specified name and access.
            </summary>
            <param name="name">Name of stream to open.</param>
            <param name="access">Access of stream.</param>
            <param name="controller">Controller that hosts the stream.</param>	
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceDriverStream.#ctor(ABB.Robotics.Controllers.Controller,System.String,ABB.Robotics.Controllers.DeviceAccess,System.Int32)">
            <summary>
            Opens a stream with the specified name and access.
            </summary>
            <param name="name">Name of stream to open.</param>
            <param name="access">Access of stream.</param>
            <param name="controller">Controller that hosts the stream.</param>	
            <param name="flags">Device specific flags.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceDriverStream.Close">
            <summary>
            Closes the stream object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceDriverStream.Flush">
            <summary>
            Flush data to stream, currently not implemented, all writes are 
            imediate against the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceDriverStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream.
            </summary>
            <param name="buffer">Buffer for read data.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="count">Maximum number of bytes to read.</param>
            <returns>Acutal number of bytes read.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceDriverStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
            <param name="offset">Not supported.</param>
            <param name="origin">Not supported.</param>
            <returns>Not supported.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceDriverStream.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
            <param name="value">Not supported.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.DeviceDriverStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream.
            </summary>
            <param name="buffer">Buffer for write data.</param>
            <param name="offset">Offset in buffer to write.</param>
            <param name="count">Maximum number of bytes to write.</param>		
        </member>
        <member name="P:ABB.Robotics.Controllers.DeviceDriverStream.CanRead">
            <summary>
            Check if the stream can be read.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.DeviceDriverStream.CanSeek">
            <summary>
            Checks if the stream can be seeked.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.DeviceDriverStream.CanWrite">
            <summary>
            Checks if the stream can be written.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.DeviceDriverStream.Length">
            <summary>
            Not possible to read length from a device stream.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.DeviceDriverStream.Position">
            <summary>
            It is not possible the seek on a device stream.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Discovery.ChangeReasons">
            <summary>
            This enum describes the reason for the event.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.ChangeReasons.Connection">
            <summary>
            Connection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.ChangeReasons.IPAddress">
            <summary>
            IPAddress.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.ChangeReasons.Lan">
            <summary>
            Lan.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.ChangeReasons.New">
            <summary>
            New controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.ChangeReasons.Updated">
            <summary>
            Updated.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.ChangeReasons.Power">
            <summary>
            Power.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.ChangeReasons.Restart">
            <summary>
            Restart.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.ChangeReasons.SystemId">
            <summary>
            System id.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.ChangeReasons.Lost">
            <summary>
            Lost from netscan.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.ChangeReasons.Collision">
            <summary>
            Collision with other system.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Discovery.ControllerNotFoundException">
            <summary>
            This exception is thrown if NetworkScanner fails
            to find a controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.ControllerNotFoundException.#ctor">
            <summary>
            Creates a ControllerNotFoundException object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.ControllerNotFoundException.#ctor(System.String)">
            <summary>
            Creates a ControllerNotFoundException object.
            </summary>
            <param name="message">Message of object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.ControllerNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a ControllerNotFoundException object.
            </summary>
            <param name="message">Message of object.</param>
            <param name="innerException">Inner exception of object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.ControllerNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a ControllerNotFoundException object.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.ControllerNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Discovery.LocalVCFilter">
            <summary>
            Filters an enumerable to only show local VCs.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Discovery.NetworkScannerSearchCriterias">
            <summary>
            Search criterias for scanner.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.NetworkScannerSearchCriterias.None">
            <summary>
            No search criteria is specified.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.NetworkScannerSearchCriterias.Real">
            <summary>
            Search only for Real controllers.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Discovery.NetworkScannerSearchCriterias.Virtual">
            <summary>
            Search only for virtual controllers.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Discovery.NetworkScanner">
            <summary>
            This class is used to scan the network for 
            controllers and changes in the infrastructure.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.#ctor">
            <summary>
            Creates a new network scanner instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.AddRemoteController(System.Net.IPAddress)">
            <summary>
            Adds a controller to netscan that isn't avaiable on the local subnet.
            Adding the same controller multiple times has no effect.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.AddRemoteController(System.String)">
            <summary>
            Adds a controller to netscan that isn't avaiable on the local subnet.
            Adding the same controller multiple times has no effect.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.Find(System.Guid)">
            <summary>
            Finds a specified controller on the network.
            </summary>
            <param name="systemId">The system to locate.</param>		
            <returns>System to locate.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.Find(System.Guid,System.TimeSpan,System.Int32)">
            <summary>
            Finds a specified controller on the network.
            </summary>
            <param name="systemId">The system to locate.</param>
            <param name="retries">Number of times to retry the find operation on failure.</param>
            <param name="waitTime">The ammount of time in milliseconds to wait between two tries.</param>
            <returns>System to locate.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.Find(System.Guid,System.Int32,System.Int32)">
            <summary>
            Finds a specified controller on the network.
            </summary>
            <param name="systemId">The system to locate.</param>
            <param name="retries">Number of times to retry the find operation on failure.</param>
            <param name="waitTime">The ammount of time in milliseconds to wait between two tries.</param>
            <returns>System to locate, or null if the controller is</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.GetControllers">
            <summary>
            returns all controllers as an array
            </summary>
            <returns>the located controllers</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.GetControllers(ABB.Robotics.Controllers.Discovery.NetworkScannerSearchCriterias)">
            <summary>
            returns the 
            </summary>		
            <param name="criterias">search criterias</param>
            <returns>the matching controllers</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.Scan">
            <summary>
            starts a single scan to load all controllers into memory.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.TryFind(System.Guid,ABB.Robotics.Controllers.ControllerInfo@)">
            <summary>
            Finds a specified controller on the network.
            </summary>
            <param name="systemId">The system to locate.</param>
            <param name="info">ControllerInfo if found.</param>
            <returns>True if the system was found.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.TryFind(System.Guid,System.TimeSpan,System.Int32,ABB.Robotics.Controllers.ControllerInfo@)">
            <summary>
            Finds a specified controller on the network.
            </summary>
            <param name="systemId">The system to locate.</param>
            <param name="retries">Number of times to retry the find operation on failure.</param>
            <param name="waitTime">The ammount of time in milliseconds to wait between two tries.</param>
            <param name="info">ControllerInfo if found.</param>
            <returns>True if the system was found.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkScanner.TryFind(System.Guid,System.Int32,System.Int32,ABB.Robotics.Controllers.ControllerInfo@)">
            <summary>
            Finds a specified controller on the network.
            </summary>
            <param name="systemId">The system to locate.</param>
            <param name="retries">Number of times to retry the find operation on failure.</param>
            <param name="waitTime">The ammount of time in milliseconds to wait between two tries.</param>
            <param name="info">ControllerInfo if found.</param>
            <returns>True if the system was found.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Discovery.NetworkScanner.Controllers">
            <summary>
            get the collection of found controllers
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Discovery.NetworkWatcherEventHandler">
            <summary>
            This delegate defines the eventhandler for Controller Found events.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Discovery.NetworkWatcher">
            <summary>
            This class monitors the network for controller activites.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkWatcher.#ctor">
            <summary>
            Creates a NetworkWatcher with disabled events.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkWatcher.#ctor(ABB.Robotics.Controllers.ControllerInfo[])">
            <summary>
            Creates a NetworkWatcher with disabled events but initiated to controllers.
            </summary>
            <param name="controllers">the already known controllers</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkWatcher.#ctor(ABB.Robotics.Controllers.ControllerInfo[],System.Boolean)">
            <summary>
            Creates a NetworkWatcher initiated to controllers.
            </summary>
            <param name="controllers">the already known controllers</param>
            <param name="enableRaisingEvents">enables/disables events</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkWatcher.#ctor(ABB.Robotics.Controllers.ControllerInfoCollection)">
            <summary>
            Creates a NetworkWatcher with disabled events but initiated to controllers.
            </summary>
            <param name="controllers">the already known controllers</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkWatcher.#ctor(ABB.Robotics.Controllers.ControllerInfoCollection,System.Boolean)">
            <summary>
            Creates a NetworkWatcher initiated to controllers.
            </summary>
            <param name="controllers">the already known controllers</param>
            <param name="enableRaisingEvents">enables/disables events</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkWatcher.#ctor(System.Boolean)">
            <summary>
            Creates a NetworkWatcher.
            </summary>
            <param name="enableRaisingEvents">Controller if events are raisable from creation.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkWatcher.#ctor(System.Boolean,System.Collections.IEnumerable)">
            <summary>
            Creates a NetworkWatcher initiated to controllers.
            </summary>
            <param name="controllers">the already known controllers</param>
            <param name="enableRaisingEvents">enables/disables events</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkWatcher.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Discovery.NetworkWatcher.EnableRaisingEvents">
            <summary>
            Enables / Disables events from the Watcher object. 
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.Discovery.NetworkWatcher.Found">
            <summary>
            This event is raised when a new controller is found.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.Discovery.NetworkWatcher.Lost">
            <summary>
            This event is raised when a controller is lost from the network.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Discovery.NetworkWatcherEventArgs">
            <summary>
            This class carries the event information from a Controller Found event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkWatcherEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.Discovery.NetworkWatcherEventArgs"/> class.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.NetworkWatcherEventArgs.Unpack(Adapters.Netscan)">
            <summary>
            Unpack event args to NetworkWatcherEventArgs.
            </summary>      
        </member>
        <member name="P:ABB.Robotics.Controllers.Discovery.NetworkWatcherEventArgs.Controller">
            <summary>
            Gets the found controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Discovery.NetworkWatcherEventArgs.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.Discovery.SystemStartedEvent">
            <summary>
            This waithandle waits for a single system to 
            become available from the network scanner. It uses
            a ManualResetEvent internally.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.SystemStartedEvent.#ctor(ABB.Robotics.Controllers.Discovery.NetworkWatcher,System.Guid)">
            <summary>
            Creates a SystemWaitHandle object.
            </summary>
            <param name="watcher">Watcher that provides the events.</param>
            <param name="systemId">System to wait for.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.SystemStartedEvent.WaitOne">
            <summary>
            Waits forever for the specified system.
            </summary>
            <returns>True if the controller is available otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.SystemStartedEvent.WaitOne(System.Int32,System.Boolean)">
            <summary>
            Waits for the specified system to become available.
            </summary>
            <param name="millisecondsTimeout">Timeout for wait operation.</param>
            <param name="exitContext">See MSDN.</param>
            <returns>True if the controller is available otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.SystemStartedEvent.WaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            Waits for the specified system to become available.
            </summary>
            <param name="timeout">Timeout for wait operation.</param>
            <param name="exitContext">See MSDN.</param>
            <returns>True if the controller is available otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Discovery.SystemStartedEvent.Dispose(System.Boolean)">
            <summary>
            When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:System.Threading.WaitHandle"/>, and
            optionally releases the managed resources.
            </summary>
            <param name="explicitDisposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Discovery.SystemStartedEvent.Handle">
            <summary>
            Gets the Native handle of the object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.EventLogDomain.MessageWrittenEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.Controllers.EventLogDomain.EventLog.MessageWritten"/> event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.MessageWrittenEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.EventLogDomain.MessageWrittenEventArgs"/> class.
            </summary>		
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.MessageWrittenEventArgs.Message">
            <summary> 
            Gets the event log message that was written to the log.
            </summary>
            <value> An <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage"/> that represents the mesasage that was written to the event log.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.EventLogDomain.MessageWrittenEventHandler">
            <summary>
            Event handler for a new eventlog message.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.EventLogDomain.EventLog">
            <summary>
            This class represents a EventLog domain in the controller.
            </summary>
            <remarks>
            When the last instance of this class, created for a certain controller, is disposed any <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogCategory"/> will update
            its messages.</remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.EventLog.GetCategories">
            <summary> Gets the available categories of the <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLog"/>.</summary>
            <value>An array of the available categories inside the EventLog domain in the controller.</value>		
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.EventLog.GetCategory(ABB.Robotics.Controllers.EventLogDomain.CategoryType)">
            <summary>
            Obsolete: Use EventLogCategory GetCategory( int id ) instead, <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogCategory"/>
            </summary>
            <param name="type">Type of the </param>
            <returns>A <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogCategory"/> object to represents the Event Log's category. If the category does not exist, the return value is <b>null</b>.</returns>		
            <remarks>
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.EventLog.GetCategory(System.Int32)">
            <summary>
            Gets the specified event log category.
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.EventLog.ClearAll">
            <summary>
            Clears any <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage"/> in any <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogCategory"/>.
            </summary>
            <remarks>This method clears the eventlogs in the controller.</remarks>		
        </member>
        <member name="E:ABB.Robotics.Controllers.EventLogDomain.EventLog.MessageWritten">
            <summary>
            Raised when a new event is written to the log.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.EventLogDomain.EventLogCategory">
            <summary>
            This class represents a catefory of messages of the EventLog.
            </summary>	
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.EventLogCategory.Clear">
            <summary>
            Clears all the messages related to this category of the event log.
            </summary>    
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogCategory.Id">
            <summary>
            Gets the id of the category.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogCategory.Type">
            <summary> 
            Gets the type of the category. 
            </summary>
            <value>One of the <see cref="T:ABB.Robotics.Controllers.EventLogDomain.CategoryType"/> values.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogCategory.LocalizedName">
            <summary> 
            Gets the localized name of the category. 
            </summary>
            <value>The text associated to the name of the category.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogCategory.Messages">
            <summary> 
            Gets the available messages inside the Event Log Category of the controller.
            </summary>
            <value>An array of the available messages inside the Event Log Category of the controller.</value>		
        </member>
        <member name="T:ABB.Robotics.Controllers.EventLogDomain.EventLogEntryType">
            <summary> 
            Predefined event types available in a ABB Controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.EventLogEntryType.Error">
            <summary>
            An error event.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.EventLogEntryType.Warning">
            <summary>
            A warning event.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventLogDomain.EventLogEntryType.Information">
            <summary>
            An information event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage">
            <summary>
            This class represents a message of the <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage.Title">
            <summary> Gets the title of the message. </summary>
            <value>The text associated to the title of the message.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage.Body">
            <summary> 
            Gets the body of the message. 
            </summary>
            <value>The text associated to the message..</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage.Number">
            <summary> 
            Gets the number of the message. 
            </summary>
            <value>The integer associated to the number of the message.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage.SequenceNumber">
            <summary>
            Gets the sequence number for the message
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage.Timestamp">
            <summary> 
            Gets the time information specific when the event happened.
            </summary>
            <value>A DateTime that represents the time when the event happened.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage.Type">
            <summary> 
            Gets the type of the event message.
            </summary>
            <value>A  EventType enum value that represents the type of the event message.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage.CategoryId">
            <summary> 
            Gets the category to which the event message belongs.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage.CategoryType">
            <summary> 
            Gets the category to which the event message belongs.
            </summary>
            <value>A  EventCategoryTypeType enum value that represents the category of the event message.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection">
            <summary>
            Defines size and enumerators for a collection of <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogMessage"/> instances.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection.#ctor(ABB.Robotics.Controllers.EventLogDomain.EventLogCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection.Clear">
            <summary>
            Clears the internal list.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection.GetInternalList">
            <summary>
            Gets the internal list, used for updates.
            </summary>
            <returns>The internal list.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy a portion of the <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection"/> to an array.
            </summary>
            <param name="array">The array to copy items to</param>
            <param name="index">The location within the destination array 
            to copy the items from the collection to.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection.CopyTo(ABB.Robotics.Controllers.EventLogDomain.EventLogMessage[],System.Int32)">
            <summary>
            Copy a portion of the <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection"/> to an array.
            </summary>
            <param name="array">The array to copy items to</param>
            <param name="index">The location within the destination array 
            to copy the items from the collection to.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection.Item(System.Int32)">
            <summary>
            Retrieves the item at the specified indexed location in the collection.
            </summary>
            <value>The item at the specified location.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection.Count">
            <summary>
            Gets the number of items in the collection
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection.SyncRoot">
            <summary>
            Gets an object that can be used to syncronize access to <see cref="T:ABB.Robotics.Controllers.EventLogDomain.EventLogMessageCollection"/>
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.EventPriority">
            <summary>
            Predefined priority levels for events.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventPriority.Normal">
            <summary>
            The priority is normal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.EventPriority.High">
            <summary>
            The priority is high.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.FileSystemDomain.FileSystemScope">
            <summary>
            Use this class to create scope for the filesystem.
            Sets RemoteDirectory and LocalDirectory properties
            and resets the to their original values at the end
            of the scope.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemScope.#ctor(ABB.Robotics.Controllers.FileSystemDomain.FileSystem,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.FileSystemDomain.FileSystemScope"/> class.
            To leave a property as is, set the matching parameter to null.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="remoteDirectory">The remote directory.</param>
            <param name="localDirectory">The local directory.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemScope.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, 
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.FileSystemDomain.IFileSystem">
            <summary>
            Main interface of the file system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.IFileSystem.GetFile(System.String)">
            <summary>
            Gets a file from the Robot Controller and store it on the
            local system. Stores file locally with same name as on the
            controller.
            </summary>
            <param name="remoteFile">Name of a file to retrieve from the
                                     Robot Controller.</param>
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.IFileSystem.LocalDirectory">
            <summary>
            Gets/Sets the local directory.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.IFileSystem.RemoteDirectory">
            <summary>
            Gets/Sets the remote directory.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.FileSystemDomain.StorageDeviceInfo">
            <summary>
            Contains information about a storage device.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ServiceInfo">
            <summary>
            Base class for all info objects.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ReadOnlyObject">
            <summary>
            ReadOnlyObject is a special object that may be
            Readonly to enable immutable objects even though 
            properties have set operations. 
            Will throw an InvalidOperationException if write
            is attempted when object is in ReadOnly mode.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ReadOnlyObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.ReadOnlyObject"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ReadOnlyObject.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.ReadOnlyObject"/> class.
            </summary>
            <param name="isReadonly">if set to <c>true</c> [is readonly].</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.ReadOnlyObject.SetReadOnly">
            <summary>
            Sets the Readonly flag.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ReadOnlyObject.DemandWriteAccess">
            <summary>
            Demands write access to object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.ReadOnlyObject.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Callback during serialization when entire graph
            is deserialized, now we are allowed to lock the
            object IF it was locked during serialization.
            </summary>
            <param name="sender">Send of callback.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.ReadOnlyObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ABB.Robotics.Controllers.ServiceInfo.#ctor">
            <summary>
            Initializes a new InfoObject instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.StorageDeviceInfo.#ctor">
            <summary>
            Initializes a StorageDeviceInfo object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.StorageDeviceInfo.DriveType">
            <summary>
            Gets/Sets the DriveType of the drive.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.StorageDeviceInfo.Enabled">
            <summary>
            Gets/Sets the enabled flag of the drive.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.StorageDeviceInfo.Name">
            <summary>
            Gets/Sets the name of the drive.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.StorageDeviceInfo.ReadOnly">
            <summary>
            Get/Sets the readonly flag for the drive.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.FileSystemDomain.FileSystem">
            <summary>
            This class represents the <c>FileSystem</c> domain of a Robot
            controller.
            </summary>                                                   
        </member>
        <member name="F:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.Prefix">
            <summary>
            Prefix for controller paths.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.#ctor(ABB.Robotics.Controllers.Controller)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.FileSystemDomain.FileSystem"/> class.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginCopyDirectory(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts an async directory copy operation on the controller.
            </summary>
            <param name="source">Source directory.</param>
            <param name="destination">Destination directory.</param>
            <param name="callback">Callback method.</param>
            <param name="state">User defined state object.</param>
            <returns>Result object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginCopyDirectory(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts an async directory copy operation on the controller.
            </summary>
            <param name="source">Source directory.</param>
            <param name="destination">Destination directory.</param>
            <param name="overwrite">True to overwrite any existing directory.</param>
            <param name="callback">Callback method.</param>
            <param name="state">User defined state object.</param>
            <returns>Result object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginCopyFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a new async file copy operation.
            </summary>
            <param name="source">Source file.</param>    
            <param name="destination">Destination file.</param>
            <param name="callback">Callback.</param>
            <param name="state">User defined state object.</param>
            <returns>Result object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginCopyFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts a new async file copy operation.
            </summary>
            <param name="source">Source file.</param>    
            <param name="destination">Destination file.</param>
            <param name="callback">Callback.</param>
            <param name="state">User defined state object.</param>
            <param name="overwrite">True to overwrite any existing file.</param>
            <returns>Result object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a CreateDirectory operation on the controller.
            </summary>
            <param name="name">Name of directory.</param>
            <param name="callback">Completion callback.</param>
            <param name="state">User state object.</param>
            <returns>
            \Result object.
            
            
            </returns>
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a directory exists operation.
            </summary>
            <param name="path">Path of directory.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns>
            \Result object.
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginListDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a list directory operation.
            </summary>
            <param name="filter">Filter expression.</param>
            <param name="callback">Callback method.</param>
            <param name="state">State object.</param>
            <returns>
            \ \ 
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginFileExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a begin file operation.
            </summary>
            <param name="path">Path to file.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns>
            \ \ 
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginGetDirectory(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts a get operation for a complete directory.
            </summary>
            <param name="remoteDirectory">Name of remote directory.</param>
            <param name="localDirectory">Name of local directory.</param>
            <param name="overwrite">true to overwrite local if
                                    exists.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns>
            \ \ 
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginGetFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts a get file operation.
            </summary>
            <returns>
            \Result object.
            </returns>
            <param name="remoteFile">Remote file.</param>
            <param name="localFile">Local file.</param>
            <param name="callback">Callback method.</param>
            <param name="overwrite">Flag indicating if to overwrite
                                    any existing file.</param>
            <param name="state">State object.</param>
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginPutDirectory(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts a put directory operation.
            </summary>
            <param name="localDirectory">Local directory.</param>
            <param name="remoteDirectory">Remote directory.</param>
            <param name="overwrite">true to overwrite remote
                                    directory if already present.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns>
            
            </returns><remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginPutFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts a put file operation.
            </summary>
            <param name="localFile">Local file.</param>
            <param name="remoteFile">Remote file.</param>
            <param name="overwrite">True to overwrite if already
                                    present.</param>
            <param name="callback">Callback method.</param>
            <param name="state">State.</param>
            <returns>
            \Result object.
            </returns>
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginRemoveDirectory(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts an remove directory operation.
            </summary>
            <param name="path">Path of directory.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <param name="recursive">True, to remove directory
                                    recursively.</param>
            <returns>
            \Result object.
            
            
            </returns>
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginRemoveFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a remove file operation.
            </summary>
            <param name="path">\File to remove.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns>
            \Result object.
            
            
            </returns>
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.BeginRename(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a new rename operation.
            </summary>
            <param name="path">Path to file or directory to
                               rename.</param>
            <param name="name">New name.</param>
            <param name="callback">Callback.</param>
            <param name="state">State object.</param>
            <returns>
            AsyncResult object.
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="UAS_WRITE_FTP"/>
            and the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grants.
            </remarks>                                                                              
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.CopyDirectory(System.String,System.String)">
            <summary>
            Copies a directory locally on the controller.
            </summary>
            <param name="source">Source directory.</param>
            <param name="destination">Destination directory.</param>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="UAS_WRITE_FTP"/>
            and the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grants. 
            </remarks>                                                                              
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies a directory locally on the controller.
            </summary>
            <param name="source">Source directory.</param>
            <param name="destination">Destination directory.</param>
            <param name="overwrite">True replace any exists directory.</param>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="UAS_WRITE_FTP"/>
            and the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grants.
            </remarks>                                                                              
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.CopyFile(System.String,System.String)">
            <summary>
            Copies a file locally on the controller, from the source to
            the destination.
            </summary>
            <param name="source">Source to copy.</param>
            <param name="destination">Destination.</param>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="UAS_WRITE_FTP"/>
            and the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grants.
            </remarks>                                                                              
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file locally on the controller, from the source to
            the destination.
            </summary>
            <param name="source">Source to copy.</param>
            <param name="destination">Destination.</param>
            <param name="overwrite">True to overwrite any existing
                                    \file.</param>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="UAS_WRITE_FTP"/>
            and the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grants.
            </remarks>                                                                              
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory on the Robot Controller.
            </summary>
            <param name="name">Name of the directory to create. </param>
            <remarks>
            The directory is created under the directorys specified by
            the property <see cref="P:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.RemoteDirectory"/>
            
            
            </remarks>
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.DirectoryExists(System.String)">
            <summary>
            Verifies that a directory exists.
            </summary>
            <param name="path">Path to directory.</param>
            <returns>
            True if the directory exist.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndCopyDirectory(System.IAsyncResult)">
            <summary>
            Ends an async directory copy operation.
            </summary>
            <param name="result">Result object from BeginCopyFile operation.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndCopyFile(System.IAsyncResult)">
            <summary>
            Ends an async file copy operation.
            </summary>
            <param name="result">Result object from BeginCopyFile operation.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            End an async directory creation operation.
            </summary>
            <param name="result">AsyncResult from start operation.</param>
            <returns>Info object for directory.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndDirectoryExists(System.IAsyncResult)">
            <summary>
            Ends the directory exists operation.
            </summary>
            <param name="ar">Result from BeginDirectoryExists.</param>
            <returns>True if the file exists, otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndFileExists(System.IAsyncResult)">
            <summary>
            Ends a FileExists operation.
            </summary>
            <param name="ar">AsyncResult.</param>
            <returns>true if file exists.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndGetFile(System.IAsyncResult)">
            <summary>
            Ends a get file operation.
            </summary>
            <param name="ar">Async result.</param>
            <returns>Path to local file.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndGetDirectory(System.IAsyncResult)">
            <summary>
            Ends a GetDirectory operation.
            </summary>
            <param name="ar">Async resul.t</param>
            <returns>Path to local directory.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndListDirectory(System.IAsyncResult)">
            <summary>
            Ends a list directory operation.
            </summary>
            <param name="ar">Async result.</param>
            <returns>The matching file entries.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndPutDirectory(System.IAsyncResult)">
            <summary>
            Ends a put directory operation.
            </summary>
            <param name="ar">Async result.</param>
            <returns>Path to remote directory.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndPutFile(System.IAsyncResult)">
            <summary>
            Ends an PutFile operation.
            </summary>
            <param name="ar">Async result.</param>
            <returns>Destination path.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndRemoveDirectory(System.IAsyncResult)">
            <summary>
            Ends an RemoveDirectory operation.
            </summary>
            <param name="ar">Result.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndRemoveFile(System.IAsyncResult)">
            <summary>
            Ends an RemoveFile operation.
            </summary>
            <param name="ar">Result.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.EndRename(System.IAsyncResult)">
            <summary>
            Ends the rename operation.
            </summary>
            <param name="ar">AsyncResult.</param>
            <returns>New path.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.FileExists(System.String)">
            <summary>
            Checks if the file exists.
            </summary>
            <param name="name">Name of file.</param>
            <returns>
            true if file exists, otherwise false.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Gets a complete directory recursively.
            </summary>
            <param name="remoteDirectory">Name of remote directory.</param>
            <param name="localDirectory">Name of local directory.</param>
            <param name="overwrite">true to overwrite any existing
                                    local directories.</param>
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetDirectory(System.String,System.String)">
            <summary>
            Gets a complete directory recursively.
            </summary>
            <param name="remoteDirectory">Name of remote directory.</param>
            <param name="localDirectory">Name of local directory.</param>
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetDirectory(System.String,System.Boolean)">
            <summary>
            Get a remote directory, creates a local directory with the
            same name as the remote.
            </summary>
            <param name="remoteDirectory">Remote directory.</param>
            <param name="overwrite">true to overwrite any existing
                                    local directory.</param>
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetDirectory(System.String)">
            <summary>
            Get a remote directory, creates a local directory with the
            same name as the remote.
            </summary>
            <param name="remoteDirectory">Remote directory.</param>
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetStorageDevices">
            <summary>
            Gets all available drives.
            </summary>
            <returns>Array of available drives.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetFile(System.String,System.String,System.Boolean)">
            <summary>
            Gets a file from the Robot Controller and stores it on the
            local system.
            </summary>
            <param name="remoteFile">Name of a file to retrieve from the
                                     Robot Controller.</param>
            <param name="localFile">Name of the file to create on the
                                    local system. </param>
            <param name="overwrite">true, to overwrite local file.</param>
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks> 
            <exception cref="T:System.InvalidOperationException"> The file to overwrite is Read-only.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetFile(System.String,System.String)">
            <summary>
            Gets a file from the Robot Controller and stores it on the
            local system.
            </summary>
            <param name="remoteFile">Name of a file to retrieve from the Robot Controller.</param>
            <param name="localFile">Name of the file to create in the local file system. </param>
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetFile(System.String,System.Boolean)">
            <summary>
            Gets a file from the Robot Controller and stores it on the
            local system. Stores file locally with same name as on the
            controller.
            </summary>
            <param name="remoteFile">Name of a file to retrieve from the
                                     Robot Controller.</param>
            <param name="overwrite">true, to overwrite local file.</param>
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>   
            <exception cref="T:System.InvalidOperationException"> The file to overwrite is Read-only.</exception> 
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetFile(System.String)">
            <summary>
            Gets a file from the Robot Controller and stores it on the
            local system. Stores file locally with same name as on the
            controller.
            </summary>
            <param name="remoteFile">Name of a file to retrieve from the
                                     Robot Controller.</param>
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetFileAttributes(System.String)">
            <summary>
            Gets the file attributes for a remote file.
            </summary>
            <param name="file">Name of remote file.</param>
            <returns>
            FileAttributes for file.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetDirectoryAttributes(System.String)">
            <summary>
            Gets the attributes for a directory.
            </summary>
            <param name="directory">Name of directory.</param>
            <returns>
            Attribute of directory.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetFileCreationTime(System.String)">
            <summary>
            Get the time of creation for a file.
            </summary>
            <param name="file">Name of remote file.</param>
            <returns>
            Time of creation.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetDirectoryCreationTime(System.String)">
            <summary>
            Gets the creation time for a directory.
            </summary>
            <param name="directory">Name of directory.</param>
            <returns>
            Time of creation.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetFileAccessTime(System.String)">
            <summary>
            Gets the last access time for a file.
            </summary>
            <param name="file">Name of remote file.</param>
            <returns>
            DateTime for last access.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetDirectoryAccessTime(System.String)">
            <summary>
            Gets the accesstime for a directory.
            </summary>
            <param name="directory">Directory to get access time for.</param>
            <returns>
            DateTime for last access.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetFileWriteTime(System.String)">
            <summary>
            Gets the last write time for the remote file.
            </summary>
            <param name="file">Name of remote file.</param>
            <returns>
            Last write time.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetDirectoryWriteTime(System.String)">
            <summary>
            Gets the last write time for a directory.
            </summary>
            <param name="directory">Name of directory.</param>
            <returns>
            Last write time.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetLocalPath(System.String)">
            <summary>
            Gets the combined path from name and LocalDirectory.
            </summary>
            <param name="name">Filename.</param>
            <returns>Complete local path.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetRemotePath(System.String)">
            <summary>
            Gets the combined path from name and RemoteDirectory.
            </summary>
            <param name="name">Name of file or directory.</param>
            <returns>Combined path.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetSize(System.String)">
            <summary>
            Gets the size of a file.
            </summary>
            <param name="name">Name of file.</param>
            <returns>
            The size of the file in bytes.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.PutDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Puts a directory from the local computer to the filesytem of
            the controller.
            </summary>
            <param name="localDirectory">Name of local directory.</param>
            <param name="remoteDirectory">Name of remote directory.</param>
            <param name="overwrite">true to overwrite remote
                                    directory if already present.</param>
            
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.PutDirectory(System.String,System.String)">
            <summary>
            Puts a directory from the local computer to the filesytem of
            the controller.
            </summary>
            <param name="localDirectory">Name of local directory.</param>
            <param name="remoteDirectory">Name of remote directory.</param>
            
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.PutDirectory(System.String,System.Boolean)">
            <summary>
            Puts a directory from the local computer to the filesytem of
            the controller.
            </summary>
            <param name="localDirectory">Name of local directory.</param>
            <param name="overwrite">true to overwrite remote
                                    directory if already present.</param>
            
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.PutDirectory(System.String)">
            <summary>
            Puts a directory from the local computer to the filesytem of
            the controller.
            </summary>
            <param name="localDirectory">Name of local directory.</param>
            
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.PutFile(System.String,System.String,System.Boolean)">
            <summary>
            Stores a file from the local system to the Robot Controller.
            </summary>
            <param name="localFile">Name of a file to send from the
                                    local system.</param>
            <param name="remoteFile">Name of the file to create on the
                                     Robot Controller. </param>
            <param name="overwrite">true, to overwrite existing file.</param>
            
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.PutFile(System.String,System.String)">
            <summary>
            Stores a file from the local system to the Robot Controller.
            </summary>
            <param name="localFile">Name of a file to send from the
                                    local system.</param>
            <param name="remoteFile">Name of the file to create on the
                                     Robot Controller. </param>
            
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.PutFile(System.String,System.Boolean)">
            <summary>
            Stores a file from the local system to the Robot Controller.
            </summary>
            <param name="localFile">Name of a file to send from the
                                    local system.</param>
            <param name="overwrite">true, to overwrite existing file.</param>
            
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.PutFile(System.String)">
            <summary>
            Stores a file from the local system to the Robot Controller.
            </summary>
            <param name="localFile">Name of a file to send from the
                                    local system.</param>
            
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.RemoveDirectory(System.String,System.Boolean)">
            <summary>
            Removes the specified directory from Robot Controller.
            </summary>
            <param name="path">Path of the directory to be removed.</param>
            <param name="recursive">True to remove all directories
                                    recursively.</param>
            
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.RemoveDirectory(System.String)">
            <summary>
            Removes the specified directory from Robot Controller.
            </summary>
            <param name="path">Path of the directory to be removed.</param>
            
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.RemoveFile(System.String)">
            <summary>
            Deletes the specified file from the Robot Controller.
            </summary>
            <param name="path">Name of the file to remove.</param>
            
            <remarks>
            Requires the UAS_WRITE_FTP <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="grant"/>.
            </remarks>                                                                                     
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.RenameDirectory(System.String,System.String)">
            <summary>
            Renames the specified directory on the Robot Controller.
            </summary>
            <param name="existingDirectory">Name of the directory to be
                                            renamed. </param>
            <param name="newName">New name of the directory.</param>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="UAS_WRITE_FTP"/>
            and the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grants. 
            </remarks>                                                                              
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.RenameFile(System.String,System.String)">
            <summary>
            Renames the specified file on the Robot Controller.
            </summary>
            <param name="existingFile">Name of the file to be renamed. </param>
            <param name="newName">New name of the file.</param>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="UAS_WRITE_FTP"/>
            and the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grants. 
            </remarks>                                                                              
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.GetFilesAndDirectories(System.String)">
            <summary>
            Returns the info objects of files and directories on the
            Robot Controller that match the specified search pattern.
            To get the list of files and directories for real controllers, 
            pass the search pattern as "*.*".
            </summary>
            <param name="searchPattern">The search string to match
                                        against the names of files in
                                        path.
                                        </param>
            <returns>
            An array of <see cref="T:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo"/> objects
            matching the search criteria.
            
            
            </returns>
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="UAS_READ_FTP"/>
            grant.
            </remarks>                                                                            
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.RemoteDirectory">
            <summary> 
            Gets or set the directory on the Robot Controller.
            </summary>
            <value>The text associated to the remote directory.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.FileSystem.LocalDirectory">
            <summary> 
            Gets or set the directory on the local system.
            </summary>
            <value>The text associated to the local directory.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.FileSystemDomain.FileSystemException">
            <summary>
            Objects of this class is thrown whenever an exception occurs
            during some FileOperation, it always contains the local and remote
            paths involved in the call.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemException.#ctor(System.String,System.Exception,System.String,System.String)">
            <summary>
            Initializes a new FileSystemException object.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">InnerException.</param>
            <param name="localPath">LocalPath.</param>
            <param name="remotePath">RemotePath.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new FileSystemException object. Only used for
            deserialization, see MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath">
            <summary>
            Utility class for file system path operations.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath.Prefix">
            <summary>
            Prefix for controller paths.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath.Separator">
            <summary>
            Separator char.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath.Backslash">
            <summary>
            Backslash.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath.ExtensionSeparator">
            <summary>
            Extension separator.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath.SeparatorString">
            <summary>
            Separator string.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath.PrefixedSeparator">
            <summary>
            Prefixed separator.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath.Combine(System.String,System.String)">
            <summary>
            Combines two paths into a new path. 
            </summary>
            <param name="path1">First part of path.</param>
            <param name="path2">Second part of path.</param>
            <returns>New path.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath.GetDirectoryPath(System.String)">
            <summary>
            Returns the path to the parent direcotory
            </summary>
            <param name="path">Path to get parent directory from.</param>
            <returns>The path to the directory.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath.GetFullPath(System.String)">
            <summary>
            Appends the ctrl: prefix to the string if the 
            path currently isn't correctly formatted for the controller.
            </summary>
            <param name="path">Path to correct.</param>
            <returns>A correct path string.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath.GetExtensionFromPath(System.String)">
            <summary>
            Gets the extension of a file, returns an empty
            string if the file doesn't have an extension
            </summary>
            <param name="path">path to get extension from</param>
            <returns>the extension of the file</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemPath.GetNameFromPath(System.String)">
            <summary>
            Returns the name of a file system entry, ie. 
            For a path to a file, it returns the filename and
            for a path to a directoru it returns the directory name
            </summary>
            <param name="path">path to extract name from</param>
            <returns>the name of the entry</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.FileSystemDomain.FileType">
            <summary>
            Predefined file types in the Robot Controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.FileSystemDomain.FileType.Directory">
            <summary>Directory.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.FileSystemDomain.FileType.File">
            <summary>File.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.FileSystemDomain.FileType.Unknown">
            <summary>Unknown.</summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemFactory.CreateInfo(ABB.Robotics.Controllers.FileSystemDomain.FileSystem,ABB.Robotics.Internal.ControllerFileEntry)">
            <summary>
            Creates an info object from the supplied entry.
            </summary>
            <param name="fileSystem">Filesystem object.</param>		
            <param name="entry">Entry to create info object from.</param>
            <returns>The info object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.FileSystemDomain.FileSystemFactory.CreateInfo(ABB.Robotics.Controllers.FileSystemDomain.FileSystem,System.Collections.Generic.List{ABB.Robotics.Internal.ControllerFileEntry})">
            <summary>
            Creates an array of info objects from the supplied entries.
            </summary>
            <param name="fileSystem">Filesystem object.</param>
            <param name="entries">Entres to create from. </param>
            <returns>New info objects.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo">
            <summary>
            Represents a file system entry in the Robot Controller
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo.CreationTime">
            <summary> Gets the creation time of the current <see cref="T:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo"/> object.</summary>
            <value>The creation date and time of the current <see cref="T:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo"/> object.</value>
            <exception cref="T:ABB.Robotics.GeneralException"></exception>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo.Exists">
            <summary> Gets a value indicating whether the file or directory exists..</summary>
            <value><b>true</b> if the file or directory exists; otherwise, <b>false</b>.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo.Extension">
            <summary> Gets the string representing the extension part of the file.</summary>
            <value>A string containing the <see cref="T:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo"/> extension.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo.FullName">
            <summary> Gets the full path of the directory or file.</summary>
            <value>A string containing the full path.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo.LastAccessTime">
            <summary>Gets the time the current file or directory was last accessed.</summary>
            <value>The time that the current file or directory was last accessed.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo.LastWriteTime">
            <summary>Gets the time when the current file or directory was last written to.</summary>
            <value>The time the current file was last written.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileSystemInfo.Name">
            <summary> 
            For files, gets the name of the file. For directories, gets the name of the directory.
            </summary>
            <value>A string containing the name of the directory or the file, including the file name extension.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.FileSystemDomain.ControllerFileInfo">
            <summary>
            Represents a file in the Robot Controller
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.FileSystemDomain.ControllerDirectoryInfo">
            <summary>
            Represents a directory in the Robot Controller
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Grant">
            <summary>
            Abstracts a controller grant.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Grant.#ctor(System.String,System.String)">
            <summary>
            Creates a Grant object.
            </summary>
            <param name="name">name of grant</param>
            <param name="value">value of grant</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Grant.#ctor(System.String)">
            <summary>
            Creates a Grant object.
            </summary>
            <param name="name">name of grant</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Grant.Equals(ABB.Robotics.Controllers.Grant)">
            <summary>
            Equalses the specified g.
            </summary>
            <param name="g">The g.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Grant.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            	<see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Grant.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Grant.op_Equality(ABB.Robotics.Controllers.Grant,ABB.Robotics.Controllers.Grant)">
            <summary>
            Operator ==s the specified g1.
            </summary>
            <param name="g1">The g1.</param>
            <param name="g2">The g2.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Grant.op_Inequality(ABB.Robotics.Controllers.Grant,ABB.Robotics.Controllers.Grant)">
            <summary>
            Operator !=s the specified g1.
            </summary>
            <param name="g1">The g1.</param>
            <param name="g2">The g2.</param>
            <returns></returns>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.AdministrateSystem">
            <summary>
            Gives access to perform the following: Install new system,
            P-start, I-start, X-start, C-start, Select System, Install
            system from device. This grant gives full FTP access, that
            is, the grant gives the same rights as <see cref="F:ABB.Robotics.Controllers.Grant.ReadFtp" text="Read"/>
            access to controller disks and <see cref="F:ABB.Robotics.Controllers.Grant.WriteFtp" text="Write"/>
            access to controller disks. 
            </summary>                                                                                              
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.AuthenticationSystemAdministration">
            <summary>
            Gives access to read and write the UAS configuration, that is to read, add, 
            remove and modify UAS users and groups.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.BackupController">
            <summary>
            Gives access to perform a backup and to save modules, programs and configuration files.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.CalibrateRobot">
            <summary>
            Gives access to perform the following: Fine calibrate mechanical unit, 
            Calibrate base frame, Update/clear SMB data. Note! Frame calibration (tool, wobj) 
            requires the grant RAPID code. Manual offset of mechanical unit calibration 
            data and loading new calibration data from file require grant Modify configuration.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.ClearEventLog">
            <summary>
            Gives access to delete messages in the controller Event Log.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.DebugRapid">
            <summary>
            Gives access to perform the following: Move PP to routine, Move PP to cursor, 
            HoldToRun, Activate/deactivate RAPID tasks, Request write access from the FlexPendant, 
            Acknowledge Auto mode without restoring simulated I/O signals or deactivated tasks, 
            Enable/disable non-motion execution
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.DecreaseProductionSpeed">
            <summary>
            Gives acces to decrease speed from 100% in Auto mode. 
            This grant is not required if speed already is below 100%, or controller is in Manual mode.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.EditRapidModule">
            <summary>
            Gives access to perform the following: Modify code in existing RAPID modules, Frame 
            calibration (tool, workobj), Commit ModPos/HotEdit positions to current values, Rename program.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.ExecuteRapid">
            <summary>
            Gives access to perform the following: Start/step program (stop is always allowed), 
            Move PP to Main, Execute service routines.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.FullAccess">
            <summary>
            This grant includes all controller grants, also new grants added in future 
            RobotWare versions. The grant does not include any application grants, nor 
            the "Safety Controller configuration" grant.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.HotEditRapid">
            <summary>Hot Edit</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.ModifyRapidPosition">
            <summary>
            Gives access to perform the following: Modify or teach positions in RAPID code (ModPos), 
            During execution modify positions in RAPID code single points or as a path (HotEdit), 
            Restore ModPos/HotEdit positions to original, Modify current value of any RAPID variable. 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.ModifyRapidDataValue">
            <summary>
            Gives access to modify current value of any RAPID variable. The grant is a subset 
            of grant "Perform ModPos and HotEdit".<see cref="F:ABB.Robotics.Controllers.Grant.ModifyRapidPosition"/>
            </summary>
            <remarks>Supported from RW 5.07.03</remarks>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.ModifyRapidProgram">
            <summary>Modify Rapid program</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.WriteIO">
            <summary>
            Gives access to perform the following: Set I/O signal value, Set signal as simulated 
            and remove simulation, Set I/O unit and bus as enabled/disabled
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.ReadFtp">
            <summary>
            Gives external read access to controller disks. This grant is
            \only valid for explicit disk access, for example with an FTP
            client or the File Manager of RoboStudio Online.
            
            
            </summary>
            <remarks>
            It is possible, for example, to load a program from /hd0a
            without this grant. To this effect the following grants also
            allow file system browsing; <see cref="F:ABB.Robotics.Controllers.Grant.LoadRapidProgram" text="UAS_RAPID_LOADPROGRAM"/>,
            <see cref="F:ABB.Robotics.Controllers.Grant.WriteConfiguration" text="UAS_CFG_WRITE"/>,
            <see cref="F:ABB.Robotics.Controllers.Grant.BackupController" text="UAS_BACKUP"/>
            and <see cref="F:ABB.Robotics.Controllers.Grant.RestoreController" text="UAS_RESTORE"/>.
            </remarks>                                                                                                              
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.RemoteWarmStart">
            <summary>
            Gives access to perform warm start and shutdown (S-start) from a remote location. 
            No grant is required to perform warm start via a local device, as for example the FlexPendant.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.RestoreController">
            <summary>
            Gives access to restore backup and perform B-start.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.WriteConfiguration">
            <summary>
            Gives access to modify the configuration database, that is load configuration files, 
            change system parameter values and add/delete instances.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.WriteControllerProperty">
            <summary>
            Gives access to set controller name, controller ID and system clock.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.WriteFtp">
            <summary>
            Gives external write access to controller disks. 
            This grant is only valid for explicit disk access, for example with an 
            FTP	client or the File Manager of RoboStudio Online. It is possible, 
            for example, to save a program to the controller disk or perform a 
            backup without this grant.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.LoadRapidProgram">
            <summary>
            Gives access to load/delete modules and program.
            </summary>    
        </member>
        <member name="F:ABB.Robotics.Controllers.Grant.SafetyControllerConfiguration">
            <summary>
            Gives access to perform a configuration of the Safety Controller. 
            Only valid for the PSC-option. This grant is not included in the "Full access" grant.
            <see cref="F:ABB.Robotics.Controllers.Grant.FullAccess"/>
            </summary>
            <remarks>Supported from RW 5.07</remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.Grant.Name">
            <summary>
            Gets the name of the Grant.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Grant.Value">
            <summary>
            Gets the value of the Grant.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.GrantDemandRejectedException">
            <summary>
            An instance of this class is thrown when a DemandGrant operations fails.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.GrantDemandRejectedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.GrantDemandRejectedException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.GrantDemandRejectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.GrantDemandRejectedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.GrantDemandRejectedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.GrantDemandRejectedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.GrantDemandRejectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.GrantDemandRejectedException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.GrantStringComparer">
            <summary>
            Compares string array against single strings used to sort grant 
            arrays and also to determine if a user has a grant.
            </summary>  
        </member>
        <member name="T:ABB.Robotics.Controllers.Hosting.HostControllerLink">
            <summary>
            An element in a linked list that contains all controllers
            that are refered be the host.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostControllerLink.#ctor(System.Guid,ABB.Robotics.Controllers.Controller)">
            <summary>
            Initializes a controller link object. Next has to be 
            set through the Next property.
            </summary>
            <param name="systemId">SystemId.</param>
            <param name="controller">Controller.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.HostControllerLink.Controller">
            <summary>
            Gets the external controller object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.HostControllerLink.Next">
            <summary>
            Gets/Sets the host to controller link.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.HostControllerLink.SystemId">
            <summary>
            Gets the system id.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Hosting.HostingServices">
            <summary>
            This class is the main entrypoint for a host into
            the CAPI internal functions. It can be used to extend
            and alter the inner workings of the API.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Hosting.INotify">
            <summary>
            This is a mirrored interface. It is implemented both by the host and api. 
            It contains method for notifications and service requests.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.INotify.OperationStarted(ABB.Robotics.Controllers.Hosting.NotifyOperation)">
            <summary>
            This method is called when a operation is started
            the client may select to refuse it by neglecting
            the call using false as return value. 
            </summary>
            <param name="operation">Operation object.</param>
            <returns>True to allow operation, otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.INotify.OperationCompleted(ABB.Robotics.Controllers.Hosting.NotifyOperation,System.Boolean)">
            <summary>
            The operation has completed, note must be the SAME object
            as in OperationStarted( ... )
            </summary>
            <param name="operation">Operation.</param>
            <param name="success">True if successful, otherwise false.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.#ctor">
            <summary>
            Private ctor to avoid external creation
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.RegisterHost(ABB.Robotics.Controllers.Hosting.IHost)">
            <summary>
            Register the host.
            </summary>
            <param name="host">Host object.</param>
            <returns>The service provider for the api.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.DemandNoHost">
            <summary>
            Demands that no host is registered.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.DemandValidHost(ABB.Robotics.Controllers.Hosting.IHost)">
            <summary>
            Verifies that the host parameter is valid and ok
            for further use.
            </summary>
            <param name="host">Host to check.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.GetHost">
            <summary>
            Gets the host object if registered.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.GetInstance">
            <summary>
            Gets the HostingService instance.
            </summary>
            <returns>The singletonn instance.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.DemandReferedController(System.Guid)">
            <summary>
            Verifies that the controller is present in the
            list of external controllers. If it isn't this
            method throws an InvalidOperationException.
            </summary>
            <param name="id">System id to check for.</param>
            <returns>The internal controller for the refered controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.HandleOperationCompleted(ABB.Robotics.Controllers.Hosting.NotifyOperation,System.Boolean,ABB.Robotics.Controllers.Internal.Controller)">
            <summary>
            Handles a operation completed-"event".
            </summary>
            <param name="operation">Operation.</param>
            <param name="success">Success flag.</param>
            <param name="controller">Controller object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.HandleOperationStarted(ABB.Robotics.Controllers.Hosting.NotifyOperation,ABB.Robotics.Controllers.Internal.Controller)">
            <summary>
            Handles the started-"event".
            </summary>
            <param name="operation">Operation.</param>
            <param name="controller">Controller.</param>
            <returns>True to continue operation.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.HandleLogoffOperationCompleted(ABB.Robotics.Controllers.Hosting.LogoffOperation,System.Boolean,ABB.Robotics.Controllers.Internal.Controller)">
            <summary>
            Handles any logoff operation.
            </summary>
            <param name="operation">Operation object.</param>
            <param name="success">Operation success.</param>
            <param name="controller">Controller object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.HandleLogonOperationCompleted(ABB.Robotics.Controllers.Hosting.LogonOperation,System.Boolean,ABB.Robotics.Controllers.Internal.Controller)">
            <summary>
            Handles the completion of a logon operation.
            </summary>
            <param name="operation">LogonOperation object.</param>
            <param name="success">Success flag.</param>
            <param name="controller">Controller.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.HandleMastershipReleaseOperationCompleted(ABB.Robotics.Controllers.Hosting.MastershipReleaseOperation,System.Boolean,ABB.Robotics.Controllers.Internal.Controller)">
            <summary>
            Handles the mastership release operation completed.
            </summary>
            <param name="op">The mastership release operation.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.HandleMastershipRequestOperationCompleted(ABB.Robotics.Controllers.Hosting.MastershipRequestOperation,System.Boolean,ABB.Robotics.Controllers.Internal.Controller)">
            <summary>
            Handles the completion of a host mastership operation.
            </summary>
            <param name="op">The mastership operation.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.RegisterHostInternal(ABB.Robotics.Controllers.Hosting.IHost)">
            <summary>
            Register a host for the api, must be called prior to 
            ANY other calls within the api impl. 
            </summary>
            <param name="host">Host object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.ReferController(System.Guid)">
            <summary>
            Links the Controller object specified by the id to the host.
            </summary>
            <param name="id">Controller to refer to avoid collection.</param>
            <returns>The internal controller object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.ServiceIsSupported(System.Type)">
            <summary>
            Checks if service is supported by this object. We only search
            the implemented interfaces of this object.
            </summary>
            <param name="service">Service to return interface for.</param>
            <returns>True if the service is supported.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.TraceCurrentHost">
            <summary>
            Traces information about the current host.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Service provider implementation. This only supports
            services implemented as interfaces.
            </summary>
            <param name="serviceType">Service interface to request.</param>
            <returns>Service object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.ABB#Robotics#Controllers#Hosting#INotify#OperationStarted(ABB.Robotics.Controllers.Hosting.NotifyOperation)">
            <summary>
            Handles all operation started notifications, default
            all operations are allowed to continue.
            </summary>
            <param name="operation">Operation.</param>
            <returns>True to continue, otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.HostingServices.ABB#Robotics#Controllers#Hosting#INotify#OperationCompleted(ABB.Robotics.Controllers.Hosting.NotifyOperation,System.Boolean)">
            <summary>
            Handles all operation completed operations.
            </summary>
            <param name="operation">Operation that has completed.</param>
            <param name="success">True if the operation succeeded, otherwise false.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.HostingServices.ServiceProvider">
            <summary>
            Gets the service provider impl.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Hosting.IHost">
            <summary>
            This is the main interface of a host object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.IHost.Name">
            <summary>
            Gets the name of the host.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.IHost.Version">
            <summary>
            Gets the version of the host.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Hosting.LogoffOperation">
            <summary>
            A logoff operation with the host.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Hosting.UasOperation">
            <summary>
            Base class for Uas operation.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Hosting.NotifyOperation">
            <summary>
            class for all notification types.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.NotifyOperation.#ctor(System.Guid,ABB.Robotics.Controllers.Hosting.INotify)">
            <summary>
            Initializes a NotifyOperation object.
            </summary>
            <param name="id">System id.</param>
            <param name="notify">Notification object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.NotifyOperation.Complete">
            <summary>
            Sets the complete flag to indicate success.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.NotifyOperation.Dispose">
            <summary>
            Completes the operation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.NotifyOperation.DemandValidParameters(System.Guid)">
            <summary>
            Checks that the id is a valid Guid and that
            the notify reference refers to a valid object.
            </summary>
            <param name="id">Guid to check.</param>    
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.NotifyOperation.OpName">
            <summary>
            Gets the OpName for an operation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.NotifyOperation.SystemId">
            <summary>
            Gets the system id.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.UasOperation.#ctor(ABB.Robotics.Controllers.UserInfo,System.Guid,ABB.Robotics.Controllers.Hosting.INotify)">
            <summary>
            Initializes a new Uas operation.
            </summary>
            <param name="user">UserInfo.</param>
            <param name="id">System Id.</param>
            <param name="destination">Destination object.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.UasOperation.User">
            <summary>
            Gets the user.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.LogoffOperation.#ctor(ABB.Robotics.Controllers.UserInfo,System.Guid,ABB.Robotics.Controllers.Hosting.INotify)">
            <summary>
            Initializes a new LogoffOperation.
            </summary>
            <param name="user">User to logon.</param>
            <param name="id">System id.</param>
            <param name="destination">Destination object.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Hosting.LogonOperation">
            <summary>
            A logon operation with the host.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.LogonOperation.#ctor(ABB.Robotics.Controllers.UserInfo,System.Guid,ABB.Robotics.Controllers.Hosting.INotify)">
            <summary>
            Initializes a new LogonOperation.
            </summary>
            <param name="user">User to logon.</param>
            <param name="id">System id.</param>
            <param name="destination">Destination object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.LogonOperation.Complete">
            <summary>
            Overrides the default complete, this is not a valid operation 
            for Logon operations since it requires a user id for completion.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.LogonOperation.Complete(System.Int32)">
            <summary>
            Completes the logon operation with the userid
            for the logged on user.
            </summary>
            <param name="userId">User id.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.LogonOperation.UserId">
            <summary>
            Gets the userId.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Hosting.MastershipReleaseOperation">
            <summary>
            A mastership release operation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.MastershipReleaseOperation.#ctor(ABB.Robotics.Controllers.Hosting.MastershipResources,System.Guid,ABB.Robotics.Controllers.Hosting.INotify)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.Hosting.MastershipReleaseOperation"/> class.
            </summary>
            <param name="resources">The resources.</param>
            <param name="id">The id.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.MastershipReleaseOperation.Resources">
            <summary>
            Gets the the resources.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.Hosting.MastershipRequestOperation">
            <summary>
            A mastership operation with the host.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Hosting.MastershipRequestOperation.#ctor(ABB.Robotics.Controllers.Hosting.MastershipResources,System.Guid,ABB.Robotics.Controllers.Hosting.INotify)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.Hosting.MastershipRequestOperation"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="destination">The destination.</param>
            <param name="resources">The masterships resources that are requested.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Hosting.MastershipRequestOperation.Resources">
            <summary>
            Gets the resources.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.Hosting.MastershipResources">
            <summary>
            Flags for all available mastership resources.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Hosting.MastershipResources.Rapid">
            <summary>
            Rapid resource.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Hosting.MastershipResources.Configuration">
            <summary>
            Configuration resource.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Hosting.MastershipResources.Motion">
            <summary>
            Motion resource.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Hosting.MastershipResources.InfoStream">
            <summary>
            InfoStream resource.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Hosting.MastershipResources.All">
            <summary>
            All available resources.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.CompositeString">
            <summary>
            This class encapsulates the transformatation from a EventLog title
            or text containing format information.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CompositeString.#ctor">
            <summary>
            Private constructor to avoid external creation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CompositeString.Parse(System.Xml.XmlReader)">
            <summary>
            Parses the current element into a composite string. The
            name of the element is ignored.
            </summary>
            <param name="reader">Reader to parse.</param>
            <returns>The composite string object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CompositeString.ToString(System.Object[])">
            <summary>
            Get the string representation of this object.
            </summary>
            <param name="args">The args.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CompositeString.DemandElement(System.Xml.XmlReader)">
            <summary>
            Demands that the current node type is element.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CompositeString.DispatchReader(System.Xml.XmlReader,System.Text.StringBuilder)">
            <summary>
            Dispatches the current reader object to the correct handler.
            </summary>
            <param name="builder">The StringBuilder instance.</param>
            <param name="reader">The XmlReader object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CompositeString.ParseArg(System.Xml.XmlReader,System.Text.StringBuilder)">
            <summary>
            Parses the arg element.
            </summary>
            <param name="reader">The reader.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CompositeString.ParseElement(System.Xml.XmlReader,System.Text.StringBuilder)">
            <summary>
            Starts the recursive parsing.
            </summary>
            <param name="reader">The Reader object.</param>
            <param name="builder">The StringBuilder.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.IControllerBoundObject">
            <summary>
            Defines the interface of a controller bound object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.ControllerBoundObject">
            <summary>
            This class is the base class of all objects that are
            bound to and internal controller instance.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.CopyDirectoryCmd">
            <summary>
            Copies a directory locally on the controller.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.FileSystemCmd">
            <summary>
            This class is the base class of all commands
            that can be executed against the remote filesystem.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystemCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Implementers must override this method to enable excution    
            </summary>
            <param name="filesystem">FileSystem.</param>    
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystemCmd.RaiseCallback(System.Exception)">
            <summary>
            Raises the _callback.
            </summary>
            <param name="ex">Exception object if operation failed, otherwise null.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.FileSystemCmd.Callback">
            <summary>
            Gets/Sets the callback for this command.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.FileSystemCmd.Exception">
            <summary>
            Gets the exception object if the 
            operation has failed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.FileSystemCmd.State">
            <summary>
            Gets/Sets the state for this command.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.FileSystemCmd.CmdWaitHandle">
            <summary>
            Very lightweight waithandle that uses 
            object and Monitor to implement waithandle behavior.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.FileSystemCmd.CallerScope">
            <summary>
            Used to create a scope for the worker thread, where it can 
            act as within the context of the caller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CopyDirectoryCmd.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initiates a CopyDirectoryCmd object.
            </summary>
            <param name="source">Source path.</param>
            <param name="destination">Destination path.</param>
            <param name="overwrite">True to overwrite existing destination directory.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CopyDirectoryCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Executes the command.
            </summary>
            <param name="filesystem">File system object.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.CopyFileCmd">
            <summary>
            Copies a file locally on the controller without any interaction
            with the local computer; thereby removing the need for double-
            buffering and get/put operation pair.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CopyFileCmd.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new CopyFileCmd object.
            </summary>
            <param name="source">Source file.</param>
            <param name="destination">Destination file.</param>
            <param name="overwrite">True to overwrite any existing file.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CopyFileCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Copies the file on the controller.
            </summary>
            <param name="filesystem">Target filesystem.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.CreateDirectoryCmd">
            <summary>
            Creates a directory on the filesystem of the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CreateDirectoryCmd.#ctor(System.String)">
            <summary>
            Initializes a CreateDirectoryCmd.
            </summary>    
            <param name="path">Root of new directory.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.CreateDirectoryCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Creates the directory.
            </summary>
            <param name="filesystem">FileSystem object.</param>    
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.CreateDirectoryCmd.Entry">
            <summary>
            Gets the directory entry for the created dir,
            null if execute failed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.DevicesDataAccessObject">
            <summary>
            Base class for devices domain data access objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.DevicesDataAccessObject.CreateUrl(ABB.Robotics.Controllers.Internal.Controller,System.Boolean,System.String[])">
            <summary>
            Creates an url from the controller url and the parts
            provided as seconds parameter.
            </summary>
            <param name="controller">Url of controller.</param>
            <param name="ids">Array of ids.</param>
            <param name="isMechUnit">Set to true for mech unit domain</param>
            <returns>New url object or controller if ids.Length == 0.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.IO.IOBus">
            <summary>
            Data access object for bus.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOBus.GetType(System.String)">
            <summary>
            Gets the type of the bus.
            </summary>
            <param name="instance">Bus instance.</param>
            <returns>The type of the bus.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOBus.GetState(System.String)">
            <summary>
            Gets the state of the bus.
            </summary>
            <param name="instance">Bus instance.</param>
            <returns>The state of the bus.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.IO.IOUnit">
            <summary>
            Data access object for unit.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOUnit.GetType(System.String)">
            <summary>
            Gets the type of the unit.
            </summary>
            <param name="instance">Unit instance.</param>
            <returns>The type of the unit.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOUnit.GetBus(System.String)">
            <summary>
            Gets the bus of the unit.
            </summary>
            <param name="instance">Unit instance.</param>
            <returns>The type of the unit.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOUnit.GetAddress(System.String)">
            <summary>
            Gets the address of the unit.
            </summary>
            <param name="instance">Unit instance.</param>
            <returns>The type of the unit.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.IO.IOBuses">
            <summary>
            Data access layer for IOUnits
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOBuses.GetBuses">
            <summary>
            Gets all IO units.
            </summary>
            <returns>Array of units.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.IO.IOUnits">
            <summary>
            Data access layer for IOUnits
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOUnits.GetUnits">
            <summary>
            Gets all IO units.
            </summary>
            <returns>Array of units.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.MainComputerDevice">
            <summary>
            Data access class for the main computer device.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.MainComputerDevice.#ctor(ABB.Robotics.Controllers.Internal.Controller)">
            <summary>
            Initializes a MainComputer device object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.MainComputerDevice.GetCpuTemperature">
            <summary>
            Gets the temperature of the main processor.
            </summary>
            <returns>Temp of the main cpu.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.MainComputerDevice.GetBoardType">
            <summary>
            Gets the type of board.
            </summary>
            <returns>Type of board as string.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.MainComputerDevice.GetCpuInfo">
            <summary>
            Information about the Cpu.
            </summary>
            <returns>Cpu info.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.MainComputerDevice.GetRamSize">
            <summary>
            Size of ram.
            </summary>
            <returns>Size of ram.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice">
            <summary>
            Data access class for the MechanicalUnit device object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice.#ctor(ABB.Robotics.Controllers.Internal.Controller,System.String)">
            <summary>
            Initializes a mechanical unit data access object.
            </summary>
            <param name="controller">Controller with unit.</param>
            <param name="id">From RW5.10, Name if mechanical unit, from devices.xml.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice.GetCalenderServiceInterval">
            <summary>
            Gets the interval between services.
            </summary>
            <returns>The service interval in years.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice.GetCalenderServiceWarningLevel">
            <summary>
            Gets the warninglevel for service.
            </summary>
            <returns>The warning level in percent.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice.GetGearboxServiceWarningLevel">
            <summary>
            Gets the warninglevel for the gearbox.
            </summary>
            <returns>Warninglevel for gearbox.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice.GetElapsedCalenderTimeSinceLastService">
            <summary>
            Gets the calender time elapsed since last service.
            </summary>
            <returns>Hours since last service.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice.GetElapsedProductionTime">
            <summary>
            Gets the elapsed production time since last sis reset.
            </summary>
            <returns>Hours since last SIS reset.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice.GetElapsedProductionTimeSinceLastService">
            <summary>
            Gets the elapsed production time since last service.
            </summary>
            <returns>Hours since last service.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice.GetLastStart">
            <summary>
            Gets the last start of the controller.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice.GetProductionServiceInterval">
            <summary>
            Gets the interval between services.
            </summary>
            <returns>The service interval in hours.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice.GetProductionServiceWarningLevel">
            <summary>
            Gets the warning level for production.
            </summary>
            <returns>The warning level in percent.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DirectoryExistsCmd">
            <summary>
            Checks if a specified directory exists or not.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DirectoryExistsCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Implements the command.
            </summary>
            <param name="filesystem">Target file system.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.DirectoryExistsCmd.Exists">
            <summary>
            Gets flag indicating existance
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DownloadDirectoryCmd">
            <summary>
            Downloads a directory from the controller to
            the local computer.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DownloadDirectoryCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Executes the command.
            </summary>
            <param name="filesystem">Target file system.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DownloadDirectoryCmd.DemandValidDestination">
            <summary>
            Verifies that the destination folder doesn't exists,
            and removes it if the overwrite flag is true.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DownloadDirectoryCmd.DemandValidSource(Adapters.FileBrowser)">
            <summary>
            Verifies that the source is valid.
            </summary>
            <param name="browser">FileBrowser object.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DownloadFileCmd">
            <summary>
            Downloads a file from the controller
            to the local filesystem.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DownloadFileCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            copies the file from the controller to the local computer
            </summary>
            <param name="filesystem">Target filesystem.</param> 
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.DownloadFileCmd.Destination">
            <summary>
            Gets the destination file.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.IUnpack`1">
            <summary>
            Any event arg class can implement this interface to 
            interact with the EventArgs activation process.
            </summary>
            <typeparam name="TAdapter">The Adapter.</typeparam>  
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IUnpack`1.Unpack(ABB.Robotics.Controllers.Internal.RawEventData,ABB.Robotics.Controllers.Internal.Controller,`0)">
            <summary>
            Unpacks data into the current object.
            </summary>
            <param name="data">The native event data.</param>
            <param name="ctrl">The current controller.</param>
            <param name="adapter">The adapter object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Event`2.Subscriber.Add(System.Object,System.EventHandler{`1},System.Boolean)">
            <summary>
            Adds a new handler, and calls the adapter if needed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="handler">The handler.</param>
            <param name="internal">Internal flag.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Event`2.Subscriber.Add(System.Object,System.EventHandler{`1},System.Boolean,ABB.Robotics.Controllers.EventPriority)">
            <summary>
            Adds a new handler, and calls the adapter if needed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="handler">The handler.</param>
            <param name="internal">Internal flag.</param>
            <param name="priority">Priority level.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Event`2.Subscriber.Remove(System.EventHandler{`1},System.Boolean)">
            <summary>
            Removes a handler, calls the adapter if needed.
            </summary>
            <param name="handler">The handler.</param>
            <param name="internal">Internal flag.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.FileExistsCmd">
            <summary>
            Checks if a file exists on the controller.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.FileInfoScope">
            <summary>
            "SmartPointer" for FileInfo objects, using this will
            guarantuee that the file will be deleted when dispose is called.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.FileInfoScope.File">
            <summary>
            Gets a ref to the FileInfo object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.GetEntryCmd">
            <summary>
            Gets a ControllerFileEntry object for a file entry.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.GetEntryCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Executes the command.
            </summary>
            <param name="filesystem">Target filesystem.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.GetEntryCmd.Entry">
            <summary>
            Gets the entry.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.IOBus">
            <summary>
            An internal IOBus object
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOBus.GetAdapter">
            <summary>
            Gets the current unit adapter object.
            </summary>
            <returns>Adapter.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOBus.Url">
            <summary>
            Gets the Url of the bus.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOBus.Type">
            <summary>
            Gets the Type of the bus.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOBus.PhysState">
            <summary>
            Gets the Physical state for this bus.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOBus.LogState">
            <summary>
            Gets the Logical state for this bus.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.IOBusCollection">
            <summary>
            a collection of IOUnit objects
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOBusCollection.Find(System.String)">
            <summary>
            finds a string by name
            </summary>
            <param name="name">name of bus to locate</param>
            <returns>the bus if exist, otherwise null</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.IOUnit">
            <summary>
            An internal IOUnit object
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOUnit.GetPhysicalState">
            <summary>
            Gets the Physical state for this unit.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOUnit.GetLogicalState">
            <summary>
            Gets the Logical state for this unit.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOUnit.GetAdapter">
            <summary>
            Gets the current unit adapter object.
            </summary>
            <returns>Adapter.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOUnit.Subscribe(Adapters.EventId,System.Object,System.EventHandler,System.Boolean)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOUnit.UnpackUnitStateChanged">
            <summary>
            Unpacks the UnitStateChanged, gets the details in UnitStateChangedEventArgs.
            </summary>        
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOUnit.UnpackUnitSignalChanged">
            <summary>
            Unpacks the UnitSignalChanged, gets the details in UnitSignalChangedEventArgs.
            </summary>        
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOUnit.Unsubscribe(System.UInt32)">
            <summary>
            Unsubscribe the event handler for the specified cookie ID.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOUnit.Url">
            <summary>
            Gets the Url of the unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOUnit.Type">
            <summary>
            Gets the Type of the unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOUnit.Bus">
            <summary>
            Gets the Bus for this unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOUnit.Address">
            <summary>
            Gets the Address for this unit.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.IOUnitCollection">
            <summary>
            A collection of IOUnit objects
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOUnitCollection.Find(System.String)">
            <summary>
            Finds a string by name
            </summary>
            <param name="name">name of unit to locate</param>
            <returns>the unit if exist, otherwise null</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.ListDirectoryCmd">
            <summary>
            Performs a ls command on the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ListDirectoryCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Executes a list command on the controller.
            </summary>
            <param name="filesystem">Target filesystem.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.ListDirectoryCmd.Found">
            <summary>
            Gets the matching entries.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.RemoveDirectoryCmd">
            <summary>
            Removes a directory from the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RemoveDirectoryCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Removes the directory if present, otherwise throw
            an DirectoryNotFoundException.
            </summary>
            <param name="filesystem">Target filesysten.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.RemoveFileCmd">
            <summary>
            Removes a file from the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RemoveFileCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Removes the file from the controller.
            </summary>
            <param name="filesystem">Target filesystem.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.RenameCmd">
            <summary>
            Renames a file or directory on the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RenameCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Renames a file or directory on the controller.
            </summary>
            <param name="filesystem">Target file system.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.TypeUtil">
            <summary>
            Utility class for type access.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.TypeUtil.Is(System.Type,System.Type)">
            <summary>
            Executes an is operation based on type objects.
            </summary>
            <param name="check">Type to check.</param>
            <param name="type">The type to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.TypeUtil.Inherits(System.Type,System.Type)">
            <summary>
            Checks if a type inherits another type.
            </summary>
            <param name="check">The type to check.</param>
            <param name="type">The base type to check for.</param>
            <returns>True if check inherits type.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.TypeUtil.Inherits``2">
            <summary>
            Checks if a type inherits another type.
            </summary>
            <typeparam name="T1">Type to check.</typeparam>
            <typeparam name="T2">Type to check for inheritence.</typeparam>
            <returns>True if T1 inherits T2.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.TypeUtil.Implements(System.Type,System.Type)">
            <summary>
            Checks if check implements the @interface.
            </summary>
            <param name="check">Type to check.</param>
            <param name="interface">The inteface to implement.</param>
            <returns>True if check implements @interface.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.TypeUtil.Implements``2">
            <summary>
            Checks if T1 implements the T2 interface.
            </summary>
            <typeparam name="T1">The type to check.</typeparam>
            <typeparam name="T2">The interface to check for.</typeparam>
            <returns>The type.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.UIInstructionInternalChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.UIInstructionInternalChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.Internal.UIInstructionInternalChangedEventArgs"/> class.
            </summary>   
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.UIInstruction">
            <summary>
            Provides the internal UIInstruction interface.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.UIInstruction.#ctor(ABB.Robotics.Controllers.Internal.Controller)">
            <summary>
            Create UIInstruction object.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.Internal.UIInstruction.UIInstructionChanged">
            <summary>
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.UploadDirectoryCmd">
            <summary>
            Uploads a directory from the local computer to the controller filesystem.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.UploadDirectoryCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Executes the command.
            </summary>
            <param name="filesystem">Target file system.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.UploadDirectoryCmd.DemandValidDestination(Adapters.FileBrowser)">
            <summary>
            Verifies that the destination folder is in a valid state.
            </summary>
            <param name="browser">Browser for filesystem.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.UploadDirectoryCmd.DemandValidSource">
            <summary>
            Verifies that the source folder exists.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.UploadDirectoryCmd.Destination">
            <summary>
            Gets the destination of the command.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.UploadFileCmd">
            <summary>
            Uploads file from local computer to controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.UploadFileCmd.Execute(ABB.Robotics.Controllers.Internal.FileSystem)">
            <summary>
            Copies the file.
            </summary>
            <param name="filesystem">Target filesystem.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.UploadFileCmd.Destination">
            <summary>
            Gets the destination file.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.IOBusPhysicalState">
            <summary>
            Represents the current physical state of a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Bus"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.IOBusPhysicalState.PhysicalState">
            <summary> Gets the physical state of the bus. </summary>        
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.IOBusLogicalState">
            <summary>
            Represents the current state of a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Bus"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.IOBusLogicalState.LogicalState">
            <summary> Gets the logical state of the bus. </summary>        
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.Bus">
            <summary>
            Unit data.
            </summary>	
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.Bus.#ctor(ABB.Robotics.Controllers.Controller,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Bus"/> class.
            </summary>
            <param name="controller">The controller.</param>
            <param name="name">The name.</param>    
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Bus.Type">
            <summary>
            Gets the type of the bus
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Bus.PhysicalState">
            <summary>
            Gets the Physical state for this bus.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Bus.LogicalState">
            <summary>
            Gets the Logical state for this bus.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.BusCollection">
            <summary>
            A collection of signal objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.BusCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.BusCollection"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.BusCollection.Add(ABB.Robotics.Controllers.IOSystemDomain.Bus)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Index of value.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.BusCollection.IndexOf(ABB.Robotics.Controllers.IOSystemDomain.Bus)">
            <summary>
            Gets the index of the bus.
            </summary>
            <param name="value">The value.</param>
            <returns>Index of bus if exists; otherwise -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.BusCollection.Insert(System.Int32,ABB.Robotics.Controllers.IOSystemDomain.Bus)">
            <summary>
            Inserts the bus at specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The bus.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.BusCollection.Contains(ABB.Robotics.Controllers.IOSystemDomain.Bus)">
            <summary>
            Determines whether the collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the collection contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.BusCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Bus"/> at the specified index.
            </summary>
            <value>Bus object.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.BusFactory">
            <summary>
            this is a utility class that create instances of Units
            depending on the supplied IOBusType enum
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.BusFactory.Create(System.String,ABB.Robotics.Controllers.Internal.IOBus)">
            <summary>
            Creates a unit object depending on the supplied type.
            </summary>        
            <param name="internalBus">Internal bus object.</param>
            <param name="name">Name of bus.</param>
            <returns>the bus object</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.BusFactory.Create(System.Collections.IEnumerable)">
            <summary>
            Creates a IOBusCollection from an internal array of buses.
            </summary>
            <param name="units">Array of buses to create an array for.</param>
            <returns>The buses collection.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.UnitChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.Controllers.IOSystemDomain.Unit.StateChanged"/> event of a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Unit"/>.
            </summary>	
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.UnitSignalChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.Controllers.IOSystemDomain.Unit.SignalChanged"/> event of a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Unit"/>.
            </summary>	
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.UnitState">
            <summary>
            Represents the current state of a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Unit"/> (physical and logical).
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.UnitState.PhysicalState">
            <summary> Gets the physical state of the unit. </summary>        
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.UnitState.LogicalState">
            <summary> Gets the logical state of the unit </summary>        
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.IOUnitPhysicalState">
            <summary>
            Represents the current physical state of a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Unit"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.IOUnitPhysicalState.PhysicalState">
            <summary> Gets the physical state of the unit. </summary>        
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.IOUnitLogicalState">
            <summary>
            Represents the current logical state of a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Unit"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.IOUnitLogicalState.LogicalState">
            <summary> Gets the logical state of the unit </summary>        
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.UnitBitState">
            <summary>
            Represents the current physical bit information on a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Unit"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.UnitBitState.State">
            <summary> Gets the state of the unit (physical and logical). </summary>        
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.UnitBitState.OutputBits">
            <summary> Gets the physical bit information for the output data on the unit. </summary>        
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.UnitBitState.InputBits">
            <summary> Gets the physical bit information for the input data on the unit. </summary>        
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.UnitStateChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.Controllers.IOSystemDomain.Unit.StateChanged"/> event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.UnitStateChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the UnitStateChangedEventArgs class.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.UnitStateChangedEventArgs.Unpack(Adapters.IOUnit)">
            <summary>
            Unpacks to UnitState from Adapters IOUnitStateInfo.
            </summary>        
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.UnitStateChangedEventArgs.NewUnitState">
            <summary> 
            Gets the new state of the signal.
            </summary>		
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.UnitSignalChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.Controllers.IOSystemDomain.Unit.SignalChanged"/> event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.UnitSignalChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the UnitSignalChangedEventArgs class.
            </summary>		
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.UnitSignalChangedEventArgs.State">
            <summary> Gets the state of the unit. </summary>        
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.UnitSignalChangedEventArgs.OutputBits">
            <summary> Gets the out bits of the unit. </summary>        
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.UnitSignalChangedEventArgs.InputBits">
            <summary> Gets the in bits of the unit. </summary>        
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.Unit">
            <summary>
            Unit data.
            </summary>	
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.Unit.#ctor(ABB.Robotics.Controllers.Controller,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Unit"/> class.
            </summary>
            <param name="controller">The controller.</param>
            <param name="name">The name.</param>    
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.Unit.SubscribeStateChange(System.EventHandler{ABB.Robotics.Controllers.IOSystemDomain.UnitStateChangedEventArgs},ABB.Robotics.Controllers.EventPriority)">
            <summary>
            Subscribes to unit state changes.
            </summary>
            <param name="EventHandler">EventHandler</param>
            <param name="EventPriority">EventPriority</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.Unit.UnsubscribeStateChange(System.EventHandler{ABB.Robotics.Controllers.IOSystemDomain.UnitStateChangedEventArgs})">
            <summary>
            Unsubsribe to unit state changes.
            </summary>
            <param name="EventHandler">EventHandler</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.Unit.SubscribeSignalChange(System.EventHandler{ABB.Robotics.Controllers.IOSystemDomain.UnitSignalChangedEventArgs},ABB.Robotics.Controllers.EventPriority)">
            <summary>
            Subscribes to signal changes on an unit.
            </summary>
            <param name="EventHandler">EventHandler</param>
            <param name="EventPriority">EventPriority</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.Unit.UnsubscribeSignalChange(System.EventHandler{ABB.Robotics.Controllers.IOSystemDomain.UnitSignalChangedEventArgs})">
            <summary>
            Unsubsribe to signal changes on an unit.
            </summary>
            <param name="EventHandler">EventHandler</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Unit.Type">
            <summary>
            gets the type of the unit
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Unit.Bus">
            <summary>
            Gets the bus for this unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Unit.Address">
            <summary>
            Gets the Address for this unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Unit.PhysicalState">
            <summary>
            Gets the physical state for this unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Unit.LogicalState">
            <summary>
            Gets the logical state for this unit.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.IOSystemDomain.Unit.StateChanged">
            <summary>
            Occurs when the physical or logical state of the unit has changed, or if a bit (a signal) has changed on the unit.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.IOSystemDomain.Unit.SignalChanged">
            <summary>
            Occurs when a signal is changed on the unit.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.IOUnitBits">
            <summary>
            IOUnitBits data.
            </summary>	
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.IOUnitBits.Data">
            <summary>
            Gets the physical bit information on a unit. The bits represents the unit map 
            configuration for the signal. If for example the signal on unit map 7 is set, this
            will be shown in data[0] = [1 0 0 0 0 0 0 0].
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.IOUnitBits.Mask">
            <summary>
            Gets the mask information on a unit. It contains what bits in the "data area" that 
            are valid. (There are units that has a size which is not a multiple of 8 bits). 
            If a bit is "1" in the "mask area" the corresponding bit in the "data area" is valid.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.UnitCollection">
            <summary>
            A collection of unit objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.UnitCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.UnitCollection"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.UnitCollection.Add(ABB.Robotics.Controllers.IOSystemDomain.Unit)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Index of value.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.UnitCollection.IndexOf(ABB.Robotics.Controllers.IOSystemDomain.Unit)">
            <summary>
            Gets the index of the unit.
            </summary>
            <param name="value">The value.</param>
            <returns>Index of unit if exists; otherwise -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.UnitCollection.Insert(System.Int32,ABB.Robotics.Controllers.IOSystemDomain.Unit)">
            <summary>
            Inserts the unit at specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The unit.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.UnitCollection.Contains(ABB.Robotics.Controllers.IOSystemDomain.Unit)">
            <summary>
            Determines whether the collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the collection contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.UnitCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Unit"/> at the specified index.
            </summary>
            <value>Unit object.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.UnitFactory">
            <summary>
            this is a utility class that create instances of Units
            depending on the supplied IOUnitType enum
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.UnitFactory.Create(System.String,ABB.Robotics.Controllers.Internal.IOUnit)">
            <summary>
            Creates a unit object depending on the supplied type.
            </summary>        
            <param name="internalUnit">Internal unit object.</param>
            <param name="name">Name of unit.</param>
            <returns>the unit object</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.UnitFactory.Create(System.Collections.IEnumerable)">
            <summary>
            Creates a IOUnitCollection from an internal array of units.
            </summary>
            <param name="units">Array of units to create an array for.</param>
            <returns>The units collection.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Messaging.IpcMessageType">
            <summary>
            Defines the type of an Ipc message.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.IpcMessageType.Message">
            <summary>Message</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.IpcMessageType.Package">
            <summary>Package</summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Messaging.IpcReturnType">
            <summary>
            Defines common results of calls to Ipc methods.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.IpcReturnType.Timeout">
            <summary>Timeout</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.IpcReturnType.OK">
            <summary>OK</summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Messaging.Ipc">
            <summary>
            This class is the entry point to the <c>IPC</c> functionality of the robot controller.
            IPC can be used with RW 5.10 and later.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.Ipc.IPC_MAXMSGSIZE">
            <exclude/>
            <summary>Maximum IPC message size (not including header)</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.Ipc.InvalidNo">
            <summary>Represents an invalid number</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.Ipc._adaptCtrl">
            <summary>AdaptController</summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.Ipc.#ctor(ABB.Robotics.Url,ABB.Robotics.Controllers.IController)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.Messaging.Ipc"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.Ipc.CreateQueue(System.String,System.Int32,System.Int32)">
            <summary>
            Creates an Ipc queue. 
            </summary>
            <param name="Name">Name of the queue.</param>
            <param name="Capacity">The capacity (max number of messages) of the queue.</param>
            <param name="MsgSize">Maximum size per message.</param>
            <returns>The created queue.</returns>
            <example>
            Controller c = new Controller();
            
            IpcQueue queue = c.Ipc.CreateQueue("RABQueue", 5, Ipc.MaxMessageSize);
            </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.Ipc.DeleteQueue(System.Int32)">
            <summary>
            Deletes an Ipc queue. 
            </summary>
            <param name="Id">Queue ID</param>
            <example>
            Controller c = new Controller()
            
            int queueId = c.Ipc.GetQueueId("RABQueue");
            
            if (c.Ipc.Exists(queueId))
              c.Ipc.DeleteQueue(queueId)
            </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.Ipc.Exists(System.String)">
            <summary>
            Checks if a named Ipc queue exists.
            </summary>
            <param name="Name">The name of the queue.</param>
            <returns>True if the named queue exists, otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.Ipc.GetQueueId(System.String)">
            <summary>
            Returns the ID of the specified queue name.
            </summary>
            <param name="Name">The name of the Ipc queue.</param>
            <returns>The id of the queue.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.Ipc.GetQueueName(System.Int32)">
            <summary>
            Returns the queue name from a specified queue ID.
            </summary>
            <param name="Id">The ID.</param>
            <returns>The name or null if ID is missing.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.Ipc.GetQueue(System.String)">
            <summary>
            Gets an existing queue.
            </summary>
            <param name="Name">Name of the queue.</param>
            <returns>The queue.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.Ipc.GetQueue(System.Int32)">
            <summary>
            Returns an existing queue.
            </summary>
            <param name="Id">Queue ID.</param>
            <returns>The queue.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.Ipc.GetIpcAdapter(ABB.Robotics.Controllers.IController)">
            <summary>
            Gets a ref to the ipc adapter.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.Ipc.GetIpcAdapter">
            <summary>
            Gets a ref to the ipc adapter.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.Ipc.GetIpcSlots">
            <summary>
            Gets a list of IPCSlots
            </summary>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.Ipc.MaxMessageSize">
            <summary>
            The maximum size of an Ipc message. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.Ipc.Queues">
            <summary>
            Returns the available Ipc queues of the controller.
            Can be used with RW 5.10 and later.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.Ipc.GetMaxPackageSize">
            <summary>
            Returns the maximum size of an Ipc package.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Messaging.IPCSlot">
            <summary>
            Represents a IPC slot
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.IPCSlot.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Represents an IPC slot
            </summary>
            <param name="name">Name of the slot.</param>
            <param name="id">Slot identifier</param>
            <param name="qSize">Size of the queue</param>
            <param name="maxSize">Max message size</param>
            <param name="accessible">Remote accessible</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IPCSlot.Name">
            <summary>
            Gets the name of the slot
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IPCSlot.Id">
            <summary>
            Gets the slot identifier.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IPCSlot.QueueSize">
            <summary>
            Gets the size of slot queue
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IPCSlot.MaxMsgSize">
            <summary>
            Returns the maximum message size accepted by the receiver
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IPCSlot.Accessible">
            <summary>
            Indicates if the slot is accessible
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Messaging.IpcMessage">
            <summary>
            Represents an Ipc message.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.IpcMessage.Sender">
            <summary>Sender</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.IpcMessage.Cmd">
            <summary>Command</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.IpcMessage.UserDef">
            <summary>User defined value.
            Type short is only supported by the controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.IpcMessage.UserData">
            <summary>User information</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.IpcMessage.Status">
            <summary>Status</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.Messaging.IpcMessage._data">
            <summary>Data buffer</summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.IpcMessage.#ctor(System.Int32)">
            <summary>
            Creates an Ipc message.
            </summary>
            <param name="Capacity">The capacity of the message data</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.IpcMessage.#ctor">
            <summary>
            Default constructor - creates a message with maximum capacity.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.IpcMessage.SetData(System.Byte[])">
            <summary>
            Sets the data of the message.
            </summary>
            <param name="data">The data to set</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.IpcMessage.CopyData(System.Byte[])">
            <summary>
            Copies the data of the message to a byte array
            </summary>
            <param name="data">The destination array</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.IpcMessage.GetData">
            <summary>
            Returns a copy of the data of the message.
            </summary>
            <returns>The data as a byte array</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IpcMessage.Size">
            <summary>The size of the message data</summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IpcMessage.Type">
            <summary>
            The message type
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IpcMessage.Destination">
            <summary>
            The destination queue
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IpcMessage.Capacity">
            <summary>
            Returns the total data capacity of the message.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IpcMessage.Data">
            <summary>
            Returns a reference to the data of the message
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Messaging.IpcQueue">
            <summary>
            This type represents an Ipc queue, which can be used to send data between the controller and its clients.
            IPC can be used with RW 5.10 and later.
            Messages can be sent to the queue from other clients who knows the queue id. Only the creator of the queue can recieve messages from the queue.
            </summary>
            <remarks>Messages must be sent and recieved from a MTA thread. This means that you shall not send and recieve messages from the UI thread. See <see cref="!:Recieve"/> for more information.</remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.IpcQueue.#ctor(ABB.Robotics.Controllers.IController,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.IpcQueue.Send(ABB.Robotics.Controllers.Messaging.IpcMessage)">
            <summary>
            This method sends a message to a RAPID queue.
            </summary>
            <param name="Message">The message to send.</param>
            <remarks>IPC can only be used with RW 5.10 and later. 
            <para>There must be code to receive the message in the RAPID program.</para> 
            <para>No mastership is required to send a message.</para>
            <para>This method must be called from a MTA thread. Create a separate sender thread and use the method <b>Thread.SetApartmentState()</b> to set the apartment state to MTA before starting it.</para>
            </remarks>
            <example>
            In this example a message (string;"test") is sent to a RAPID queue.
            <code>
            private void SendData()
            {
                Controller c = new Controller();
                IpcQueue rapidQueue = c.Ipc.GetQueue("RMQ_T_ROB1");
                IpcMessage message = new IpcMessage();
                Byte[] data = new UTF8Encoding().GetBytes("string;\"test\"");
                message.SetData(data);
                rapidQueue.Send(message);
            }
            </code>
            </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.IpcQueue.Send(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            This method sends a message to the queue.
            </summary>
            <remarks>
            <para>This method must be called from a MTA thread. Create a separate sender thread and use the method <b>Thread.SetApartmentState()</b> to set the apartment state to MTA before starting it.</para>
            </remarks>
            <param name="Sender">The sender of the message</param>
            <param name="Cmd">The type of command</param>
            <param name="UserDef">A user defined value</param>
            <param name="UserData">User information </param>
            <param name="Data">The data that will be sent</param>
            <exception cref="T:System.ArgumentException"> if <i>Data</i> is invalid.</exception>
            <example>
            Controller c = new Controller();
            
            IpcQueue rapidQueue = c.Ipc.GetQueue("RMQ_T_ROB1");
            
            Byte[] data = new UTF8Encoding().GetBytes("string;\"test\"");
            
            rapidQueue.Send(0, 0, 0, 0, data);
            
            </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.IpcQueue.Send(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            This method sends a message to the queue.
            </summary>
            <remarks>
            <para>This method must be called from a MTA thread. Create a separate sender thread and use the method <b>Thread.SetApartmentState()</b> to set the apartment state to MTA before starting it.</para>
            </remarks>
            <param name="Sender">The sender of the message</param>
            <param name="Cmd">The type of command</param>
            <param name="UserDef">A user defined value</param>
            <param name="UserData">User information </param>
            <param name="Data">The data that will be sent</param>
            <param name="Length">Length of the data that will be sent</param>
            <exception cref="T:System.ArgumentException"> if <i>Data</i> is invalid.</exception>
            <example>
            Controller c = new Controller();
            
            IpcQueue rapidQueue = c.Ipc.GetQueue("RMQ_T_ROB1");
            
            Byte[] data = new UTF8Encoding().GetBytes("string;\"test\"");
            Send string including null character 
            rapidQueue.Send(0, 0, 0, 0, data, data.Length+1);
            
            </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.Messaging.IpcQueue.Receive(System.Int32,ABB.Robotics.Controllers.Messaging.IpcMessage)">
             <summary>
             This method receives a message from the queue.
             </summary>
             <param name="Timeout">A timeout value in milliseconds.</param>
             <param name="Msg">The received message (if any).</param>
             <returns>The result of the call.</returns>
             <remarks>IPC can only be used with RW 5.10 and later. 
             <para>This method must be called from a MTA thread. Create a separate reciever thread and use the method <b>Thread.SetApartmentState()</b> to set the apartment state to MTA before starting it.</para>
             <para>Calls to this method are blocking.</para>
             </remarks>
             <exception cref="T:System.ArgumentException"><i>QueueId</i> is invalid.</exception>
             <example>
             This example creates a queue and then tries to read a message from it.
            
             Controller c = new Controller();
             
             IpcQueue rabQueue = c.Ipc.CreateQueue("RABQueue", 5, Ipc.MaxMessageSize);
             IpcMessage message = new IpcMessage(Ipc.MaxMessageSize);
             
             rabQueue.Receive(1000, message);
            
             // Expecting IPC message data of type string. Convert it for later use.
             string messageData = new UTF8Encoding().GetString(message.Data);   
             </example>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IpcQueue.QueueName">
            <summary>
            Returns the name of the Ipc queue.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IpcQueue.QueueId">
            <summary>
            Returns the ID of the Ipc queue.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IpcQueue.Capacity">
            <summary>
            Returns the capacity (max number of elements) of the queue.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IpcQueue.MessageSizeLimit">
            <summary>
            Returns the size limitation for a message.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Messaging.IpcQueue.RemoteAccessible">
            <summary>
            Specifies whether the queue is remotely accessible or not.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.LinkedListIndex`1">
            <summary>
            Creates an index accessor for a linked lists.
            </summary>
            <typeparam name="TValue">ValueType of the linked list.</typeparam>
        </member>
        <member name="M:ABB.Robotics.Controllers.LinkedListIndex`1.#ctor(System.Collections.Generic.LinkedList{`0})">
            <summary>
            Initializes a new LinkedListIndex.
            </summary>
            <param name="list">The list to index.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.LinkedListIndex`1.GetAt(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index">The index to access.</param>
            <returns>The value.</returns>    
        </member>
        <member name="T:ABB.Robotics.Controllers.LinkedListUtility">
            <summary>
            Utility class used to get the value from a linked list
            at the specified value.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.LinkedListUtility.GetAt``1(System.Collections.Generic.LinkedList{``0},System.Int32)">
            <summary>
            Gets the value at index.
            </summary>
            <typeparam name="TValue">Type of list.</typeparam>
            <param name="list">List to access.</param>
            <param name="index">The index to access.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.LocalUserContext">
            <summary>
            Used to create a scope where all operations are executed in the 
            context of a "LocalUser"
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.MainComputerServiceInfo">
            <summary>
            Contains service information about the main computer of Controller. 
            Not used for Virtual Controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MainComputerServiceInfo.#ctor">
            <summary>
            Initializes a new computer service info object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MainComputerServiceInfo.BoardType">
            <summary>
            Gets/Sets the board type.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MainComputerServiceInfo.CpuInfo">
            <summary>
            Gets/Sets the Cpu info.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MainComputerServiceInfo.Empty">
            <summary>
            Gets the single empty instance.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MainComputerServiceInfo.RamSize">
            <summary>
            Gets/Sets the size of RAM in Mega Bytes.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MainComputerServiceInfo.Temperature">
            <summary>
            Gets/Sets the temperature.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInfo">
            <summary>
            ServiceInfo object for a mechanical unit.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInfo.#ctor">
            <summary>
            Initializes a new MechanicalUnitServiceInfo object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInfo.ElapsedCalenderTimeSinceLastService">
            <summary>
            Gets the elapsed calender time since last service.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInfo.ElapsedProductionTime">
            <summary>
            Gets the elapsed production time since
            last SIS reset.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInfo.ElapsedProductionTimeSinceLastService">
            <summary>
            Gets the elapsed production time since last service.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInfo.Empty">
            <summary>
            Gets an empty Mechanical Unit service info object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInfo.LastStart">
            <summary>
            Gets the time of the last start.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInfo.ServiceInterval">
            <summary>
            Gets the service interval.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInfo.WarningLevel">
            <summary>
            Gets the warning level.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInterval">
            <summary>
            Holds information about service intervals
            for a mechanical unit.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInterval.#ctor">
            <summary>
            Initializes a new MechanicalUnitServiceInterval object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInterval.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new MechanicalUnitServiceInterval object.
            </summary>
            <param name="calender">Calender time.</param>
            <param name="production">Production time.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInterval.CalenderTime">
            <summary>
            Gets the service interval in calender time as a TimeSpan object.   
            </summary>
            <example>
            <code>
            Controller c = new Controller();
            MotionSystem msystem = c.MotionSystem;
            MechanicalUnit munit = msystem.ActiveMechanicalUnit;
            MechanicalUnitServiceInfo info = munit.ServiceInfo;
            
            // Service interval in years, calender time
            int serviceIntervalCalender = Convert.ToInt32(info.ServiceInterval.CalenderTime.TotalDays / 365);
            </code>
            </example>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitServiceInterval.ProductionTime">
            <summary>
            Get the service interval in production time as a TimeSpan object.
            </summary>
            <example>
            <code>
            Controller c = new Controller();
            MotionSystem msystem = c.MotionSystem;
            MechanicalUnit munit = msystem.ActiveMechanicalUnit;
            MechanicalUnitServiceInfo info = munit.ServiceInfo;
            
            // Service interval in hours, production time
            int serviceIntervalProduction = Convert.ToInt32(info.ServiceInterval.ProductionTime.TotalHours);
            </code>
            </example>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitWarningLevel">
            <summary>
            Contains all warning levels for the mechanical unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitWarningLevel.GearboxService">
            <summary>
            Gets the warning level for gearbox, resolution is percent.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitWarningLevel.CalenderService">
            <summary>
            Gets the warning level for calender, resolution is percent.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitWarningLevel.ProductionService">
            <summary>
            Gets the production warning, resolution is percent.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.MechUnitModeChangedEventArgs">
            <summary>
            Event data for the MechUnitModeChanged event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechUnitModeChangedEventArgs.#ctor">
            <summary>
            Initializes a new MechUnitModeChangedEventArgs object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.NetworkSettingsInfo">
            <summary>
            Contains information about the settings on a network adapter.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.NetworkSettingsInfo.#ctor">
            <summary>
            Default .ctor for external creation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.NetworkSettingsInfo.#ctor(System.Net.IPAddress,System.Boolean,System.String,System.Net.IPAddress,System.String)">
            <summary>
            Initializes a new NetworkSettingsInfo object.
            </summary>
            <param name="address">Address.</param>
            <param name="subnetMask">Subnet mask.</param>
            <param name="dhcp">True if the settings are configured by dhcp.</param>
            <param name="gateway">Gateway.</param>
            <param name="mac">Mac address.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.NetworkSettingsInfo.#ctor(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Creates a settings object from a list of strings.
            0: IP address
            1: Subnet mask
            2: Gatway
            3: Mac address
            </summary>
            <param name="dhcp">True if dhcp is enabled.</param>
            <param name="settings">Settings.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.NetworkSettingsInfo.Equals(System.Object)">
            <summary>
            Checks if the objects are considered equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if the object are equal, otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NetworkSettingsInfo.Equals(ABB.Robotics.Controllers.NetworkSettingsInfo)">
            <summary>
            Checks if the objects are considered equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if the object are equal, otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.NetworkSettingsInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            <see cref="M:System.Object.GetHashCode"></see> is suitable 
            for use in hashing algorithms and data structures like a 
            hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.NetworkSettingsInfo.Address">
            <summary>
            Gets/Sets the IP address.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.NetworkSettingsInfo.Empty">
            <summary>
            Gets the single empty instance.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.NetworkSettingsInfo.Gateway">
            <summary>
            Gets/Sets the gateway settings.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.NetworkSettingsInfo.IsDhcp">
            <summary>
            Flag indicating that Dhcp is used to configure the
            network of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.NetworkSettingsInfo.MacAddress">
            <summary>
            Gets the Mac address. Note: You can't change the MAC
            address of a NIC.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.NetworkSettingsInfo.SubnetMask">
            <summary>
            Gets/Sets the subnet mask.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.NodeEnumerator`1">
            <summary>
            This generic enables enumeration of LinkedListNodes
            from a linked list.
            </summary>
            <typeparam name="TValue">Type to enumerate.</typeparam>
        </member>
        <member name="T:ABB.Robotics.Controllers.OperatingModeChangeEventArgs">
            <summary>
            Event args for OperatingModeChanged event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.OperatingModeChangeEventArgs.#ctor">
            <summary>
            Creates a OperationModeChanged event args object.
            </summary>		
        </member>
        <member name="P:ABB.Robotics.Controllers.OperatingModeChangeEventArgs.NewMode">
            <summary>
            The new mode of the controller when operation mode is Changed
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.AttributeNotAvailable">
            <summary>
              Looks up a localized string similar to Attribute not available on type..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BackupOperationNotValid">
            <summary>
              Looks up a localized string similar to Operation not possible during a backup..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BackupPathAlreadyExist">
            <summary>
              Looks up a localized string similar to Backup directory already exists: {0}..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadComparisonType">
            <summary>
              Looks up a localized string similar to Cant compare with type..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadDirectoryName">
            <summary>
              Looks up a localized string similar to Bad directory name..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadEventHandler">
            <summary>
              Looks up a localized string similar to EventHandler must not be null..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadLocalFile">
            <summary>
              Looks up a localized string similar to Bad remote file..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadNotificationType">
            <summary>
              Looks up a localized string similar to Must be a subclass of NotifyOperation..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadPath">
            <summary>
              Looks up a localized string similar to Bad path..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadRapidData">
            <summary>
              Looks up a localized string similar to Parameter is not valid..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadRapidStringFormat">
            <summary>
              Looks up a localized string similar to String: {0} is not correctly formatted..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadRelativeValue">
            <summary>
              Looks up a localized string similar to Procentual value &apos;{0}&apos; is not between 0 and 1..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadRemoteFile">
            <summary>
              Looks up a localized string similar to Bad remote file..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadSaveModulePath">
            <summary>
              Looks up a localized string similar to Bad path for module..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadSignalName">
            <summary>
              Looks up a localized string similar to Bad signal name..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BadTaskName">
            <summary>
              Looks up a localized string similar to Task name is bad..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BlockedByHost">
            <summary>
              Looks up a localized string similar to The call was blocked by the current host..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.BufferToSmall">
            <summary>
              Looks up a localized string similar to Supplied buffer to small..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.CanOnlyGetDataForData">
            <summary>
              Looks up a localized string similar to Can only get data for an instance of a type..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.CanOnlyRegisterASingleHost">
            <summary>
              Looks up a localized string similar to Host already registered..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.CantGetTypeForType">
            <summary>
              Looks up a localized string similar to Can&apos;t get RapidDataType for a type, only possible for data..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.CfgAttrbuteTypeNotSupported">
            <summary>
              Looks up a localized string similar to Type not supported for serialization as CfgAttribute..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.CfgToManyTypes">
            <summary>
              Looks up a localized string similar to Every cfg type can only have a single managed type. Cfg type: {0}..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.CfgTypeNotFund">
            <summary>
              Looks up a localized string similar to CfgType with specified name not found..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.ControllerCreationFailed">
            <summary>
              Looks up a localized string similar to Failed to create controller object..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.ControllerNotConnected">
            <summary>
              Looks up a localized string similar to Can&apos;t use a disconnected controller object..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.DemandGrantRejected">
            <summary>
              Looks up a localized string similar to The requested  grant demand was rejected by the controller..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.DirectoryAlreadExist">
            <summary>
              Looks up a localized string similar to Remote directory already exists..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.EventLogMessageNotFound">
            <summary>
              Looks up a localized string similar to EventLog message not found..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.EventStrategyCreationFailure">
            <summary>
              Looks up a localized string similar to Failed to create event strategy object..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.FillNotCalled">
            <summary>
              Looks up a localized string similar to Fill / FillFromString must be called..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.HostAlreadyRegistered">
            <summary>
              Looks up a localized string similar to A host is already registered..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.HostVersionNull">
            <summary>
              Looks up a localized string similar to Host Version may not be null..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.InstanceWriteProtected">
            <summary>
              Looks up a localized string similar to Instance is write protected..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.IntArgumentMustBeLargerThen">
            <summary>
              Looks up a localized string similar to Argument must be larger then: {0}..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.InvalidHostName">
            <summary>
              Looks up a localized string similar to Name of host must be; non-null and Length &gt; 0..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.InvalidIAsyncObject">
            <summary>
              Looks up a localized string similar to IAsyncResult not valid..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.MalformedUrl">
            <summary>
              Looks up a localized string similar to Provided url is malformed or null..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.MastershipAlreadyHeld">
            <summary>
              Looks up a localized string similar to Mastership already held..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.MastershipCounterLessThenZero">
            <summary>
              Looks up a localized string similar to The {0} reference counter is &lt; 0; this indicates that Release( {0} ) was called to many times..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.MastershipInvalidReleaseOperation">
            <summary>
              Looks up a localized string similar to More Release calls then Request calls..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.MastershipNotHeld">
            <summary>
              Looks up a localized string similar to Mastership not held..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.MastershipResourceNotSupported">
            <summary>
              Looks up a localized string similar to Mastership resource is not supported: {0}..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.MethodNotImplementedOnController">
            <summary>
              Looks up a localized string similar to Method not implemented on controller..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.NameOrPwdMissing">
            <summary>
              Looks up a localized string similar to Name or password missing..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.NoCurrentEntry">
            <summary>
              Looks up a localized string similar to Current entry not available on enumerator..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.NotACOMErrorCode">
            <summary>
              Looks up a localized string similar to Supplied argument not a COM error code..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.ObjectDisposed">
            <summary>
              Looks up a localized string similar to Object already disposed..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.ObjectIsReadOnly">
            <summary>
              Looks up a localized string similar to Can&apos;t modify a readonly object..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.RegularExpressionEmpty">
            <summary>
              Looks up a localized string similar to Regular expression can&apos;t be empty..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.RestoreIgnoreNotValue">
            <summary>
              Looks up a localized string similar to Not a valid ignore flag..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.RestoreIncludeNotValid">
            <summary>
              Looks up a localized string similar to Not a valid value for a restore operation..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.RestoreOperationNotValid">
            <summary>
              Looks up a localized string similar to Operation not valid during a restore operation..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.RMMPInvalidReleaseOperation">
            <summary>
              Looks up a localized string similar to RMMP Release cant be called prior to RMMP request..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.RMMPRequestTimedOut">
            <summary>
              Looks up a localized string similar to The RMMP request was not granted within the timeout limit..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.SignalTypeNotValid">
            <summary>
              Looks up a localized string similar to Can&apos;t create signal for type: {0}..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.StartIndexLessThenStopIndex">
            <summary>
              Looks up a localized string similar to Start index must be less then Stop index..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.StringCantBeEmpty">
            <summary>
              Looks up a localized string similar to String argument must not be null or empty..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.SystemPathNotFound">
            <summary>
              Looks up a localized string similar to Unable to find specified system path: {0}..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.TypeNotSerializable">
            <summary>
              Looks up a localized string similar to Type: {0} or inherited class isn&apos;t [Serializable]..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.TypeToComplex">
            <summary>
              Looks up a localized string similar to Supplied Rapid data type was to complex to parse. Type: {0}..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.UnableToCreateCacheStore">
            <summary>
              Looks up a localized string similar to Unable to create backing store for file cache..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.UnableToFindController">
            <summary>
              Looks up a localized string similar to Unable to find a controller with system id: {0}..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.UnknownCategory">
            <summary>
              Looks up a localized string similar to Unknown Category..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.UnknownSearchCriteria">
            <summary>
              Looks up a localized string similar to Unknown search criteria..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.UserNotAuthenticated">
            <summary>
              Looks up a localized string similar to The controller has no authenticated user, call Logon( ) to authenticate a user..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.VCStartTimeout">
            <summary>
              Looks up a localized string similar to Failed to start controller within specified time..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.VirtualPanelBadControllerMode">
            <summary>
              Looks up a localized string similar to Controller must be in manual mode prior to this state..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.VirtualPanelControllerIsNotVirtual">
            <summary>
              Looks up a localized string similar to Can only attach virtual controllers..
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Properties.Resources.WrongModeForMastershipRequest">
            <summary>
              Looks up a localized string similar to The controller isn&apos;t in a valid mode for a mastership request, mode must be: Auto, Manual or ManualFullSpeed..
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ExecutionType">
            <summary>
            Represents the type of execution performed by the program server.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionType.None">
            <summary>
            No execution context, i.e. no ProgramPointer is set 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionType.Normal">
            <summary>
            Normal program exeuction
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionType.Interrupt">
            <summary>
            A programmatic interrupt
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionType.ExternalInterrupt">
            <summary>
            An external interrupt, via the system input Interrupt. 
            Can be executed at any execution level.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionType.UserRoutine">
            <summary>
            A service routine.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionType.EventRoutine">
            <summary>
            An event routine, e.g., RESET, START, STOP, POWER_ON etc. 
            Can be executed at any execution level.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Location">
            <summary>
            Defines a location within a text file. Objects of 
            this types are imutable and can't be changed once
            they have been created.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Location.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new location object with row and column.
            </summary>
            <param name="row">Sets the row of the location.</param>
            <param name="column">Sets the column of the location.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Location.Equals(ABB.Robotics.Controllers.RapidDomain.Location)">
            <summary>
            Checks if obj is equal to this object.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Location.Equals(System.Object)">
            <summary>
            Checks if obj is equal to this object.
            </summary>
            <param name="obj">Object to compare.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Location.GetHashCode">
            <summary>
            Gets the hashcode for this object.
            </summary>
            <returns>Hash code for this object.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Location.Column">
            <summary>
            Gets the column.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Location.Empty">
            <summary>
            Empty instance for this type.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Location.Row">
            <summary>
            Gets the row.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ProgramPosition">
            <summary>
            Execution status structure; AKA execution pointer or program pointer.  
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ProgramPosition.#ctor(System.String,System.String,ABB.Robotics.Controllers.RapidDomain.TextRange)">
            <summary>
            Initializes a new instance of ProgramPointer class.
            </summary>
            <param name="module">Current module.</param>
            <param name="routine">Current routine.</param>
            <param name="range">Current range.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ProgramPosition.Empty">
            <summary>
            Empty pattern impl.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ProgramPosition.Module">
            <summary>
            Gets the module for this program pointer.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ProgramPosition.Routine">
            <summary>
            Gets the current routine.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ProgramPosition.Range">
            <summary>
            Gets the range of the program pointer.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ProgramPositionEventArgs">
            <summary>
            This event arguments for a ProgramPosition events.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ProgramPositionEventArgs.#ctor">
            <summary>
            Initializes a program position Event args object.
            </summary>   
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ProgramPositionEventArgs.Unpack(Adapters.Task,Adapters.EventId)">
            <summary>
            Unpacks Adpater.PCP details to ProgramPosition '_position'.
            </summary>     
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ProgramPositionEventArgs.Position">
            <summary>
            Gets the program position.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.TextRange">
            <summary>
            TextRange defines a region within a row / column based text file.
            All instances of this class are immutable. Indecies are one-based.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.TextRange.#ctor(ABB.Robotics.Controllers.RapidDomain.Location,ABB.Robotics.Controllers.RapidDomain.Location)">
            <summary>
            Creates a new instance of the TextRange class.
            </summary>
            <param name="begin">Beginning of range.</param>
            <param name="end">End of range.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.TextRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the TextRange class.
            </summary>
            <param name="startRow">Start row.</param>
            <param name="startColumn">Start column.</param>
            <param name="endRow">End row.</param>
            <param name="endColumn">End column.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.TextRange.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the TextRange class for
            a single row.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.TextRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the TextRange class
            for a number of rows.
            </summary>
            <param name="startRow">Start row.</param>
            <param name="endRow">End row.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.TextRange.Begin">
            <summary>
            Gets the Location for the beginning of the range.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.TextRange.Empty">
            <summary>
            Empty pattern TextRange object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.TextRange.End">
            <summary>
            Gets the Location for the end of the range.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.TextRange.EndOfLine">
            <summary>
            Gets the end of line index.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.TextRange.StartIndex">
            <summary>
            Gets the start index.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIInstructionType">
            <summary>
            Defines the UI- and TP- Instructions available in RAPID. For a short description of each instruction type, see "Members" section.
            For complete description concerning the usage of these RAPID instructions refer to RAPID Technical reference manual.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionType.UIAlphaEntry">
            <summary>
            The UIAlphaEntry (User Interaction Alpha Entry) is used to let an operator communicate 
            with the robot system via RAPID, by enabling him to enter a string from the FlexPendant or from a PC SDK application. 
            After the operator has entered the text, it is transferred back to the RAPID program by calling <see cref="M:ABB.Robotics.Controllers.RapidDomain.UIAlphaEntryEventArgs.SendAnswer(System.String)"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionType.UIListView">
            <summary>
            The UIListView (User Interaction List View) is used to let an operator communicate 
            with the robot system by letting him select one of the items presented in a list. 
            Each list item is defined with a descriptive text and optionally an icon.
            The selection of the operator is transferred back to the RAPID program by calling <see cref="M:ABB.Robotics.Controllers.RapidDomain.UIListViewEventArgs.SendAnswer(System.Int32,ABB.Robotics.Controllers.RapidDomain.UIButtonResult)"/>. 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionType.UIMessageBox">
            <summary>
            UIMessageBox (User Interaction Message Box, advanced type) is used to display a message (usually a question) 
            to the operator. The answer of the operator, i. e. the selected MessageBox button, is 
            transferred back to the RAPID program by calling <see cref="M:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs.SendAnswer(ABB.Robotics.Controllers.RapidDomain.UIButtonResult)"/>.        
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionType.UIMsgBox">
            <summary>
            UIMsgBox (User Interaction Message Box, basic type)is used to display a message (usually a question) 
            to the operator. The answer of the operator, i. e. the selected MessageBox button, is 
            transferred back to the RAPID program by calling <see cref="M:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.SendAnswer(ABB.Robotics.Controllers.RapidDomain.UIButtonResult)"/>. 
            (UIMessageBox and UIMsgBox do not differ much, see details in RAPID Technical reference manual.)
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionType.UINumEntry">
            <summary>
            UINumEntry (User Interaction Number Entry) is used to enable the operator to enter a numeric value 
            from the available user device, such as the FlexPendant or a PC SDK application. 
            The numeric value specified by the user is transferred back to the RAPID program by calling <see cref="M:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.SendAnswer(System.Double)"/>. 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionType.UINumTune">
            <summary>
            UINumTune (User Interaction Number Tune) is used to allow the operator to tune a numeric value 
            from the FlexPendant or a PC SDK application. The numeric value specified by the operator is transferred 
            back to the RAPID program by calling <see cref="M:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.SendAnswer(System.Double)"/>. 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionType.TPErase">
            <summary>
            TPErase (Teach Pendant Erase) is used to clear the display from written messages.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionType.TPReadFK">
            <summary>
            TPReadFK (Teach Pendant Read Function Key) is used to display a question to the operator, 
            who responds by selecting one out of 2-5 displayed "function keys".
            The response, i. e. which function key was selected is transferred back to the program
            by calling <see cref="M:ABB.Robotics.Controllers.RapidDomain.UITPReadFKEventArgs.SendAnswer(ABB.Robotics.Controllers.RapidDomain.UITPFunctionKey)"/>. 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionType.TPReadNum">
            <summary>
            TPReadNum is used to display a question to the operator via the available user device, 
            such as the FlexPendant or a PC SDK application. The user responds by entering a number, 
            which is transferred back to the RAPID program by calling <see cref="M:ABB.Robotics.Controllers.RapidDomain.UITPReadNumEventArgs.SendAnswer(System.Double)"/>.  
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionType.TPWrite">
            <summary>
            TPWrite is used to display written information to the operator.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionType.Undefined">
            <summary>
            Undefined type UI-Instruction
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIIcon">
            <summary>
            UI Instruction Icon
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIIcon.Undefined">
            <summary>
            Undefined icon
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIIcon.None">
            <summary>
            No icon
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIIcon.Info">
            <summary>
            Information Icon
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIIcon.Warning">
            <summary>
            Warning icon
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIIcon.Error">
            <summary>
            Error Icon
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIButton">
            <summary>
            UI Instruction button
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButton.None">
            <summary>
            No button
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButton.OK">
            <summary>
            OK button
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButton.AbortRetryIgnore">
            <summary>
            Abort, Retry and Ignore buttons
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButton.OKCancel">
            <summary>
            OK and Cancel buttons
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButton.RetryCancel">
            <summary>
            Retry and Cancel buttons
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButton.YesNo">
            <summary>
            Yes and No buttons
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButton.YesNoCancel">
            <summary>
            Yes, No and Cancel buttons
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UITPFunctionKey">
            <summary>
            TPReadFK, if the function key 1 is pressed then 1 is returned, and so on.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UITPFunctionKey.TPFK1">
            <summary>
            Function key 1
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UITPFunctionKey.TPFK2">
            <summary>
            Function key 2
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UITPFunctionKey.TPFK3">
            <summary>
            Function key 3
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UITPFunctionKey.TPFK4">
            <summary>
            Function key 4
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UITPFunctionKey.TPFK5">
            <summary>
            Function key 5
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIButtonResult">
            <summary>
            UI Instruction button result
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButtonResult.OK">
            <summary>
            OK button
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButtonResult.Abort">
            <summary>
            Abort button
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButtonResult.Retry">
            <summary>
            Retry button
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButtonResult.Ignore">
            <summary>
            Ignore button
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButtonResult.Cancel">
            <summary>
            Cancel button
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButtonResult.Yes">
            <summary>
            Yes button
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIButtonResult.No">
            <summary>
            No button
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventType">
            <summary>
            Defines the different UIInstruction event types
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventType.Post">
            <summary>
            Post event type, eg. TPWrite, TPErase
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventType.Send">
            <summary>
            Send event type, UI-Instructions of this type can be aborted/closed/confirmed, eg. TPReadNum, UIListView
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventType.Abort">
            <summary>
            UI-Instruction aborted/closed/confirmed by the operator.
            If you receive a new Send event type from the same task, 
            the previous dialog should be removed and the new dialog displayed, as a RAPID task can only handle 
            one dialog. This may happen if RAPID execution is stopped while a UI-Instruction dialog is being displayed, 
            then restarted and executing a new UIInstruction.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIListItem">
            <summary>
            Defines a list item with a text and optionally a
            small icons. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIListItem.Image">
            <summary>
            The path including file name for the icon image to display.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIListItem.Text">
            <summary>
            The text to display for the list item. 
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventHandler">
            <summary>
            Delegate for UIInstruction event notifications.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIPararameters">
            <summary>
            Internal helper class, has all possible UI parameters
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs">
            <summary>
            Base class of all UI-instruction event arguments.
            The defined properties are the ones sent with a UI Instruction event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.SendResponse(System.Collections.Generic.List{ABB.Robotics.Controllers.Internal.UIInstructionParameters})">
            <summary>
            Send answer to Instruction
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.GetAllArguments">
            <summary>
            Get all arguments of Instruction
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.ParsListItem(System.Collections.Generic.List{ABB.Robotics.Controllers.RapidDomain.UIListItem}@,System.String)">
            <summary>
            Pars a list item array into a list
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.ParsMsgArray(System.Collections.Generic.List{System.String}@,System.String)">
            <summary>
            Pars message array string into a list
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.ParsBtnArray(System.Collections.Generic.List{System.String}@,System.String)">
            <summary>
            Pars button array string into a list
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.RapidStringToString(System.String)">
            <summary>
            Convert rapid string to string.
            \"string\" to string and [\"string\"] to string
            </summary>
            <param name="rapidString"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.ParsUIParameters(System.Collections.Generic.List{ABB.Robotics.Controllers.Internal.UIInstructionParameters},ABB.Robotics.Controllers.RapidDomain.UIPararameters@)">
            <summary>
            Pars all possible UI_instruction parameters
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.Instruction">
            <summary>
            Name of the instruction e.g. TPWrite, UIMessageBox
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.StackUrl">
            <summary>
            URL to task or task stack
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.TaskName">
            <summary>
            RAPID task name
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.ExecutionLevel">
            <summary>
            Task execution level
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.EventMessage">
            <summary>
            Any additional text specified by instruction
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.InstructionEventType">
            <summary>
            UI-Instructions are either sent with POST or SEND.
            An ABORT event is sent when a SEND instruction is aborted. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIInstructionEventArgs.InstructionType">
            <summary>
            UI instruction type.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIAlphaEntryEventArgs">
            <summary>
            UIAlphaEntry event argument. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIAlphaEntryEventArgs.SendAnswer(System.String)">
            <summary>
            Send string to alpha textbox.
            </summary>
            <param name="inputString">Input string to alpha text box</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIAlphaEntryEventArgs.Header">
            <summary>
            Header text to be written at the top of the message box.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIAlphaEntryEventArgs.MsgArray">
            <summary>
            Several text lines from an array to be written on the display.
            Only one of parameter Message or MsgArray can be used at the same time.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIAlphaEntryEventArgs.Message">
            <summary>
            One text line to be written on the display. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIAlphaEntryEventArgs.Wrap">
            <summary>
            Concatenates MsgArray to one string.
            </summary>
            <remarks>
            If selected, all the specified strings in the argument MsgArray will be 
            concatenated to one string with a single space between each individual string 
            and using as few lines as possible.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIAlphaEntryEventArgs.Icon">
            <summary>
            Defines the icon to be displayed. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIAlphaEntryEventArgs.InitString">
            <summary>
            An initial, default string to be displayed in the alpha textbox.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIListViewEventArgs">
            <summary>
            UIListView (User Interaction List View) event argument.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIListViewEventArgs.SendAnswer(System.Int32,ABB.Robotics.Controllers.RapidDomain.UIButtonResult)">
            <summary>
            Send selection to ListView.
            </summary>
            <param name="listItemIdx">user selection in the list menu corresponding to the index in the array specified in the parameter ListItems</param>
            <param name="btnRes">Button result</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIListViewEventArgs.Header">
            <summary>
            Header text to be written at the top of the message box.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIListViewEventArgs.ListItems">
            <summary>
            An array with one or several list items to be displayed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIListViewEventArgs.Buttons">
            <summary>
            Defines the buttons to be displayed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIListViewEventArgs.BtnArray">
            <summary>
            User defined buttons stored in an array. 
            Only one of parameter \Buttons or \BtnArray can be used at the same time.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIListViewEventArgs.Icon">
            <summary>
            Defines the icon to be displayed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIListViewEventArgs.DefaultIndex">
            <summary>
            The default selection in the list, corresponds to
            the index of the item in the array specified in the parameter ListItems.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs">
            <summary>
            UIMessageBox event arguments
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs.SendAnswer(ABB.Robotics.Controllers.RapidDomain.UIButtonResult)">
            <summary>
            Send response to the UI-Instruction
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs.GetArguments">
            <summary>
            Get all arguments from the UI-Instruction
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs.Header">
            <summary>
            Header text to be written at the top of the message box.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs.MsgArray">
            <summary>
            Several text lines to be written on the display.
            Only one of parameter Message or MsgArray can be used at the same time.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs.Message">
            <summary>
            One text line to be written on the display. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs.Wrap">
            <summary>
            Concatenates MsgArray to one string.
            </summary>
            <remarks>
            If selected, all the specified strings in the argument MsgArray will be 
            concatenated to one string with a single space between each individual string 
            and using as few lines as possible.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs.Buttons">
            <summary>
            Defined buttons.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs.BtnArray">
            <summary>
            User defined buttons stored in an array. 
            Only one of parameter \Buttons or \BtnArray can be used at the same time.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs.Icon">
            <summary>
            Defines the icon to be displayed. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMessageBoxEventArgs.Image">
            <summary>
            The name of the image to be used.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs">
            <summary>
            UIMsgBox (User Interaction Message Box).
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.SendAnswer(ABB.Robotics.Controllers.RapidDomain.UIButtonResult)">
            <summary>
            Send response to the UI-Instruction
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.GetArguments">
            <summary>
            Get all arguments from the UI-Instruction
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.Header">
            <summary>
            Header text to be written at the top of the message box.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.MsgLine1">
            <summary>
            Text line 1 to be written on the display.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.MsgLine2">
            <summary>
            Text line 2 to be written on the display.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.MsgLine3">
            <summary>
            Text line 3 to be written on the display.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.MsgLine4">
            <summary>
            Text line 4 to be written on the display.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.MsgLine5">
            <summary>
            Text line 5 to be written on the display.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.Wrap">
            <summary>
            Concatenates MsgArray to one string.
            </summary>
            <remarks>
            If selected, all the specified strings in the argument MsgArray will be 
            concatenated to one string with a single space between each individual string 
            and using as few lines as possible.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.Buttons">
            <summary>
            Defined buttons in the MessageBox dialog
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.Icon">
            <summary>
            Defines the icon to be displayed. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIMsgBoxEventArgs.Image">
            <summary>
            The name of the image that should be used.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs">
            <summary>
            UINumEntry (User Interaction Number Entry).
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.SendAnswer(System.Double)">
            <summary>
            Send response to the UI-Instruction
            </summary>
            <param name="value">Input numeric value</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.GetArguments">
            <summary>
            Get all arguments from the UI-Instruction
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.Header">
            <summary>
            Header text to be written at the top of the message box.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.Message">
            <summary>
            One text line to be written on the display. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.MsgArray">
            <summary>
            Several text lines from an array to be written on the display.
            Only one of parameter Message or MsgArray can be used at the same time.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.Wrap">
            <summary>
            Concatenates MsgArray to one string.
            </summary>
            <remarks>
            If selected, all the specified strings in the argument MsgArray will be 
            concatenated to one string with a single space between each individual string 
            and using as few lines as possible.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.Icon">
            <summary>
            Defines the icon to be displayed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.InitValue">
            <summary>
            Initial value that is displayed in the entry box.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.MaxValue">
            <summary>
            The maximum value for the return value.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.MinValue">
            <summary>
            The minimum value for the return value.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumEntryEventArgs.AsInteger">
            <summary>
            Eliminates the decimal point from the number pad to ensure 
            that the return value is an integer.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs">
            <summary>
            UINumTune (User Interaction Number Tune).
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.SendAnswer(System.Double)">
            <summary>
            Sends response to the UI-Instruction
            </summary>
            <param name="value">Input numeric value</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.GetArguments">
            <summary>
            Gets all arguments from the UI-Instruction
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.Header">
            <summary>
            Header text to be written at the top of the message box.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.Message">
            <summary>
            One text line to be written on the display. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.MsgArray">
            <summary>
            Several text lines from an array to be written on the display.
            Only one of parameter Message or MsgArray can be used at the same time.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.Wrap">
            <summary>
            Concatenates MsgArray to one string.
            </summary>
            <remarks>
            If selected, all the specified strings in the argument MsgArray will be 
            concatenated to one string with a single space between each individual string 
            and using as few lines as possible.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.Icon">
            <summary>
            Defines the icon to be displayed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.InitValue">
            <summary>
            Initial value that is displayed in the entry box.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.MaxValue">
            <summary>
            The maximum value for the return value.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.MinValue">
            <summary>
            The minimum value for the return value.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UINumTuneEventArgs.Increment">
            <summary>
            Specifies how much the value should change 
            when the plus or minus button is pressed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UITPEraseEventArgs">
            <summary>
            TPErase (FlexPendant Erase) is used to clear the display of the FlexPendant.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UITPReadFKEventArgs">
            <summary>
            TPReadFK (FlexPendant Read Function Key).
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UITPReadFKEventArgs.SendAnswer(ABB.Robotics.Controllers.RapidDomain.UITPFunctionKey)">
            <summary>
            Sends response to the UI-Instruction
            </summary>
            <param name="value">Function key selection</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UITPReadFKEventArgs.GetArguments">
            <summary>
            Gets all arguments from the UI-Instruction
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UITPReadFKEventArgs.TPText">
            <summary>
            The information text to be written on the display.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UITPReadFKEventArgs.TPFK1">
            <summary>
            The text to be written on function key 1
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UITPReadFKEventArgs.TPFK2">
            <summary>
            The text to be written on function key 2
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UITPReadFKEventArgs.TPFK3">
            <summary>
            The text to be written function key 3
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UITPReadFKEventArgs.TPFK4">
            <summary>
            The text to be written on function key 4
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UITPReadFKEventArgs.TPFK5">
            <summary>
            The text to be written on function key 5
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UITPReadNumEventArgs">
            <summary>
            TPReadNum
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UITPReadNumEventArgs.SendAnswer(System.Double)">
            <summary>
            Sends response to the UI-Instruction
            </summary>
            <param name="value">Number input</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UITPReadNumEventArgs.GetArguments">
            <summary>
            Get all arguments from the UI-Instruction
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UITPReadNumEventArgs.TPText">
            <summary>
            The information text to be written on the display.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UITPWriteEventArgs">
            <summary>
            TPWrite (FlexPendant Write)
            </summary>
            <remarks>
            Message to display is property EventMessage. 
            </remarks>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIInstruction">
            <summary>
            Provides the public UIInstruction interface, available in RW 5.12 and later.
            There is only one UIInstruction object per <see cref="T:ABB.Robotics.Controllers.RapidDomain.Rapid"/>
            object, which is accessible through the <see cref="P:ABB.Robotics.Controllers.RapidDomain.Rapid.UIInstruction"/> property.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstruction.#ctor(ABB.Robotics.Controllers.Controller)">
            <summary>
            Create UIInstruction object.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.RapidDomain.UIInstruction.UIInstructionEvent">
             <summary>
             Unspecified UI-Instruction event (in RW 5.12 or later). 
             </summary>
             <remarks><para>Cannot be used with RW releases earlier than RW 5.12!</para>
             <para>To transfer the response of the operator back to the RAPID program you cast the event argument object 
             received with the event to an object of the correct type and call its SendAnswer method.
             </para></remarks>   
             <example>This example explains how a PC SDK application can use the UIInstructionEvent in order to
             let the operator handle RAPID UI- and TP-instructions from a PC application instead of the FlexPendant. 
             First, a subscription to be notified whenever a UIInstruction event occur in the controller is set up. 
             The event handler then gives some clues how to handle incoming events, indicating different actions 
             depending on the kind of UIInstruction event.
             <code>
             using ABB.Robotics;
             using ABB.Robotics.Controllers;
             ...
             Controller c = new Controller();
             c.Rapid.UIInstruction.UIInstructionEvent += OnUIInstructionEvent;
             ...
             private void OnUIInstructionEvent(object sender, UIInstructionEventArgs e)
             {
               try
               {   
                    // Show the dialog if SEND event, discard any existing dialog if ABORT event,
                    // just write or erase the text message in a "status" bar if POST event. 
                    if (e.InstructionEventType == UIInstructionEventType.Send)
                    {
                         //Force execution from background thread to UI thread by invoking a second event handler.
                         this.Invoke(this.CreateUIInstructionDialog, e);
             
                         //In the CreateUIInstructionDialog handler (not shown), check InstructionType and cast the event argument 
                         //to the correct type, eg UITPReadFKEventArgs. Then create the dialog by using the information 
                         //provided by the properties of the specialised UIInstructionEventArgs object. The same object is used
                         //to transfer the response of the end-user to the RAPID program (SendAnswer method).
                    }
                    else if (e.InstructionEventType == UIInstructionEventType.Abort)
                    {
                         //invoke and remove the existing dialog
                    }
                    else if (e.InstructionEventType == UIInstructionEventType.Post)
                    {
                         // check whether we should ADD new message to the info bar or DELETE an existing message
                         if (e.InstructionType == UIInstructionType.TPWrite)
                         {
                             // before writing the message, force execution to the GUI thread 
                             this.Invoke(this.WriteTPWriteMessage, e);
             
                             // In the second event handler (not shown) retrieve the string to write 
                             // by making a cast to UITPWriteEventArgs and calling its EventMessage property.
                         }
                         else if (e.InstructionType == UIInstructionType.TPErase)
                         {
                             this.Invoke(this.ClearInfoBar, e);
                             // In the ClearInfoBar event handler (not shown), just remove any existing info in the "status bar". 
                         }
                         
                    }
               }
               catch (System.Exception ex)
               {
                 // TODO: Add error handling
               }
             }
             </code>
            </example>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.IAdapterCache">
            <summary>
            Defines the interface of the adapter cache.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IAdapterCache.Controller">
            <summary>
            Gets the controller adapter.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.AdapterCache">
            <summary>
            This class acts as a weak reference cache against all adapters that 
            can be reused within the controller object
            </summary>	
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.AdapterCache.CreateController">
            <summary>
            Creates a new controller adapter.
            </summary>
            <returns>A new controller adapter object.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.AdapterCache.ConfigTypePool">
            <summary>
            Gets the Type pool object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.AdapterCache.DataPool">
            <summary>
            Gets the DataPool object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.AdapterCache.ControllerAdapter">
            <summary>
            Gets the current Controller adapter.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.AdapterCache.ModulePool">
            <summary>
            Gets the pool of Module objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.AdapterCache.ObjectBrowserPool">
            <summary>
            Gets the pool of object browser objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.AdapterCache.SignalPool">
            <summary>
            Gets the pool of IOSignal objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.AdapterCache.UnitPool">
            <summary>
            Gets the pool of IOUnit objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.AdapterCache.BusPool">
            <summary>
            Gets the pool of IOBus objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.AdapterCache.IOSystem">
            <summary>
            Gets the adapter for the IOSystem.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.AdapterCache.Rapid">
            <summary>
            Gets the Rapid adapter.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.AdapterCache.UasAdapter">
            <summary>
            Property used to get the UasAdapter, impled as lazy
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Configuration.GetDeviceId(System.String,System.Boolean)">
            <summary>
            Uses the devices.xml file to get the device id from
            a localized name, this is normally only used for non
            translated nodes, BUT it can be used for these as well.
            (if you know the name)
            </summary>
            <param name="name">Name of node.</param>
            <param name="property">Indicates that we are searching for a property.</param>
            <returns>Id of node.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Configuration.Load(System.String,ABB.Robotics.Controllers.ConfigurationDomain.LoadMode)">
            <summary>
            Loads a cfg file into the database.
            </summary>
            <param name="path">Cfg file path.</param>
            <param name="mode">The load mode.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Configuration.LoadToTemp(System.String)">
            <summary>
            If config(.cfg) file is a ctrl: path, MgROBAPI will not load it to controller and loads only local file.
            Hence, create a temp file to load it to controller and delete it.
            </summary>        
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Configuration.ResetDomain(System.String)">
            <summary>
            Resets a domain to its initial state. All externally created
            instances are removed.
            </summary>
            <param name="name">The name of the domain.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Configuration.Save(System.String,System.String)">
            <summary>
            Saves database domain to a specified file.
            </summary>    
            <param name="destFile">Path of the destination file.</param>
            <returns></returns>
            <remarks>
            The method overwrites the specified file if it exists.
            Requires UAS grant UAS_BACKUP.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Configuration.DemandFirstXmlElement(System.String,System.Xml.XmlTextReader)">
            <summary>
            Searches the reader for the first occurance for a
            element with a matching name.
            </summary>
            <param name="name">Name of element.</param>
            <param name="reader">Reader to search.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Configuration.GetDevicesXml">
            <summary>
            Gets the devices.xml file from the cache
            or the controller, either way we return a reference
            to a FileInfo object stored in %temp%.
            </summary>
            <returns>FileInfo object pointing to devices.xml</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Configuration.TryFindDeviceId(System.String,System.Xml.XmlTextReader)">
            <summary>
            Tries to find a the id of a device.
            </summary>
            <param name="reader">Reader to search.</param>
            <param name="name">Device to find.</param>
            <returns>Id or null if not present.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Configuration.TryFindPropertyId(System.String,System.Xml.XmlTextReader)">
            <summary>
            Tries to find a the id of a property.
            </summary>
            <param name="reader">Reader to search.</param>
            <param name="name">Property to find.</param>
            <returns>Id or null if not present.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Configuration.TryFindIdInDevices(System.String,System.String,System.String,System.Xml.XmlTextReader)">
            <summary>
            Attempts to find an id of an element within devices.xml.
            </summary>
            <param name="name">Name.</param>
            <param name="element">Element to search.</param>
            <param name="demand">Element scope.</param>    
            <param name="reader">Reader to search.</param>
            <returns>The id or null if not present.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.Controller">
            <summary>
            The controller is the main entrypoint into the object
            model for the api.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.CheckAvailability(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{ABB.Robotics.Internal.MastershipResource},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Checks Availability preconditions for performing an action on the controller.
            </summary>
            <param name="requiredGrants">Required UAS grants (can be null)</param>
            <param name="requiredMastership">Required mastership resources (can be null)</param>
            <param name="allowedInSysFail"></param>
            <param name="allowedInExecuting"></param>
            <param name="requiresLogon"></param>
            <returns>Reason why the action is not permitted, or DisableReason.None if all conditions are met.</returns>
            <remarks>
            Mastership is only checked for a connection with MastershipPolicy.Manual.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.GetUiCulture">
            <summary>
            Gets the current culture.
            </summary>
            <returns>The culture for the event log.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.GetControllerCulture">
            <summary>
            Gets the current language of the controller from
            the LANGUAGE environment variable, if this isn't present
            then the default language is used (english).
            </summary>
            <returns>The culture for the language.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.GetEnvironmentVariable(System.String)">
            <summary>
            Gets the value of an environment variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <returns>The value or null.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.GetEnvironmentVariable(System.String,System.Boolean)">
            <summary>
            Gets the value of an environment variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="throwOnError">Throw the exception if an error occured, 
            otherwise return null.</param>
            <returns>The value or null.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.GetMainComputerServiceInfo">
            <summary>
            Gets service information for the main computer.
            </summary>
            <returns>ServiceInfo object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.GetNetworkSettings">
            <summary>
            Gets the public network settings.
            </summary>
            <returns>Settings object.</returns>   
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.Restart(ABB.Robotics.Controllers.ControllerStartMode)">
            <summary>
            Restarts the controller.
            </summary>
            <param name="mode">The start mode.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.OnConnectionChangedInternal(System.Object,System.EventArgs)">
            <summary>
            OnConnectionChanged event handler to unpack connection changed details and call external eventhandler.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.OnRapidMasterChangeInternal(System.Object,System.EventArgs)">
            <summary>
            OnRapidMasterChange event handler to unpack connection changed details and call external eventhandler.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.Subscribe(Adapters.EventId,System.Object,System.EventHandler)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.UnpackConnectionChanged">
            <summary>
            Unpacks the ConnectionChanged, gets the details in ConnectionChangedEventArgs.
            </summary>        
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.UnpackOperatingModeChanged">
            <summary>
            Unpacks the OperatingMode, gets the current mode for OperatingModeChangeEventArgs.
            </summary>        
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.UnpackBackupCompleted">
            <summary>
            Unpacks the BackupCompleted, gets the BackupEventInfo for BackupEventArgs.
            </summary>        
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.UnpackAutoConditionsChanged">
            <summary>
            Unpacks the AutoConditionsChanged, gets the AutoCondList in AutoConditionsChangedEventArgs.
            </summary>        
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.UnpackStateChanged">
            <summary>
            Unpacks the State, gets the current mode for OperatingModeChangeEventArgs.
            </summary>        
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.Unsubscribe(System.EventHandler)">
            <summary>
            Unsubscribe the ConnectionStateChanged event handler.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Controller.Unsubscribe(System.UInt32)">
            <summary>
            Unsubscribe the event handler for the specified cookie ID.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Controller.IsConsumerAnAddin">
            <summary>
            True when executing as an addin within RobotStudio.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Controller.MastershipPolicy">
            <summary>
            Specifies how mastership should be handled by a GUI client
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.ControllerLink">
            <summary>
            Acts as the link between external and internal Controller objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerLink.AddExternal(ABB.Robotics.Controllers.Controller)">
            <summary>
            Adds a ref to the external object that uses
            the internal object.
            </summary>
            <param name="external">External object.</param>
            <returns>The internal controller object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerLink.Dispose">
            <summary>
            Disposes the current object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerLink.InUse">
            <summary>
            Checks if the controller for this link is in use.
            </summary>
            <returns>True if the link is in use, otherwise false.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.ControllerManager">
            <summary>
            This singleton class manages the connection between internal and
            public controller object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerManager.#ctor">
            <summary>
            Singleton constructor.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerManager.GetController(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the matching internal controller.
            </summary>
            <param name="external">External controller object.</param>
            <returns>The external controller object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerManager.ConfigureAdapters">
            <summary>
            Configures the Adapter layer
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerManager.DisposeControllerLinks(System.Boolean)">
            <summary>
            Disposes all controller links.
            </summary>
            <param name="checkUsage">True to only dispose unused links.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerManager.InternalGetController(ABB.Robotics.Controllers.Controller)">
            <summary>
            Implements the GetController function.
            </summary>
            <param name="external">External controller object</param>
            <returns>The internal controller object for specified url.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerManager.OnCleanup(System.Object)">
            <summary>
            Called during the cleanup cycle.
            </summary>
            <param name="state">Currently not in use.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerManager.Shutdown">
            <summary>
            Shuts down the manager and therefore the runtime.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerManager.StartCleanup">
            <summary>
            Starts the cleanup cycle.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.ControllerManager.StopCleanup">
            <summary>
            Stops the cleanup cycle.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.ControllerManager.Instance">
            <summary>
            Gets the singele controller manager instance.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.ControllerManager.IsUnloading">
            <summary>
            Gets a flag to indicate if the runtime is unloading or not.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.IO.IOMostCommon">
            <summary>
            Data access object for most common IO.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOMostCommon.GetSignals">
            <summary>
            Gets all most common signals.
            </summary>
            <returns>The most common signals.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.IO.IOSignal">
            <summary>
            Data access object for signal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOSignal.GetMaxValue(System.String)">
            <summary>
            Gets the maximum value for a signal.
            </summary>
            <param name="instance">Signal instance.</param>
            <returns>The max value of the signal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOSignal.GetMinValue(System.String)">
            <summary>
            Gets the maximum value for a signal.
            </summary>
            <param name="instance">Signal instance.</param>
            <returns>The max value of the signal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOSignal.GetUnitMap(System.String)">
            <summary>
            Gets the unit map for the signal.
            </summary>
            <param name="instance">Signal id.</param>
            <returns>Unit map for signal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOSignal.GetUnit(System.String)">
            <summary>
            Gets the unit for a signal.
            </summary>
            <param name="instance">Signal instance.</param>
            <returns>The unit of the signal.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.IO.IOSignal.UnitMap">
            <summary>
            Holds the bounds for a unit mapping
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.IO.IOSignals">
            <summary>
            Data access layer for IOSignals
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.IO.IOSignals.GetSignals">
            <summary>
            Gets all IO signals.
            </summary>
            <returns>Array of signals.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.Rapid.Rapid">
            <summary>
            Data access object for Rapid.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.Rapid.RapidTask">
            <summary>
            Data access object for RapidTask.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.Motion.Robot">
            <summary>
            Data access object for ROBOT type.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.DAL.Motion.Robot.GetRobotType(System.String)">
            <summary>
            Gets the value of the use_robot_type attribute.
            </summary>
            <param name="name">Name of instance.</param>
            <returns>The ROBOT_TYPE name for this robot.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.Motion.RobotSerialNumber">
            <summary>
            Provides access to the robot serial number
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.DAL.Motion.RobotType">
            <summary>
            Provides data access to the ROBOT_TYPE in Cfg.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.Devices">
            <summary>
            Manages all devices of the controller
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Environment.GetVariable(System.String)">
            <summary>
            Gets the  value of a variable by name.
            </summary>
            <param name="name">Name of variable, without ()$</param>
            <returns>The value if available.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Environment.ExpandEnvironmentVariables(System.String)">
            <summary>
            Expands environment variables within a string.
            </summary>
            <param name="text">Text with variables to expand.</param>
            <returns>The expanded string.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Environment.HandleConnectionChanged(System.Boolean)">
            <summary>
            Handles connection changed events from the controller.
            </summary>
            <param name="connected">True if connected.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Environment.Backup">
            <summary>
            Gets the (BACKUP)$ variable.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Environment.Home">
            <summary>
            Gets the (HOME)$ variable.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Environment.Internal">
            <summary>
            Gets the (INTERNAL)$ variable.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Environment.Language">
            <summary>
            Gets the path to the language folder.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Environment.Release">
            <summary>
            Gets the (RELEASE)$ variable.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Environment.Syspar">
            <summary>
            Gets the (SYSPAR)$ variable.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Environment.System">
            <summary>
            Gets the (SYSTEM)$ variable.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Environment.Temp">
            <summary>
            Gets the (TEMP)$ variable.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.Clear">
            <summary>
            Clears all logs.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.Clear(System.Int32)">
            <summary>
            Clear all messages from the domain.
            </summary>
            <param name="id">Domain id.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.GetCategories">
            <summary>
            Gets all available eventlog categories.
            </summary>
            <returns>Available categories.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.GetDescriptors(System.Int32,System.Int32)">
            <summary>
            Gets all descriptions for the domain + message combination.
            </summary>
            <param name="domainId">Domain id.</param>
            <param name="messageNumber">Message number.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.Init">
            <summary>
            Some late initialization.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.UpdateMessages(System.Int32,System.Collections.Generic.LinkedList{ABB.Robotics.Controllers.EventLogDomain.EventLogMessage})">
            <summary>
            Gets all messages for a single category.
            </summary>
            <param name="category">Category id.</param>    
            <param name="dest">List to update.</param>
            <returns>The list of new messages.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.CompileForCategories(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Compiles a XPathExpression for Categories namespace.
            </summary>
            <param name="expression">Expression to parse.</param>
            <param name="navigator">Navigator object used to compile.</param>
            <returns>The expression.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.ClearCachedData">
            <summary>
            Clears all cached data from this instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.CreateNavigator(System.IO.Stream)">
            <summary>
            Creates an XPath from the stream.
            </summary>
            <param name="stream">Stream containing a xml document.</param>
            <returns>The XPath navigator.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.CreateDomains">
            <summary>
            Creates the domain objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.Download(System.String)">
            <summary>
            Downloads a file from the controller to the local
            system, uses the cached version if available.
            </summary>
            <param name="path">Path to file.</param>
            <returns>Local file copy.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.UpdateInternalQueue(ABB.Robotics.Controllers.Internal.EventLog.Domain,System.Collections.Generic.List{Adapters.EventLogMessage})">
            <summary>
            Enqueues the list of messages into the interan queue.
            </summary>
            <param name="messages">Messages to enqueue.</param>
            <param name="domain">Domain to update.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.RemoveOldMessages(ABB.Robotics.Controllers.Internal.EventLog.MessageQueue,System.Collections.Generic.List{Adapters.EventLogMessage})">
            <summary>
            Iterates through the internal queue and for each iteration
            it searches the message collection. If the message from the queue
            isn't found in the message list, the message is removed.
            </summary>
            <param name="queue">Queue to update.</param>
            <param name="messages">List of messages.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.EnqueueNewMessages(ABB.Robotics.Controllers.Internal.EventLog.Domain,System.Collections.Generic.List{Adapters.EventLogMessage},System.Collections.Generic.Stack{ABB.Robotics.Controllers.Internal.EventLogMessage})">
            <summary>
            Enqueues all messages from the start index to end of list.
            </summary>    
            <param name="messages">The messages.</param>
            <param name="domain">The domain.</param>
            <param name="new">New messages are pushed here, can be null.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.RelinkInternalQueue(ABB.Robotics.Controllers.Internal.EventLog.Domain,System.Collections.Generic.List{Adapters.EventLogMessage})">
            <summary>
            Relinks the internal queue.
            </summary>
            <param name="messages">The messages.</param>
            <param name="domain">Domain to update.</param>
            <returns>The index in the list where the last message was found.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.FindNewMessages(ABB.Robotics.Controllers.Internal.EventLog.Domain,System.Collections.Generic.LinkedList{ABB.Robotics.Controllers.EventLogDomain.EventLogMessage})">
            <summary>
            Finds all messages in the domain that isn't found in
            the list.
            </summary>
            <param name="domain">The domain to search.</param>
            <param name="list">The list to match against.</param>
            <returns>All new messages.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.GetAdapter(System.Int32)">
            <summary>
            Gets the Eventlog adapter.
            </summary>
            <param name="domainId">The domainId.</param>
            <returns>Adapter object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.GetDomain(System.Int32)">
            <summary>
            Gets the Domain object.
            </summary>
            <param name="domainId">Domain id.</param>
            <returns>The domain.</returns>
            <exception cref="T:System.ArgumentException">If domain isn't found.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.GetElogDomainPath">
            <summary>
            Gets the path of the elog_domain.xml file on the controller.
            </summary>
            <returns>The controller path.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.GetElogRegistryPath">
            <summary>
            Gets the path of the _elogtext_registry file on the controller.
            </summary>
            <returns>The path.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.GetRegistry">
            <summary>
            Gets the registry instance.
            </summary>
            <returns>The registry instance.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.LoadCategories">
            <summary>
            Copies .xml file containing all domains from the controller to 
            the local file system, caches it and then load the content into memory. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.MergeCategories(System.Collections.Generic.List{ABB.Robotics.Controllers.Internal.EventLogCategory},System.Collections.Generic.List{ABB.Robotics.Controllers.Internal.EventLogCategory})">
            <summary>
            Merges the two lists into a single. 
            </summary>
            <param name="static">The statis list.</param>
            <param name="dynamic">The dynamic list.</param>
            <returns>The combined list, stored in the static object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.GetDynamicCategories(ABB.Robotics.Controllers.Internal.EventLogRegistry)">
            <summary>
            Gets all dynamic registries from the eventlog registry file.
            </summary>
            <param name="reg">The event log registry.</param>
            <returns>The list of dynamic registries.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.GetStaticCategories">
            <summary>
            Gets all static categories from the elog domains xml file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.MessageExists(System.Collections.Generic.IEnumerator{ABB.Robotics.Controllers.Internal.EventLogMessage},ABB.Robotics.Controllers.EventLogDomain.EventLogMessage)">
            <summary>
            Checks if the message exists within the queue.
            </summary>
            <param name="queue">The queue to check.</param>
            <param name="externalMessage">The message to find.</param>
            <returns>True if the message existed.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.MessageExists(System.Collections.Generic.LinkedList{ABB.Robotics.Controllers.EventLogDomain.EventLogMessage},ABB.Robotics.Controllers.Internal.EventLogMessage)">
            <summary>
            Checks if the message exists in the external list.
            </summary>
            <param name="list">List to check.</param>
            <param name="message">Message to find.</param>
            <returns>True if the message is found.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.OpenFile(System.String)">
            <summary>
            Downloads and opens a file from the controller.
            This method must be called within the context of a lock.
            The stream is only opened for reading.
            </summary>
            <param name="path">Path to file.</param>
            <returns>The local stream.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.Parse(System.String,System.Int32,System.Int32)">
            <summary>
            Parses the specified path.
            </summary>
            <param name="path">The path.</param>
            <param name="domainId">The domain id.</param>
            <param name="messageNumber">The message number.</param>
            <returns>The message descriptor object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.ParseCategories(System.IO.Stream)">
            <summary>
            Parses the xml stream into a list of category objects.
            </summary>
            <param name="xmlStream">Stream to parse.</param>
            <returns>The parsed categories.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.RemoveOldMessages(ABB.Robotics.Controllers.Internal.EventLog.Domain,System.Collections.Generic.LinkedList{ABB.Robotics.Controllers.EventLogDomain.EventLogMessage})">
            <summary>
            Removes all old messages from the linked list.
            </summary>
            <param name="domain">Domain with current messsages.</param>
            <param name="list">The list to remove messages from.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.TryDeleteFile(System.IO.FileInfo)">
            <summary>
            Attempts to delete the file refered to by the FileInfo object.
            </summary>
            <param name="file">FileInfo instance.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.TryFindTitle(System.Int32,System.Int32,System.IO.Stream,ABB.Robotics.Controllers.Internal.CompositeString@)">
            <summary>
            Tries to find the title.
            </summary>
            <param name="domainId">The domain id.</param>
            <param name="messageNumber">The message number.</param>
            <param name="stream">The stream.</param>
            <param name="title">The title.</param>
            <returns>True if the title was found.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.UpdateInternalLog(System.Int32)">
            <summary>
            Updates the internal log cache.
            </summary>
            <param name="domainId">The domainId.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.UpdateList(System.Int32,System.Collections.Generic.LinkedList{ABB.Robotics.Controllers.EventLogDomain.EventLogMessage})">
            <summary>
            Updates the list to match the internal state for the 
            supplied domain id.
            </summary>
            <param name="domainId">Domain id.</param>
            <param name="list">List to update.</param>   
            <returns>The list of new objects.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.Subscribe(Adapters.EventId,System.Object,System.EventHandler)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.Unsubscribe(System.UInt32)">
            <summary>
            Unsubscribes the event for the specified cookie.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.MessageQueue.Remove(System.Int32)">
            <summary>
            Removes the domain messages.
            </summary>
            <param name="domainId">The domain id.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.MessageQueue.RemoveRange(System.Collections.Generic.IEnumerable{ABB.Robotics.Controllers.Internal.EventLogMessage})">
            <summary>
            Removes the range of messages.
            </summary>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLog.MessageQueue.Trim(System.Collections.Generic.IEnumerable{ABB.Robotics.Controllers.Internal.EventLogMessage})">
            <summary>
            Trims all excessive messages from the queue.
            </summary>
            <param name="subset">The subset.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogCategory.Clear">
            <summary>
            Clears all the messages in the log.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogCategory.UpdateMessages(System.Collections.Generic.LinkedList{ABB.Robotics.Controllers.EventLogDomain.EventLogMessage})">
            <summary>
            Gets the messages for this category.
            </summary>
            <param name="messages">Linkedlist of messages to update.</param>
            <returns>A list of new messages.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogCategory.Id">
            <summary>
            The id of this EventLogCategory.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogCategory.Log">
            <summary>
            Returns the log to which this category belongs
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogCategory.LocalizedName">
            <summary>
            Gets the localized name of the category.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.EventLogMessage">
            <summary>
            This class extends the eventlog message class to fit the
            normal structure of api programming.
            </summary>	
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogMessage.GetActionDescription">
            <summary>
            Gets the action description text.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogMessage.GetArguments">
            <summary>
            Gets the argument list for this message.
            </summary>
            <returns>The argument list.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogMessage.GetBody">
            <summary>
            Gets the body of the event log.
            </summary>
            <returns>Body as Xml.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogMessage.GetCausesDescription">
            <summary>
            Gets the causes description text.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogMessage.GetConsequencesDescription">
            <summary>
            Gets the consequences description.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogMessage.GetDescription">
            <summary>
            Gets the description text.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogMessage.GetTitle">
            <summary>
            Gets the title of message.
            </summary>
            <returns>The text.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogMessage.MapToPublicType(System.Int32)">
            <summary>
            Maps the internal int to a public type.
            </summary>
            <param name="internal">Type.</param>
            <returns>Public type.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogMessage.UpdateDescriptionFields">
            <summary>
            Updates all description fields if needed, otherwise this
            method does nothing and returns as fast as possible.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogMessage.UpdateDescriptionFields(ABB.Robotics.Controllers.Internal.EventLogDescriptor)">
            <summary>
            Updates the internal description fields from the dictionary content.
            </summary>
            <param name="descriptor">Message descriptor object.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.Actions">
            <summary>
            Gets the action string.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.Causes">
            <summary>
            Gets the causes text.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.Consequences">
            <summary>
            Gets the consequences text.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.Description">
            <summary>
            Gets the message description.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.DomainId">
            <summary>
            Gets the if of the domain.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.Next">
            <summary>
            Gets/Sets the next event log message in the queue.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.Number">
            <summary>
            Gets the number of the message.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.Previous">
            <summary>
            Gets/Sets the previous message.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.SequenceNumber">
            <summary>
            Gets the sequence number of the message.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.Timestamp">
            <summary>
            Gets the timestamp of the message.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.Title">
            <summary>
            Gets the title of the message.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.EventLogMessage.Type">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.GetTextPath(System.Int32,System.Int32)">
            <summary>
            Gets the path to file containing the message text.
            </summary>
            <param name="domain">Domain id.</param>
            <param name="number">Event log number.</param>
            <returns>The path to the file.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.GetTitlePaths">
            <summary>
            Returns a list containing the paths to all titles.
            </summary>
            <returns>All titles.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.GetDomainSources">
            <summary>
            Gets all domain sources.
            </summary>
            <returns>All domain sources.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.Parse(System.Globalization.CultureInfo,System.IO.Stream)">
            <summary>
            Parses a registry instance from the stream.
            </summary>
            <param name="registry">Registry stream.</param>
            <param name="culture">Controller culture.</param>
            <returns>An registry instance.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.AddDomainSources(System.Globalization.CultureInfo,System.Xml.XPath.XPathNavigator)">
            <summary>
            Adds a registered domain sources in the registry.
            </summary>
            <param name="culture">Current controller culture.</param>
            <param name="current">Current element.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.AddEntries(System.Globalization.CultureInfo,System.Xml.XPath.XPathNavigator)">
            <summary>
            Adds all domains from the navigator object.
            </summary>
            <param name="culture">Culture.</param>
            <param name="current">XPath navigator.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.AddTitles(System.Globalization.CultureInfo,System.Xml.XPath.XPathNavigator)">
            <summary>
            Adds all title files to the registry.
            </summary>
            <param name="current">Navigator object.</param>    
            <param name="culture">Culture of controller; used to create the fullpath.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.CombinePath(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Combines the arguments into a complete path.
            </summary>
            <param name="pre">Pre part.</param>
            <param name="culture">Culture separator.</param>
            <param name="post">Post part.</param>
            <returns>The path.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.CreateDomain(System.Globalization.CultureInfo,System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates the domain object.
            </summary>
            <param name="culture">The culture.</param>
            <param name="nav">The navigator object.</param>
            <returns>A domain instance.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.CombineLocalizedPath(System.Globalization.CultureInfo,System.Xml.XPath.XPathNavigator)">
            <summary>
            Gets the combined path for any prepath + postpath formatted 
            localization path.
            </summary>
            <param name="nav">Navigator object.</param>
            <param name="culture">Culture.</param>
            <returns>The combined path.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.MapAttributeToValue(System.Xml.XPath.XPathNavigator,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Maps the attribute to value.
            </summary>
            <param name="nav">The nav.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="domain">The domain.</param>
            <param name="pre">The prepath.</param>
            <param name="post">The postpath.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.RunExpression(System.String,System.Xml.XPath.XPathNavigator,System.Globalization.CultureInfo,ABB.Robotics.Controllers.Internal.EventLogRegistry.ExpressionCallback)">
            <summary>
            Executes a XPath expression and invokes the callback once
            for every match.
            </summary>
            <param name="expression">The expression to execute.</param>
            <param name="nav">The navigator.</param>
            <param name="culture">Current controller culture.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogRegistry.Domain.GetPath(System.Int32,System.Int32)">
            <summary>
            Returns the path to the file if domain + number
            matches the current object.
            </summary>
            <param name="domain">Domain.</param>
            <param name="number"></param>
            <returns>The path if match, otherwise null.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogDescriptor.Parse(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Parses the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="domain">The domain.</param>
            <param name="number">The number.</param>
            <returns>The descriptor.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogDescriptor.ReadDomain(System.Xml.XmlTextReader,ABB.Robotics.Controllers.Internal.EventLogDescriptor,System.Int32)">
            <summary>
            Reads the domain element.
            </summary>
            <param name="reader">The reader.</param>
            <param name="desc">The desc.</param>
            <param name="number">The number of the event.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventLogDescriptor.ReadToMessage(System.Xml.XmlTextReader,System.String)">
            <summary>
            Reads to message is found.
            </summary>
            <param name="reader">The reader.</param>
            <param name="number">The number.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.EventServer">
            <summary>
            This class acts as a eventserver within one single
            controller.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.EventServer.Sink">
            <summary>
            Defines an event sink object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.EventServer.Sink.Process">
            <summary>
            Sinks the event into the source.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.FileCache">
            <summary>
            Stores downloaded files %temp% to avoid multiple downloads 
            of immutable files from a controller. The files are stored / System Id.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCache.#ctor(ABB.Robotics.Controllers.Internal.Controller)">
            <summary>
            Initializes the FileCache object.
            </summary>
            <param name="ctrl">The controller.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCache.Add(System.String,System.IO.FileInfo)">
            <summary>
            Adds a file to the cache.
            </summary>
            <param name="key">Key for file.</param>
            <param name="file">FileInfo object</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCache.Add(System.String,System.IO.Stream)">
            <summary>
            Adds a stream to the cache.
            </summary>
            <param name="key">Key for file.</param>
            <param name="stream">FileStream to add.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCache.GetStream(System.String)">
            <summary>
            Gets a readonly stread to one of the cached files
            identified by the key.
            </summary>
            <param name="key">Key for file.</param>
            <returns>A readonly stream.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCache.GetToTemp(System.String)">
            <summary>
            Gets a File from cache but creates a copy in temp for exclusive access.
            </summary>
            <param name="key">File key.</param>
            <returns>Info object for file.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCache.Invalidate">
            <summary>
            Invalidates the content of the cache.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCache.CopyStreamToTemp(System.IO.Stream)">
            <summary>
            Copies the content of source to a temp file within the %temp% folder.
            </summary>
            <param name="source">Source stream.</param>
            <returns>File info for target.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCache.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies content of source into destionation.
            Rewinds the source prior to copy.
            </summary>
            <param name="source">Source stream.</param>
            <param name="destination">Destination stream.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.FileCache.ROStream">
            <summary>
            Decorator object used to implement readonly streams
            for "normal" streams.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.FileCache.TempFileStream">
            <summary>
            very simple specialization that always opens a stream
            within %temp% with a temporary name, read write access
            and no sharing at all.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.FileCacheException">
            <summary>
            This exception is thrown whenever a FileCache failes. The message
            contains the reason in clear text.
            </summary>
            <exclude />
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCacheException.#ctor">
            <summary>
            Creates a FileCacheException object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCacheException.#ctor(System.String)">
            <summary>
            Creates a FileCacheException object.
            </summary>
            <param name="message">Message for exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCacheException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a FileCacheException object.
            </summary>
            <param name="message">Message for exception.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCacheException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserailzation constructor.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileCacheException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginCopyDirectory(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts an async directory copy operation.
            </summary>
            <param name="source">Directory source.</param>
            <param name="destination">Directory destination.</param>
            <param name="overwrite">True, to overwrite any existing directory.</param>
            <param name="callback">Callback method.</param>
            <param name="state">State object.</param>
            <returns>Async result object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginCopyFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts an async file copy operation.
            </summary>
            <param name="source">Source file.</param>
            <param name="destination">Destination file.</param>
            <param name="callback">Callback.</param>
            <param name="state">User defined state.</param>
            <param name="overwrite">True to overwrite any existing file.</param>
            <returns>Async result object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a new CreateDirectory operation against the contorller.
            </summary>
            <param name="path">Path to new directory.</param>
            <param name="callback">Callback.</param>
            <param name="state">Caller supplied state.</param>
            <returns>IAsyncResult object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a new DirectoryExists operation.
            </summary>
            <param name="path">Path of directory to check.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns>Result object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginDownloadDirectory(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts a recursive download of a directory from the controller.
            </summary>
            <param name="source">Source directory on controller.</param>
            <param name="destination">Destination directory on local computer.</param>
            <param name="overwrite">Overwrite flag.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginDownloadFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts a download operation from the controller.
            </summary>
            <param name="callback">Callback.</param>
            <param name="destination">Destination file.</param>
            <param name="overwrite">Flag to indicate overwrites of destination file.</param>
            <param name="source">File to download.</param>
            <param name="state">State.</param>
            <returns>Result object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginFileExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a file exists operation.
            </summary>
            <param name="path">Path to file.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns>Result object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginGetEntry(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts a get entry operation.
            </summary>
            <param name="path">Path to file.</param>
            <param name="directory">Directory flag.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns>Async result.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginListDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a list operation.
            </summary>
            <param name="filter">Filter.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns>Result object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginRemoveDirectory(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts an Remove directory operation.
            </summary>
            <param name="path">Path to directory.</param>
            <param name="recursive">Recursion flag.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginRemoveFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a remove file operation.
            </summary>
            <param name="path">Path to file.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns>Result object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginRename(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Starts a rename operation.
            </summary>
            <param name="path">To to file or directory to rename.</param>
            <param name="name">New name.</param>
            <param name="callback">Callback.</param>
            <param name="state">state.</param>
            <returns>AsyncResult object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginUploadDirectory(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts the upload of a complete directory.
            </summary>
            <param name="source">Source directory.</param>
            <param name="destination">Destination directory.</param>
            <param name="overwrite">true to overwrite destination.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.BeginUploadFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts a upload operation.
            </summary>
            <param name="source">Source file.</param>
            <param name="destination">Destination file.</param>
            <param name="overwrite">true, to overwrite controller file.</param>
            <param name="callback">Callback.</param>
            <param name="state">State object.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.Download(System.String,System.String)">
            <summary>
            Downloads a file from the controller.
            </summary>
            <param name="source">Source file on controller.</param>
            <param name="destination">Destination file on computer.</param>    
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.Download(System.String,System.String,System.Boolean)">
            <summary>
            Downloads a file from the controller.
            </summary>
            <param name="source">Source file on controller.</param>
            <param name="destination">Destination file on computer.</param>
            <param name="overwrite">True to overwrite the local file.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.DownloadToTemp(System.String)">
            <summary>
            Downloads a file from the controller to a temp file.
            </summary>
            <param name="source">Source file on controller.</param>
            <returns>Temp file.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.Dispose">
            <summary>
            Disposes current object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndCopyDirectory(System.IAsyncResult)">
            <summary>
            Ends a pending directory copy operation.
            </summary>
            <param name="result">Result object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndCopyFile(System.IAsyncResult)">
            <summary>
            Ends a pending Copy file operation.
            </summary>
            <param name="result">Result object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            Ends a pending create directory operation.
            </summary>
            <param name="result">Result object.</param>
            <returns>FileEntry for directory.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndDirectoryExists(System.IAsyncResult)">
            <summary>
            Ends the async directory exists operation.
            </summary>
            <param name="ar">Async result.</param>
            <returns>True if the file exists, otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndDownloadDirectory(System.IAsyncResult)">
            <summary>
            Ends a directory download operation.
            </summary>
            <param name="ar">Async result.</param>
            <returns>Path to downloaded directory.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndDownloadFile(System.IAsyncResult)">
            <summary>
            Ends a download operation.
            </summary>
            <param name="ar">Result.</param>
            <returns>Local path to downloaded file.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndFileExists(System.IAsyncResult)">
            <summary>
            Ends a file exists operation.
            </summary>
            <param name="ar">Async result.</param>
            <returns>True if the file exists.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndGetEntry(System.IAsyncResult)">
            <summary>
            Ends a get entry command.
            </summary>
            <param name="ar">Async result.</param>
            <returns>Entry.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndListDirectory(System.IAsyncResult)">
            <summary>
            Ends a list directory operation.
            </summary>
            <param name="ar">AsycnResult.</param>
            <returns>List of entries.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndRemoveDirectory(System.IAsyncResult)">
            <summary>
            Ends a RemoveDirectory operation.
            </summary>
            <param name="ar">Result.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndRemoveFile(System.IAsyncResult)">
            <summary>
            Ends a remove file operation.
            </summary>
            <param name="ar">Async result.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndRename(System.IAsyncResult)">
            <summary>
            Ends an async rename operation.
            </summary>
            <param name="ar">AsyncResult.</param>
            <returns>New path.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndUploadFile(System.IAsyncResult)">
            <summary>
            Ends a upload operation.
            </summary>
            <param name="ar">Async result.</param>
            <returns>Path of uploaded file.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EndUploadDirectory(System.IAsyncResult)">
            <summary>
            Ends a Upload directory operation.
            </summary>
            <param name="ar">Async result.</param>
            <returns>Path to remote directory.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.ExpandPath(System.String)">
            <summary>
            Expands a path for all environment variables.
            </summary>
            <param name="path">Path to expand.</param>
            <returns>The expanded path.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.FileExists(System.String)">
            <summary>
            Checks if the file exists.
            </summary>
            <param name="path">Path to check.</param>
            <returns>True if the file exists.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.GetDevices">
            <summary>
            Gets an array of available drives.
            </summary>
            <returns>Array of available drives.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.RemoveDirectory(System.String)">
            <summary>
            Removes a directory fromt the controller.
            </summary>
            <param name="path">Path to directory on controller.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.RemoveDirectory(System.String,System.Boolean)">
            <summary>
            Removes a directory fromt the controller.
            </summary>
            <param name="path">Path to directory on controller.</param>
            <param name="recursive">true to remove all directory recursively.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.RemoveFile(System.String)">
            <summary>
            Removes a file from controller.
            </summary>
            <param name="path">Path to file on controller.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.UploadFile(System.String,System.String,System.Boolean)">
            <summary>
            Uploads a file from the local machine to the controller.
            </summary>
            <param name="source">Source.</param>
            <param name="destination">Destination.</param>
            <param name="overwrite">true to overwrite existing.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.AwaitCompletion(ABB.Robotics.Controllers.Internal.FileSystemCmd)">
            <summary>
            Blocks until the command has completed.
            </summary>
            <param name="cmd">Command to wait for.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.CreateStorageDevices(System.Collections.Generic.List{Adapters.StorageDeviceInfo})">
            <summary>
            Creates objects and a new array around the storage device info list.
            </summary>
            <param name="adapterDevices">list of devices.</param>
            <returns>Array of public device objects.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.DemandExceptionFree(ABB.Robotics.Controllers.Internal.FileSystemCmd)">
            <summary>
            Rethrows any exceptions from the Execute call.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.DisposeBrowser(Adapters.FileBrowser)">
            <summary>
            Disposes the FileBrowser object.
            </summary>
            <param name="browser">Browser object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.Dequeue(System.Int32@)">
            <summary>
            Deques a command if available.
            </summary>
            <param name="cmdCount">Number of commands in queue.</param>
            <returns>Command or null.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.EnqeueCommand(ABB.Robotics.Controllers.Internal.FileSystemCmd)">
            <summary>
            Enques a command to the command queue.
            </summary>
            <param name="cmd">Command to enqueue.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.Execute(ABB.Robotics.Controllers.Internal.FileSystemCmd)">
            <summary>
            Executes the command.
            </summary>
            <param name="cmd">Command to execute.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.PostProcessCmd(ABB.Robotics.Controllers.Internal.FileSystemCmd)">
            <summary>
            Processes the command to force a nice end...
            </summary>
            <param name="cmd">Command to process.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.PreProcessCmd(ABB.Robotics.Controllers.Internal.FileSystemCmd,System.AsyncCallback,System.Object)">
            <summary>
            Sets up the command.
            </summary>
            <param name="cmd">Command.</param>
            <param name="callback">Callback.</param>
            <param name="state">State.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.UpdateBrowser">
            <summary>
            Updates the current browser object to reflect
            the current user of the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.Wait(System.Int32)">
            <summary>
            Blocks current thread for a short period
            using Monitor to enable resume if a new message arrives.
            </summary>
            <param name="timeout">Timeout for block.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.FileSystem.WorkerProc(System.Object)">
            <summary>
            This method is executed by a thread from the threadpool, and it shall
            therefore never be called directly from within the code.
            </summary>
            <param name="state">Object state.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.FileSystem.Browser">
            <summary>
            Gets the filebrowser object, this shall only be used
            from any executing command object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.IOSignal">
            <summary>
            An internal IOSignal object
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOSignal.Equals(ABB.Robotics.Controllers.Internal.IOSignal)">
            <summary>
            Compares two signals by name.
            </summary>
            <param name="signal">Signal to compare with.</param>
            <returns>True if names are equal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOSignal.GetAdapter">
            <summary>
            Gets the current signal adapter object.
            </summary>
            <returns>Adapter.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOSignal.Subscribe(Adapters.EventId,System.Object,System.EventHandler,ABB.Robotics.Controllers.EventPriority)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOSignal.UnpackIOSignalStateInfo">
            <summary>
            Unpacks the IOSignalStateInfo, gets the details in SignalChangedEventArgs.
            </summary> 
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOSignal.Unsubscribe(System.UInt32)">
            <summary>
            Unsubscribes the event for the specified cookie.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOSignal.MaxValue">
            <summary>
            Gets the Max value of the signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOSignal.MinValue">
            <summary>
            Gets the Min value of the signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOSignal.Type">
            <summary>
            Gets the type of signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOSignal.Url">
            <summary>
            Gets the url of the signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.IOSignal.Unit">
            <summary>
            Gets the Unit of the signal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.IOSignalCollection">
            <summary>
            a collection of IOSignal objects
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOSignalCollection.Find(System.String)">
            <summary>
            finds a string by name
            </summary>
            <param name="name">name of signal to locate</param>
            <returns>the signal if exist, otherwise null</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOSignalEnumerators.SignalEnumerator.OnMoveNext(System.Int32@,ABB.Robotics.Controllers.Internal.IOSignalCollection)">
            <summary>
            Delegates movement calls to implementing class.
            </summary>
            <param name="index">Start index for search. The next call will be supplied index + 1 as start index.</param>
            <param name="signals">Collection of signals to "search".</param>
            <returns>The matching signal, if found.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOSignalEnumerators.SignalEnumerator.IsMatch(ABB.Robotics.Controllers.Internal.IOSignal)">
            <summary>
            Checks if the signal matches the "search" criteria for the enumerator.
            </summary>
            <param name="signal"></param>
            <returns></returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.IOSystem">
            <summary>
            The internal IOSystem class
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.IOSystem.HandleConnectionChanged(System.Boolean)">
            <summary>
            Handles disconnection from the controller.
            </summary>
            <param name="connected">Connection status.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.MastershipManager">
            <summary>
            This class handles all mastership requests / releases in the system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.#ctor(ABB.Robotics.Controllers.Internal.Controller)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.Internal.MastershipManager"/> class.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.Check(ABB.Robotics.Internal.MastershipResource)">
            <summary>
            Checks if current user is master for the mastership resource.
            </summary>
            <param name="resource">Resource to check.</param>
            <returns>True if current user is master for the resource.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.HostRequest(ABB.Robotics.Controllers.Hosting.MastershipRequestOperation,System.Boolean)">
            <summary>
            Handles the host mastership request.
            </summary>
            <param name="success">True if the host succeeded to get mastership.</param>
            <param name="op">Operation object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.HostRelease(ABB.Robotics.Controllers.Hosting.MastershipReleaseOperation,System.Boolean)">
            <summary>
            Handles the host release.
            </summary>
            <param name="success">True if the host succeeded to release the mastership.</param>    
            <param name="op">Release operation object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.Release(ABB.Robotics.Internal.MastershipResource)">
            <summary>
            Releases mastership for the specified resource.
            </summary>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.ReleaseRMMP">
            <summary>
            Release RMMP
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.Request(ABB.Robotics.Internal.MastershipResource)">
            <summary>
            Requests mastership for the specified resource.
            </summary>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.Subscribe(Adapters.EventId,System.Object,System.EventHandler)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.UnpackMastershipChangedEventArgs(ABB.Robotics.Internal.MastershipResource,ABB.Robotics.Controllers.Internal.Controller)">
            <summary>
            Unpacks the MastershipInfo and MastershipResource, gets the details in MastershipChangedEventArgs.
            </summary> 
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.Unsubscribe(System.UInt32)">
            <summary>
            Unsubscribes the event for the specified cookie.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.DemandValidForRequest(ABB.Robotics.Controllers.ControllerOperatingMode)">
            <summary>
            Demands that the mode is valid for a request.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.GetControllerMode">
            <summary>
            Gets the controller mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.GetDomain(ABB.Robotics.Internal.MastershipResource)">
            <summary>
            Gets the domain.
            </summary>
            <param name="resource">The resource.</param>
            <returns>Matching domain object.</returns> 
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.GetHostResource(ABB.Robotics.Internal.MastershipResource)">
            <summary>
            Gets the host resource fromt the internal type
            </summary>
            <param name="resource">The resource.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.GetApiResource(ABB.Robotics.Controllers.Hosting.MastershipResources)">
            <summary>
            Gets all internal resources from the external flags.
            </summary>
            <param name="resources">External flags resources.</param>
            <returns>Internal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.GetControllerAdapter">
            <summary>
            Gets the controller adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.GetRmmpRetryCount">
            <summary>
            Gets the RMMP retry count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.HasRmmp">
            <summary>
            Checks if the current user has RMMP.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.ModeRequiresRmmp(ABB.Robotics.Controllers.ControllerOperatingMode)">
            <summary>
            Check if the mode requires rmmp.
            </summary>
            <param name="mode">The mode.</param>
            <returns>true if the mode requires rmmp.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.ReleaseRmmp">
            <summary>
            Releases the RMMP.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.RequestRmmp">
            <summary>
            Requests the RMMP from the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.ValidateRmmpState">
            <summary>
            We may have lost rmmp due to a revoke on the controller,
            is isn't manifested in the HasRmmp() call so therefore we
            must verify the mastership status. If the FP has mastership
            then our rmmp isn't valid and we have to release and re-request it.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.TryReleaseRmmp">
            <summary>
            Tries the release RMMP.
            </summary>
            <returns>True on success otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.Domain.#ctor(ABB.Robotics.Controllers.Internal.MastershipManager,ABB.Robotics.Internal.MastershipResource)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.Internal.MastershipManager.Domain"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.Domain.HostRequest">
            <summary>
            Host mastership request succeeded.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.Domain.HostRelease">
            <summary>
            Host release succeeded.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.Domain.Request(ABB.Robotics.Controllers.ControllerOperatingMode)">
            <summary>
            Request mastership.
            </summary>
            <param name="mode">The current mode.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.Domain.Release">
            <summary>
            Releases mastership for this domain.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MastershipManager.Domain.Ensure">
            <summary>
            Ensure mastership.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.MastershipManager.Domain.IsMaster">
            <summary>
            Gets a value indicating whether this instance is master.
            </summary>
            <value><c>true</c> if this instance is master; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.MastershipManager.Domain.IsTpuMaster">
            <summary>
            Gets a flag indicating if the TPU is master or not.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.MechUnit">
            <summary>
            A mechanical unit
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MechUnit.GetCurrentTarget(ABB.Robotics.Controllers.MotionDomain.CoordinateSystemType)">
            <summary>
            Gets the current target without external axes
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MechUnit.GetServiceInfo">
            <summary>
            Gets the service info object for this mechanical unit.
            </summary>
            <returns>ServiceInfo object.</returns>
            <remarks>
            Service information for an external axis is not available.
            </remarks> 
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MechUnit.CreateLastStart(ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice)">
            <summary>
            Creates a time object.
            </summary>
            <param name="mech">DeviceDAL object.</param>
            <returns>DateTime with last start.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MechUnit.CreateServiceInterval(ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice)">
            <summary>
            Creates a service interval object from the mech unit DAL object.
            Uses current UI culture and No Era to calculate the number of
            days / year.
            </summary>
            <param name="mech">DAL object.</param>
            <returns>Service interval</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MechUnit.CreateWarningLevel(ABB.Robotics.Controllers.Internal.DAL.Devices.MechUnitDevice)">
            <summary>
            Creates a warning level object.
            </summary>
            <param name="mech">DAL object.</param>
            <returns>Warning Level</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.MechUnit.Active">
            <summary>
            True if the current object is the active unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.MechUnit.Model">
            <summary>
            Gets the model of the mechincal unit, if not
            available an empty string is returned.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.MechUnit.SerialNumber">
            <summary>
            Gets the serial number from a robot, or string.Empty
            if the mech isn't a robot.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.MotionSystem">
            <summary>
            The internal motion system object model.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MotionSystem.Dispose">
            <summary>
            Cleanup code.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MotionSystem.SetActiveMech(ABB.Robotics.Controllers.Internal.MechUnit)">
            <summary>
            Sets the active mech unit
            </summary>
            <param name="mech">Unit to activate.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MotionSystem.HandleConnectionChanged(System.Boolean)">
            <summary>
            Connection changed.
            </summary>
            <param name="connected">Status of connection.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MotionSystem.Subscribe(Adapters.EventId,System.Object,System.EventHandler)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.MotionSystem.Unsubscribe(System.UInt32)">
            <summary>
            Unsubscribe the event handler for the specified cookie ID.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.MotionSystem.ActiveMech">
            <summary>
            Gets the active mech unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.MotionSystem.Units">
            <summary>
            Gets the mechanical units.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.MotionSystem.SpeedRatio">
            <summary>
            Gets / Sets the current speed ratio.
            Valid range between 0-100.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.MotionSystem.Url">
            <summary>
            Gets the url for the motion system.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.NetworkScanner">
            <summary>
            Handles all network scans in the system. Uses a weakreferenced
            instance that is created at startup
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.ObjectBrowser">
            <summary>
            This class is used when browsing for objects on 
            the controller. The browser itself acts as the 
            root node of browser.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.BrowserNode">
            <summary>
            this is the a node in the browser tree. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.BrowserNode.ClearCache">
            <summary>
            Clears the internal cache.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.BrowserNode.LoadUrl">
            <summary>
            Preloads the url.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.BrowserNode.GetChildNodes">
            <summary>
            Gets the Childnodes.
            </summary>
            <returns>Childnodes.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.BrowserNode.Trace">
            <summary>
            Traces the current node and down.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.BrowserNode.GetCachedChildNodes">
            <summary>
            Gets any cached childnodes.
            </summary>
            <returns>Array of cached nodes.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.Init">
            <summary>
            Used as second step initialization.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.GetSymbol(System.String[],ABB.Robotics.Controllers.RapidDomain.SymbolTypes)">
            <summary>
            Fetches the specified data. The path is as follows:
            0 = Task, 1 = Module, 2 = Symbol
            </summary>
            <param name="path">Path to symbol.</param>
            <param name="types">Types flag.</param>
            <returns>The value of the symbol.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.GetSymbolProperties(ABB.Robotics.Url)">
            <summary>
            Fetches the specified data. The path is as follows:
            0 = Task, 1 = Module, 2 = Symbol
            </summary>
            <param name="rapidUrl">Path to symbol.</param>
            <returns>The value of the symbol.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.Motion(System.String)">
            <summary>
            Gets motion task.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.GetTaskSelectionState(System.String)">
            <summary>
            Gets task selection state of tskname.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.SetTaskSelectionState(System.String,System.Boolean)">
            <summary>
            Sets task selection state of tskname.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.GetTaskEnabledChanged">
            <summary>
            Gets the TaskPanelItem/Task details which has triggered(among all the tasks) the TaskEnabledChanged event.
            Compares the initial and current Enabled changed property of all tasks to find out the TaskEnabledChanged event triggered task.
            </summary>
            <returns>TaskPanelItem which triggered TaskEnabledChanged event.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.SearchSymbols(ABB.Robotics.Controllers.Internal.IRapidSymbolSource,ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,System.String,System.String)">
            <summary>
            Returns all matching symbols from the provided source.
            </summary>
            <param name="source">Symbol source.</param>
            <param name="props">SearchProperties.</param>
            <param name="type">DataType to search for.</param>
            <param name="expression">Expression to search for.</param>
            <returns>All matching symbols.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.HandleConnectionChanged(System.Boolean)">
            <summary>
            Handles any connection change events from
            the controller.
            </summary>
            <param name="connected">Connection status.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.Start(ABB.Robotics.Controllers.RapidDomain.RegainMode,ABB.Robotics.Controllers.RapidDomain.ExecutionMode,ABB.Robotics.Controllers.RapidDomain.ExecutionCycle,ABB.Robotics.Controllers.RapidDomain.StartCheck,System.Boolean)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <param name="regain">Regain mode.</param>
            <param name="execution">Execution mode.</param>
            <param name="cycle">The number of cycles to execute the program.</param>
            <param name="check">Check to perform prior to start.</param>
            <param name="mapError">True to indicate that an exception shall
            be thrown instead of StartResult.Error result.</param>
            <returns>Start result.</returns>		
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.Stop(ABB.Robotics.Controllers.RapidDomain.StopMode)">
            <summary>
            Stops the execution.
            </summary>
            <param name="mode">Stop mode.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.Subscribe(Adapters.EventId,System.Object,System.EventHandler,System.Boolean)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.UnpackExecutionStatus">
            <summary>
            Unpacks the ExecutionStatus, gets the details in ExecutionStatusChangedEventArgs.
            </summary> 
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.UnpackTaskEnabledChanged">
            <summary>
            Unpacks the Task Selection State, gets the details in TaskEnabledChangedEventArgs.
            </summary> 
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.UnpackExecutionChanged">
            <summary>
            Unpacks the ExecutionEventInfo, gets the details in ExecutionChangedEventArgs.
            </summary> 
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Rapid.Unsubscribe(System.UInt32)">
            <summary>
            Unsubscribe the ConnectionStateChanged event handler.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Rapid.ExecutionStatus">
            <summary>
            Gets the execution status of controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Rapid.DataFactory">
            <summary>
            Gets the datafactory object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Rapid.RapidAdapter">
            <summary>
            Gets the Rapid adapter object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Rapid.UIInstructionInternal">
            <summary>
            Gets the UIInstruction object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Rapid.RemainingCycles">
            <summary>
            Gets / Sets the remaining execution cycles.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.Rapid.Url">
            <summary>
            Gets the url of Rapid.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.Internal.Rapid.TaskEnabledChanged">
            <summary>
            This event is raised when the task enabled property changes.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.RapidArraySplitter">
            <summary>
            This class is used as a utility class to split array
            strings into their parts
            </summary>
            <exclude />
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidArraySplitter.Split(System.String,System.Int32)">
            <summary>
            Splits a array string into the specified length.
            </summary>
            <param name="data">String to split.</param>
            <param name="length">Length of string.</param>
            <returns>The subcomponents of the array.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFactory">
            <summary>
            Creates IRapidData objects from strings and 
            RapidSymbol objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataFactory.#ctor(ABB.Robotics.Controllers.Internal.Rapid)">
            <summary>
            Private ctor to prevent external object creation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataFactory.Create(ABB.Robotics.Controllers.RapidDomain.RapidSymbol,System.String)">
            <summary>
            Creates an RapidData instance from the specifed symbol and
            value string.
            </summary>
            <param name="symbol">The Symbol to create a value from.</param>		
            <param name="value">The value to create object for.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataFactory.Create(ABB.Robotics.Controllers.RapidDomain.RapidSymbol,ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Createsa RapidData instance from the specified value and value string.
            </summary>
            <param name="symbol">Symbol of type.</param>
            <param name="value">Preparsed value.</param>
            <returns>The matching IRapidData object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataFactory.Create(ABB.Robotics.Controllers.RapidDomain.RapidSymbol,System.String[])">
            <summary>
            Creates an array of IRapidData objects for a symbol
            from the specified values.
            </summary>
            <param name="symbol">Symbol to create data for.</param>
            <param name="values">Values to create data for.</param>
            <returns>Array of IRapidData objects.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.IRapidSymbolSource">
            <summary>
            Implement this interface on any class that can be 
            searched for rapid symbols, such as Task and Module.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidModule.Save(System.String,System.String)">
            <summary>
            WI 11962 PCSDK 5.60: Module.SaveToFile() give .mod file extension for SYSTEM module
            </summary>
            <param name="path"></param>
            <param name="ext">if system file ext will be .sys else .mod</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.RapidModule.Attributes">
            <summary>
            Gets the attributes of the module.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.RapidRoutine.Module">
            <summary>
            Gets the parent module object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.RapidSymbolSearchAlgorithm">
            <summary>
            This class defines the search algorithm.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.RapidSymbolSearchPropertiesAlgorithm">
            <summary>
            Searches for the specied expression using the supplied symbol search 
            properties.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.RapidSymbolSearcher">
            <summary>
            This class searches for symbols in any symbol provider.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidTask.LoadModule(System.String,ABB.Robotics.Controllers.RapidDomain.RapidLoadMode)">
            <summary>
            Loads a module.
            </summary>
            <param name="path">The module path.</param>
            <param name="mode">The load mode.</param>
            <returns>
            True if the load succeeded without any errors, otherwise false.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidTask.LoadProgram(System.String,ABB.Robotics.Controllers.RapidDomain.RapidLoadMode)">
            <summary>
            Loads the rapid program.
            </summary>
            <param name="path">The path of the .pgf file.</param>
            <param name="mode">The load mode.</param>
            <returns>
            True if the load succeeded without any build errors, otherwise false.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidTask.Start(ABB.Robotics.Controllers.RapidDomain.RegainMode,ABB.Robotics.Controllers.RapidDomain.ExecutionMode,ABB.Robotics.Controllers.RapidDomain.ExecutionCycle,ABB.Robotics.Controllers.RapidDomain.StartCheck,System.Boolean)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <param name="regain">Regain mode.</param>
            <param name="execution">Execution mode.</param>
            <param name="cycle">The number of cycles to execute the program.</param>
            <param name="check">Check to perform prior to start.</param>
            <param name="mapError">True to indicate that an exception shall
            be thrown instead of StartResult.Error result.</param>
            <returns>Start result.</returns>		
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidTask.Stop(ABB.Robotics.Controllers.RapidDomain.StopMode)">
            <summary>
            Stops the execution.
            </summary>
            <param name="mode">Stop mode.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidTask.SaveModule(System.String,System.String,System.String)">
            <summary>
            WI 11962 PCSDK 5.60: Module.SaveToFile() give .mod file extension for SYSTEM module
            </summary>
            <param name="name"></param>
            <param name="path"></param>
            <param name="ext">if system file ext will be .sys else .mod</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidTask.SetPCPToRoutineByUrl(System.String)">
            <summary>
            Set the position of the program pointer
            </summary>
            <exception cref="T:ABB.Robotics.GeneralException"></exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidTask.SetToRoutineAtUserLevel(System.String)">
            <summary>
            Set User PP to selected routine 
            </summary>
            <param name="name">Name of the selected routine</param>
            <exception cref="T:ABB.Robotics.GeneralException"></exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidTask.AbortExecutionLevel">
            <summary>
            Clears and removes the current execution level and the next execution level in the hierarchy is restored
            </summary>
            <exception cref="T:ABB.Robotics.GeneralException"></exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidTask.Subscribe(Adapters.EventId,System.Object,System.EventHandler)">
            <summary>
            Subscribe to an event handler based upon the EventID.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidTask.UnpackPCP(Adapters.EventId)">
            <summary>
            Unpacks the PCP, gets the details in ProgramPositionEventArgs.
            </summary>        
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RapidTask.Unsubscribe(System.UInt32)">
            <summary>
            Unsubscribes the event for the specified cookie.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.RapidTask.Controller">
            <summary>
            Gets the internal controller object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.RapidTask.ExecutionStatus">
            <summary>
            Gets the execution status of the task.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.RapidTask.RemainingCycles">
            <summary>
            Gets / Sets the remaining execution cycles.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.RapidTask.Name">
            <summary>
            Gets the name of the task.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.RapidTask.Adapter">
            <summary>
            Gets the Task adapter object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.RapidTask.ABB#Robotics#Controllers#Internal#IRapidSymbolSource#Task">
            <summary>
            Gets the symbol source object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.RapidTask.ABB#Robotics#Controllers#Internal#IRapidSymbolSource#BlockUrl">
            <summary>
            Gets the block url for this task.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RobotWareManager.GetCurrentSystemName">
            <summary>
            Gets the name of the current system.
            </summary>
            <returns>Name of current system.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RobotWareManager.GetInstalledSystems">
            <summary>
            Gets all installed systems.
            </summary>
            <returns>All installed systems.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.RobotWareManager.HandleConnectionChanged(System.Boolean)">
            <summary>
            Handles connection changes.
            </summary>
            <param name="connected">Connection status.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.Internal.RobotWareManager.Current">
            <summary>
            Gets the current ware object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Internal.Uas">
            <summary>
            User Authentication System
            </summary>	
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Uas.Init">
            <summary>
            Used as second step initialization.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Uas.HandleConnectionChanged(System.Boolean)">
            <summary>
            Handles connection changed events for this subsystem.
            </summary>
            <param name="connected">True if connected, otherwise false.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Uas.HostLogoff">
            <summary>
            Logs of the current user, if no user is logged
            on it ignores this call.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Uas.HostLogon(ABB.Robotics.Controllers.UserInfo,System.Int32)">
            <summary>
            Only for host logon operations, where the host
            already has performed the logon and registration
            and therefore has all the needed information.
            </summary>
            <param name="user">User.</param>
            <param name="id">Id of registered user.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Uas.Logoff">
            <summary>
            logs off the current user
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Uas.Logon(ABB.Robotics.Controllers.UserInfo)">
            <summary>
            attempts to logon a user to the system
            </summary>
            <param name="user">User to logon.</param>		
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Uas.LogoffInternal">
            <summary>
            Logs of the current controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Uas.LogoffInternal(System.Boolean)">
            <summary>
            Core impl of the logoff operation.
            </summary>    
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Uas.LogonInternal(ABB.Robotics.Controllers.UserInfo)">
            <summary>
            Core impl of logon method.
            </summary>
            <param name="user">User to logon.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Internal.Uas.LogonInternal(ABB.Robotics.Controllers.UserInfo,System.Int32)">
            <summary>
            Core impl of logon method.
            </summary>
            <param name="user">User to logon.</param>
            <param name="id">Id of user.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.AnalogSignal">
            <summary>
            This class represent a analog signal.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.Signal">
            <summary>
            This class represents an IO signal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.Signal.#ctor(ABB.Robotics.Controllers.Controller,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Signal"/> class.
            </summary>
            <param name="controller">The controller.</param>
            <param name="name">The name.</param>
            <param name="digital">Flag to indicate a digital signal.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.Signal.#ctor(ABB.Robotics.Controllers.Controller,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Signal"/> class.
            </summary>
            <param name="controller">The controller.</param>
            <param name="name">The name.</param>    
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.Signal.Subscribe(System.EventHandler{ABB.Robotics.Controllers.IOSystemDomain.SignalChangedEventArgs},ABB.Robotics.Controllers.EventPriority)">
            <summary>
            Subscribes to signal changes.
            </summary>
            <param name="EventHandler">EventHandler</param>
            <param name="EventPriority">EventPriority</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.Signal.Unsubscribe(System.EventHandler{ABB.Robotics.Controllers.IOSystemDomain.SignalChangedEventArgs})">
            <summary>
            Unsubscribes to signal changes.
            </summary>
            <param name="EventHandler">EventHandler</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Signal.Value">
            <summary>
            Gets or sets the value of the signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Signal.InputAsPhysical">
            <summary>
            Define if simulate setting of physical input-signals shall be used for the virtual controller. 
            If InputAsPhysical is true is the signal's configured access level not checked.
            Supported from RW5.13
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Signal.InternalSignal">
            <summary>
            sets the internal signal object
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Signal.State">
            <summary>
            Gets the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.SignalState"/> of the signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Signal.MaxValue">
            <summary>
            Gets the maximum value of the signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Signal.MinValue">
             <summary>
            Gets the minimum value of the signal.
             </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Signal.Unit">
             <summary>
            Gets the name of the unit the signal is mapped to.
             </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.Signal.Type">
            <summary>
            Gets the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.SignalType"/> of the signal.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.IOSystemDomain.Signal.Changed">
            <summary>
            Occurs when the value or the state of the signal has changed.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.AnalogSignal.#ctor(ABB.Robotics.Controllers.Controller,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.AnalogSignal"/> class.
            </summary>
            <param name="controller">The controller.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.AnalogSignal.WriteRelative(System.Single)">
            <summary>
            Writes the porcentual value of the analog signal.
            </summary>
            <param name="newProcentualValue">A float value from <b>0</b> to <b>1</b> that represents the new procentual value.</param>
            <exception cref="T:System.ArgumentException"><i>newPorcentualValue</i> The procentual value is not between 0 and 1.</exception>		
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.AnalogSignal.ReadRelative">
            <summary>
            Reads the porcentual value of the analog signal.
            </summary>
            <returns>A float value from <b>0</b> to <b>1</b> that represents the actual procentual value.</returns>		
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal">
            <summary>
            This class represent a digital signal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal.#ctor(ABB.Robotics.Controllers.Controller,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal"/> class.
            </summary>
            <param name="controller">The controller.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal.Pulse">
            <summary>
            Generates a pulse on the digital signal.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal.Pulse(System.Int32)">
            <summary>
            Generates a pulse on a digital signal for a specific period of time.
            </summary>
            <param name="time">Time of pulse in milliseconds.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal.Invert">
            <summary>
            Inverts the value of the digital signal.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal.Set">
            <summary>
            Sets the value of the digital signal to <b>1</b>.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal.Reset">
            <summary>
            Sets the value of the digital signal to <b>0</b>.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal.Get">
            <summary>
            Gets the digital value of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal"/>. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal.IsSet">
            <summary>
            Gets a boolean expression to test if the signal is set
            or not. Uses Value > 0 to test.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal.MaxValue">
            <summary>
            Gets the Max value for the signal.
            </summary>
            <value></value>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.DigitalSignal.MinValue">
            <summary>
            Gets the min value for the signal.
            </summary>
            <value>The Min value.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.GroupSignal">
            <summary>
            This class represent a group signal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.GroupSignal.#ctor(ABB.Robotics.Controllers.Controller,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.GroupSignal"/> class.
            </summary>
            <param name="controller">The controller.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.GroupSignal.Write(System.Int32)">
            <summary>
            Writes a value of the group signal.
            </summary>
            <param name="newValue">New value of the signal.</param>		
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.GroupSignal.WriteGroupValue(System.UInt32)">
            <summary>
            Writes a value of the group signal.
            </summary>
            <param name="newValue">New value of the signal.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.GroupSignal.MaxValue">
            <summary>
            Gets the Max value of the signal.
            Obsolete: Use GroupMaxValue instead
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.GroupSignal.GroupMaxValue">
            <summary> Gets the maximum value of the group signal. </summary>
            <value>An int value that represents the maximum value of the group signal</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.GroupSignal.MinValue">
            <summary>
            Gets the Min value for the signal, always 0
            for a group signal.
            Obsolete: Use GroupMinValue instead
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.GroupSignal.GroupMinValue">
            <summary>
            Gets the Min value for the signal, always 0
            for a group signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.GroupSignal.Value">
            <summary>
            Gets / Sets the value of the signal.
            Obsolete: Use GroupValue instead
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.GroupSignal.GroupValue">
            <summary>
            Gets or sets the value of the group signal
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes">
            <summary>
            Predefined filters used in search for IO signals.
            <seealso cref="T:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection"/>
            </summary>
            <remarks>
            If two or more filters are combined, the result must meet all the criteria.
            </remarks>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes.All">
            <summary>Include all signals included except for safety signals. </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes.System">
            <summary>Include only System signals.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes.Digital">
            <summary>Include only Digital signals.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes.Analog">
            <summary>Include only Analog signals</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes.Group">
            <summary>Include only Group signals.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes.Input">
            <summary>Include only Input signals.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes.Output">
            <summary>Include only Output signals.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes.Unit">
            <summary>Include only Signals that belong to a certain unit.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes.Common">
            <summary>Include only Common signals. If this flag is set, all others are ignored.</summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.IOSystem">
            <summary>
            This class represents the <c>IOSystem</c> domain of a robot controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.IOSystem.GetSignal(System.String)">
            <summary>
            Returns a signal object. 
            </summary>
            <param name="name">The name of the signal.</param>
            <returns>A <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Signal"/> object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.IOSystem.GetSignals(ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes)">
            <summary>
            Gets signals that match a defined filter from the robot controller.
            </summary>
            <param name="filter">Defines the kind of signals to retrieve.</param>
            <returns>A collection of <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Signal"/> objects. 
            If no signal is retrieved the method still returns a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection"/> object,
            but its Count is 0.</returns>
            <remarks>
            GetSignals accepts a combination of several <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes"/> flags as input parameter.
            The retrieved signals meet all of the criteria.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.IOSystem.GetSignals(ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes,System.String)">
            <summary>
            Gets signals that match a defined filter from the robot controller.
            </summary>
            <param name="filter">Defines the kind of signals to retrieve.</param>
            <param name="unit">Defines the Unit to retrieve.</param>
            <returns>A collection of <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Signal"/> objects. 
            If no signal is retrieved the method still returns a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection"/> object,
            but its Count is 0.</returns>
            <remarks>
            GetSignals accepts a combination of several <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.IOFilterTypes"/> flags as input parameter.
            The retrieved signals meet all of the criteria.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.IOSystem.GetBus(System.String)">
            <summary>
            Returns an IO bus object.
            </summary>
            <param name="name"> 
            Name of the bus.
            </param>
            <returns>A <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Bus"/> object.</returns>
            <example>This example gets the bus  named "Virtual1" from the robot controller.
            <code>
            using ABB.Robotics;
            using ABB.Robotics.Controllers;
            using ABB.Robotics.Controllers.RapidDomain;
            ...
            Controller c = new Controller();
            Bus virtualBus = c.IOSystem.GetBus("Virtual1");
            IOBusPhysicalState physState = virtualBus.PhysicalState;
            IOBusLogicalState logState = virtualBus.LogicalState;
            </code>
            </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.IOSystem.GetBuses">
            <summary>
            Gets buses from the robot controller.
            </summary>        
            <returns>A collection of <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Bus"/> objects. 
            If no bus is retrieved the method still returns a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.BusCollection"/> object,
            but its Count is 0.</returns>     
            <example>This example gets all buses of the controller.
            <code>
            using ABB.Robotics;
            using ABB.Robotics.Controllers;
            using ABB.Robotics.Controllers.RapidDomain;
            ...
            Controller c = new Controller();
            BusCollection buses = c.IOSystem.GetBuses();
            IOBusPhysicalState physState = buses[0].PhysicalState;
            IOBusLogicalState logState = buses[0].LogicalState;
            </code>
            </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.IOSystem.GetUnit(System.String)">
            <summary>
            Returns an IO unit object.
            </summary>
            <param name="name">
            Name of the unit.
            </param>
            <returns>A <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Unit"/> object.</returns>
            <example>This example gets the unit named "PANEL".
            <code>
            using ABB.Robotics;
            using ABB.Robotics.Controllers;
            using ABB.Robotics.Controllers.RapidDomain;
            ...
            Controller c = new Controller();
            Unit panelUnit = c.IOSystem.GetUnit("PANEL");
            string address = panelUnit.Address;
            string bus = panelUnit.Bus;
            IOUnitLogicalState logState = panelUnit.LogicalState;
            IOUnitPhysicalState physState = panelUnit.PhysicalState;
            string type = panelUnit.Type;
            </code>
            </example> 
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.IOSystem.GetUnits">
            <summary>
            Gets all IO units from the robot controller.
            </summary>        
            <returns>A collection of <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Unit"/> objects. 
            If no unit is retrieved the method still returns a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.UnitCollection"/> object,
            but its Count is 0.</returns>  
            <example>This example gets the unit named "PANEL".
            <code>
            using ABB.Robotics;
            using ABB.Robotics.Controllers;
            using ABB.Robotics.Controllers.RapidDomain;
            ...
            Controller c = new Controller();
            UnitCollection units = _controller.IOSystem.GetUnits();
            string address = units[0].Address;
            string bus = units[0].Bus;
            IOUnitLogicalState ulogState = units[0].LogicalState;
            IOUnitPhysicalState uphysState = units[0].PhysicalState;
            string type = units[0].Type;
            </code>
            </example> 
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.SignalType">
            <summary>
            Predefined types of IO signals
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.SignalType.AnalogInput">
            <summary>Analog and input</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.SignalType.AnalogOutput">
            <summary>Analog and output</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.SignalType.DigitalInput">
            <summary>Digital and input</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.SignalType.DigitalOutput">
            <summary>Digital and output</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.SignalType.GroupInput">
            <summary>Group and input</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.SignalType.GroupOutput">
            <summary>Group and output</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.SignalType.Unknown">
            <summary>Unknown type</summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection">
            <summary>
            A collection of signal objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection.Add(ABB.Robotics.Controllers.IOSystemDomain.Signal)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Index of value.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection.IndexOf(ABB.Robotics.Controllers.IOSystemDomain.Signal)">
            <summary>
            Gets the index of the signal.
            </summary>
            <param name="value">The value.</param>
            <returns>Index of signal if exists; otherwise -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection.Insert(System.Int32,ABB.Robotics.Controllers.IOSystemDomain.Signal)">
            <summary>
            Inserts the signal at specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The signal.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection.Remove(ABB.Robotics.Controllers.IOSystemDomain.Signal)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection.Contains(ABB.Robotics.Controllers.IOSystemDomain.Signal)">
            <summary>
            Determines whether the collection contains the spcefied value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the collection contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.SignalCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Signal"/> at the specified index.
            </summary>
            <value>Signal object.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.SignalFactory">
            <summary>
            this is a utility class that create instances of Signals
            depending on the supplied IOSignalType enum
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalFactory.Create(System.String,ABB.Robotics.Controllers.Internal.IOSignal,Adapters.IOSignalTypes)">
            <summary>
            Creates a signal object depending on the supplied type.
            </summary>
            <param name="type">Type of signal to create.</param>		
            <param name="internalSignal">Internal signal object.</param>
            <param name="name">Name of signal.</param>
            <returns>the signal object</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalFactory.Create(System.Collections.IEnumerable)">
            <summary>
            Creates a IOSignalCollection from an internal array of signals.
            </summary>
            <param name="signals">Array of signals to create an array for.</param>
            <returns>The signals collection.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.SignalQuality">
            <summary>
            Predefined quality status of a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Signal"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.SignalQuality.Unknown">
            <summary>The quality of the signal value is unknown.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.SignalQuality.Good">
            <summary>The quality of the value is good.</summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.IOSystemDomain.SignalQuality.Bad">
            <summary>The signal value is not useful.</summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.SignalChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.Controllers.IOSystemDomain.Signal.Changed"/> event of a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Signal"/>.
            </summary>	
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.SignalState">
            <summary>
            Represents the current state of a <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.Signal"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalState.Equals(ABB.Robotics.Controllers.IOSystemDomain.SignalState)">
            <summary>
            Equalses the specified state.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalState.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            	<see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalState.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalState.op_Equality(ABB.Robotics.Controllers.IOSystemDomain.SignalState,ABB.Robotics.Controllers.IOSystemDomain.SignalState)">
            <summary>
            Operator ==s the specified s1.
            </summary>
            <param name="s1">The s1.</param>
            <param name="s2">The s2.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalState.op_Inequality(ABB.Robotics.Controllers.IOSystemDomain.SignalState,ABB.Robotics.Controllers.IOSystemDomain.SignalState)">
            <summary>
            Operator !=s the specified s1.
            </summary>
            <param name="s1">The s1.</param>
            <param name="s2">The s2.</param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.SignalState.Value">
            <summary> Gets the value of the signal </summary>
            <value>A value that represents the logical value of the signal.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.SignalState.Simulated">
            <summary> Gets the simulated status of the signal </summary>
            <value><b>true</b> the signal is simulated; <b>false</b> the signal is not simulated.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.SignalState.Quality">
            <summary> Gets the valid status of the signal </summary>
            <value>One of the <see cref="T:ABB.Robotics.Controllers.IOSystemDomain.SignalQuality"/> values.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.IOSystemDomain.SignalChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.Controllers.IOSystemDomain.Signal.Changed"/> event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the SignalChangedEventArgs class.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.IOSystemDomain.SignalChangedEventArgs.Unpack(Adapters.IOSignal)">
            <summary>
            Unpacks Adpater.IOSignalStateInfo details to '_newSignalState'.
            </summary> 
        </member>
        <member name="P:ABB.Robotics.Controllers.IOSystemDomain.SignalChangedEventArgs.NewSignalState">
            <summary> 
            Gets the new state of the signal.
            </summary>		
        </member>
        <member name="T:ABB.Robotics.Controllers.MastershipChangedEventArgs">
            <summary>
            The data from a MastershipChanged event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MastershipChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.MastershipChangedEventArgs"/> class.
            </summary>   
        </member>
        <member name="M:ABB.Robotics.Controllers.MastershipChangedEventArgs.Unpack(ABB.Robotics.Internal.MastershipResource,ABB.Robotics.Controllers.Internal.Controller,Adapters.Controller)">
            <summary>
            Unpack MastershipInfo to MastershipChangedEventArgs to return.
            </summary>        
        </member>
        <member name="P:ABB.Robotics.Controllers.MastershipChangedEventArgs.Resource">
            <summary>
            Gets or sets the resource.
            </summary>
            <value>The resource.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.MastershipChangedEventArgs.Status">
            <summary>
            Gets the current status of the mastership in the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MastershipChangedEventArgs.CurrentUserIsMaster">
            <summary>
            Flag to signal if the current user is master or not.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.MastershipChangedEventHandler">
            <summary>
            Defines the delegate for the Mastership changed event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.Mastership">
             <summary>
            Defines mastership status of a robot controller resource.
             </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Mastership.Request(ABB.Robotics.Controllers.IMastershipResource)">
            <summary>
            Requests mastership of a specified controller resource
            </summary>
            <param name="resource">Resource to request mastership for.</param>
            <returns>An object holding mastership of a specific resource.</returns>
            <exception cref="T:System.InvalidOperationException">Mastership is held by another client.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.Mastership.Ensure(ABB.Robotics.Controllers.IMastershipResource)">
            <summary>
            Ensure method helps for temporarily obtaining mastership for a Controller
            with MastershipPolicy set to Automatic (typically a VC).
            </summary>
            <param name="resource">Resource to ensure mastership for.</param>
            <returns>An object holding mastership of a specific resource.</returns>
            <remarks>
            The operating mode is automatically set to Automatic for a VC connection if needed.
            Resources that were already held are <b>not</b> released when the returned token is disposed.
            If the Controller has MastershipPolicy set to Manual,
            or if the requested resources are already held, this method does nothing.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.Mastership.#ctor(ABB.Robotics.Controllers.IMastershipResource)">
            <summary>
            private ctor to avoid object creation
            </summary>
            <param name="resource">resource to control</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.Mastership.Finalize">
            <summary>
            Releases the mastership as the object goes through the GC.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Mastership.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Mastership.Release">
            <summary>
            Releases any held mastership.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Mastership.Request">
            <summary>
            Requests new mastership.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.Mastership.Ensure">
            <summary>
            Ensures new mastership.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Mastership.IsMaster">
            <summary>
            True if the object is holding mastership, false if not.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.Mastership.ReleaseOnDispose">
            <summary>
            Gets or sets a flag to indicate if the object shall release its mastership
            during Dispose or not, this shall ONLY be changed if a operation forces the
            controller to a restart; otherwise leave this as is.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.Mastership.MastershipChanged">
            <summary>
            This event is raised when mastership is changed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.CoordinateSystemType">
            <summary>
            Predefined coordinate systems.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.CoordinateSystemType.Base">
            <summary>
            Base coordinate system.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.CoordinateSystemType.Undefined">
            <summary>
            A undefined coordinate system.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.CoordinateSystemType.Tool">
            <summary>
            Tool coordinate system.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.CoordinateSystemType.WorkObject">
            <summary>
            Workobject coordite system.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.CoordinateSystemType.World">
            <summary>
            World coordinate system.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit">
            <summary>
            Defines a mechanical unit object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.GetPosition">
            <summary>
            Gets the jointtarget position of the mechanical unit.
            </summary>		
            <returns>The position of the mechanical unit as a <see cref="T:ABB.Robotics.Controllers.RapidDomain.JointTarget"/>.</returns>
            <remarks>Supports all mechanical unit types, including external axis.</remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.GetPosition(ABB.Robotics.Controllers.MotionDomain.CoordinateSystemType)">
            <summary>
            Gets the robtarget position of the mechanical unit.
            </summary>
            <returns>The position of the mechanical unit as a <see cref="T:ABB.Robotics.Controllers.RapidDomain.RobTarget"/>.</returns>
            <remarks>Supports mechanical unit type TCP Robot only.</remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.FineCalibrate(System.Int32)">
            <summary>
            Fine calibrate specified TCP mechanical unit and axis. 
            The current position of the axis will be the new calibration value.
            </summary>
            <param name="axis">Axis to calibrate</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.SetRevolutionCounter(System.Int32)">
            <summary>
            Set revolution counter on a specified TCP mechanical unit and axis.
            </summary>
            <param name="axis"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.GetMechanicalUnitStatus">
            <summary>
            Get status of all mechanical unit axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.GetSingleAxisStatus(System.Int32)">
            <summary>
            Get status for mechanical unit axis
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.IsCalibrated">
            <summary>
            Checks if the mech is calibrated.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.Model">
            <summary>
            Gets the model of the mechanical unit, or string.Empty
            if no model is available.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.NumberOfAxes">
            <summary>
            Gets the number of axes for the mechanical unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.Joints">
            <summary>
            Gets the current position
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.PayLoad">
            <summary>
            Gets the current payload object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.SerialNumber">
            <summary>
            Gets the serial number from the mech if it
            is a robot, otherwise it will return an empty string.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.ServiceInfo">
            <summary>
            Gets service info for this unit.
            This property is not valid for a Virtual Controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.Task">
            <summary>
            Gets the task for this mech unit
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.Tool">
            <summary>
            Gets the current tool object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.Type">
            <summary>
            Gets the type of mechanical unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.WorkObject">
            <summary>
            Gets the current work object for the mechanical unit.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit.DriveModule">
            <summary>
            Gets the current drive module for the mechanical unit.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitCollection">
            <summary>
            A collection of mechanical units
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitCollection"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitCollection.Add(ABB.Robotics.Controllers.MotionDomain.MechanicalUnit)">
            <summary>
            Adds the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>Index of value in collection.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitCollection.IndexOf(ABB.Robotics.Controllers.MotionDomain.MechanicalUnit)">
            <summary>
            Gets the index of the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The index of the value.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitCollection.Insert(System.Int32,ABB.Robotics.Controllers.MotionDomain.MechanicalUnit)">
            <summary>
            Inserts value at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitCollection.Remove(ABB.Robotics.Controllers.MotionDomain.MechanicalUnit)">
            <summary>
            Removes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitCollection.Contains(ABB.Robotics.Controllers.MotionDomain.MechanicalUnit)">
            <summary>
            Determines whether collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if collection contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.Controllers.MotionDomain.MechanicalUnit"/> at the specified index.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitRapidData">
            <summary>
            Encapsulates a RadidData object. Only for internal use.
            Use Tool and WorkObject instead.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitRapidData.#ctor(ABB.Robotics.Controllers.MotionDomain.MechanicalUnit,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitRapidData"/> class.
            </summary>
            <param name="unit">The unit.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitRapidData.Data">
            <summary>
            Gets the data for the tool.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitRapidData.Symbol">
            <summary>
            Gets the symbol for the tool object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitType">
            <summary>
            Summary description for MechanicalUnitType.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitType.None">
            <summary>
            Type not defined.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitType.TcpRobot">
            <summary>
            Type is TCP robot.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitType.MultiAxes">
            <summary>
            Type is multiple axes manipulator.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.MotionDomain.MechanicalUnitType.SingleAxis">
            <summary>
            Type is a single axis manipulator.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.MotionSystem">
            <summary>
            Main entrypoint for the motion domain.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.MotionSystem.CheckPublicUnits">
            <summary>
            Checks that the public units still are valid.
            </summary>
            <returns>True if all units still are valid, otherwise false.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MotionSystem.ActiveMechanicalUnit">
            <summary>
            Gets the currently active mechnical unit.
            The Mechanical Unit active/deactive state is associated to the 'ActiveMechanicalUnit' property and change in 'ActiveMechanicalUnit' property will trigger 'MechUnitModeChanged' event.
            </summary>
            <seealso cref="E:ABB.Robotics.Controllers.MotionDomain.MotionSystem.MechUnitModeChanged"/>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MotionSystem.MechanicalUnits">
            <summary>
            Gets all mechanical units.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.MotionDomain.MotionSystem.SpeedRatio">
            <summary>
            Gets / Sets the current speed ratio.
            Valid range between 0-100.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.MotionDomain.MotionSystem.MechUnitModeChanged">
            <summary>
            This event is raised when the Mechanical Unit is activated or deactivated. 
            The Mechanical Unit active/deactive state is associated to the 'ActiveMechanicalUnit' property and change in 'ActiveMechanicalUnit' property will trigger 'MechUnitModeChanged' event.
            </summary>
            <seealso cref="P:ABB.Robotics.Controllers.MotionDomain.MotionSystem.ActiveMechanicalUnit"/>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.PayLoad">
            <summary>
            Defines a PayLoad object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.PayLoad.#ctor(ABB.Robotics.Controllers.MotionDomain.MechanicalUnit,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.MotionDomain.PayLoad"/> class.
            </summary>
            <param name="unit">The unit.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.Tool">
            <summary>
            Defines a tool object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.Tool.#ctor(ABB.Robotics.Controllers.MotionDomain.MechanicalUnit,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.MotionDomain.Tool"/> class.
            </summary>
            <param name="unit">The unit.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.MotionDomain.WorkObject">
            <summary>
            Defines a work object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.MotionDomain.WorkObject.#ctor(ABB.Robotics.Controllers.MotionDomain.MechanicalUnit,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.MotionDomain.WorkObject"/> class.
            </summary>
            <param name="unit">The unit.</param>
            <param name="name">The name.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.IDataNodeVisitor">
            <summary>
            Defines the visitor interface. Implement this
            to walk the entire tree.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.IDataNodeVisitor.OnNode(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Visit method for DataNode objects.
            </summary>
            <param name="node">Visited data node.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.DataNode">
            <summary>
            A data node from a RAPID data string in a separated fasion.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.DataNode"/> class.
            </summary>
            <param name="text">The text to parse.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataNode.#ctor(System.Collections.Generic.List{ABB.Robotics.Controllers.RapidDomain.DataNode})">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.DataNode"/> class.
            </summary>
            <param name="list">The initial list of children.</param>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.DataNode.Children">
            <summary>
            The list of children found in the parsed data at this level.
            This is mutually exclusive with Text.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.DataNode.Value">
            <summary>
            The text of the current node.
            This is mutually exclusive with Children.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataNode.Accept(ABB.Robotics.Controllers.RapidDomain.IDataNodeVisitor)">
            <summary>
            Starts a visitor structure walk operation.
            </summary>
            <param name="visitor">Visitor object.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.DataFormatter">
            <summary>
            Formats ParserTrees to RAPID strings.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataFormatter.#ctor(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.DataFormatter"/> class.
            </summary>
            <param name="node">The node to format.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataFormatter.ToString">
            <summary>
            Returns the formatted rapid string.
            </summary>
            <returns>Rapid string.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.DataParser">
            <summary>
            Parses Rapid data strings into well ordered trees.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.DataParser"/> class.
            </summary>
            <param name="data">The text to parse.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataParser.Parse(System.String)">
            <summary>
            Parse method for repeated calls.
            </summary>
            <param name="data">Data to parse.</param>
            <returns>The tree for the data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataParser.Parse">
            <summary>
            Parses a data into a tree of Nodes.
            </summary>
            <returns>The tree for the data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataParser.GetChar">
            <summary>
            Gets the next charachter or \0 if we are at the end 
            of the string.
            </summary>
            <returns>The next char or \0.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataParser.GetToken">
            <summary>
            Gets the next token.
            </summary>
            <returns>The token.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataParser.UntilEndOfRapidString">
            <summary>
            Loops until the end of the rapid string is encountered
            or throws a format exception if such is missing.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.IRapidArray">
            <summary>
            Abstracts a complete rapid data array object into
            a single interface for utilization of bridge pattern
            to implement customizable data access behaviors.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.IRapidArray.GetLength(System.Int32)">
            <summary>
            Gets the length of the array in the specified dimension.
            </summary>
            <param name="dimension">Dimension to get length for.</param>
            <returns>The length of the specified dimension.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.IRapidArray.Parse(System.String)">
            <summary>
            Parses the string into the current array object.
            </summary>
            <param name="value">Value to parse.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.IRapidArray.ToString">
            <summary>
            Gets the string representation of the object.
            </summary>
            <returns>Get the string for this object.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.IRapidArray.Item(System.Int32)">
            <summary>
            Gets/sets data in a one dimension array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.IRapidArray.Item(System.Int32,System.Int32)">
            <summary>
            Gets/Sets data in a two dimension array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.IRapidArray.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets/Sets data in a three dimension array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.IRapidArray.Length">
            <summary>
            Gets the length of the array in the first dimension.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.IRapidArray.Rank">
            <summary>
            Gets the number of dimensions of the array.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ArrayModes">
            <summary>
            This enum controls how an array is connected to the
            array in rapid.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ArrayModes.None">
            <summary>
            Default flag mode for initialization.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ArrayModes.Snapshot">
            <summary>
            Snapshot, all data from the array is transfered from rapid
            to controller prior to access.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ArrayModes.Dynamic">
            <summary>
            No data is stored locally.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ArrayData">
            <summary>
            Represents a RAPID array.
            </summary>  
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.IRapidData">
            <summary>
            Defines the methods to convert strings into a rapid data and viceversa.
            </summary>
            <remarks>
            All the rapid data structs must implement this interface.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.IRapidData.ToString">
            <summary>
            Returns the string representation of the rapid data.
            </summary>
            <returns>The string representation with the value of the rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.IRapidData.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the rapid data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.IRapidData.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.IRapidData.Fill(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to string structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.IRapidData.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ArrayData.GetEnumerator">
            <summary>
            Gets a IEnumerator object for the array,
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ArrayData.GetLength(System.Int32)">
            <summary>
            Gets the length of the specified dimension.
            Zero based index.
            </summary>
            <param name="dimension">Dimension to get length for.</param>
            <returns>The length of the dimension.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ArrayData.ToString">
            <summary>
            Returns the string representation of the rapid data array.
            </summary>
            <returns>The string representation with the value of the rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ArrayData.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the ArrayData data type.</exception>        
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ArrayData.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ArrayData.Fill(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>        
            <param name="value">Value to fill structure with.</param>              
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ArrayData.ToStructure">
            <summary>
            This method is not supported.
            </summary>       
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ArrayData.Mode">
            <summary>
            Gets/Sets the current mode of the array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ArrayData.BaseIndex">
            <summary>
            Gets or sets the base index of array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ArrayData.Item(System.Int32)">
            <summary>
            Gets/sets data in a one dimension array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ArrayData.Item(System.Int32,System.Int32)">
            <summary>
            Gets/Sets data in a two dimension array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ArrayData.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets/Sets data in a three dimension array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ArrayData.Rank">
            <summary>
            Gets the number of dimensions of the array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ArrayData.Length">
            <summary>
            Gets the array length in the first dimension.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Bool">
            <summary>
            Represents a rapid data of type <b>bool</b>.	
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.Bool"/> class with a specific value.
            </summary>
            <param name="value"></param>
            
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.op_Implicit(ABB.Robotics.Controllers.RapidDomain.Bool)~System.Boolean">
            <summary>
            Converts a Bool struct to a bool.
            </summary>
            <param name="f">A Bool struct reference.</param>
            <returns>The bool value that is stored in the Bool struct</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.ToBoolean">
            <summary>
            Thin wrapper around IConvertible.ToBoolean( IFormatProvider ).
            </summary>
            <returns>The Bool value for this object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.FillFromBool(System.Boolean)">
            <summary>
            Fills the struct with a bool value.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.Parse(System.String)">
            <summary>
            Parses the string into a Bool object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The Bool object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.Bool@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.ToString">
            <summary>
            Returns the string representation of the bool rapid data.
            </summary>
            <returns>The string representation with the value of the bool rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Bool.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>    
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Bool.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>  
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Bool.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the Bool data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the Bool data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the Bool data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Bool.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Bool.Empty">
            <summary>
            Gets an empty Bool object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Bool.Value">
            <summary>
            Get/Sets the value of the variable.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Byte">
            <summary>
            Represents a rapid data of type <b>Byte</b>.	
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.Byte"/> structure with a specific value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.op_Implicit(ABB.Robotics.Controllers.RapidDomain.Byte)~System.Byte">
            <summary>
            Converts a Byte struct to a System.Byte
            </summary>
            <param name="b">A Byte struct reference.</param>
            <returns>The byte value that is stored in the Byte struct</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.Parse(System.String)">
            <summary>
            Parses the string into a Byte object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The Byte object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.Byte@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.ToString">
            <summary>
            Returns the string representation of the num rapid data.
            </summary>
            <returns>The string representation with the value of the num rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Byte.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Byte.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Byte.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the Byte data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the Byte data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the Byte data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Byte.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Byte.Value">
            <summary>
            Gets/Sets the value of the object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Byte.Empty">
            <summary>
            Gets an empty Byte object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ConfData">
            <summary>
            Represents a rapid data of type <b>ConfData</b>.	
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConfData.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConfData.Parse(System.String)">
            <summary>
            Parses the string into a ConfData object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The ConfData object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConfData.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.ConfData@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConfData.ToString">
            <summary>
            Returns the string representation of the confdata rapid data.
            </summary>
            <returns>The string representation with the value of rapid data type ConfData.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConfData.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.ConfData.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConfData.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.ConfData.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConfData.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.ConfData.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConfData.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the ConfData data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConfData.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the ConfData data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConfData.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the ConfData data type.</exception> 
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ConfData.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ConfData.Empty">
            <summary>
            Gets an empty confdata object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ConfData.Cf1">
            <summary>Gets or sets the value of Cf1.</summary>
            <value> A int that represents the Cf1 value.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ConfData.Cf4">
            <summary>Gets or sets the value of Cf4.</summary>
            <value> A int that represents the Cf4 value.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ConfData.Cf6">
            <summary>Gets or sets the value of Cf6.</summary>
            <value> A int that represents the Cf6 value.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ConfData.Cfx">
            <summary>Gets or sets the value of Cfx.</summary>
            <value> A int that represents the Cfx value.</value>		
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ExtJoint">
            <summary>
            Represents a rapid data of type <b>ExtJoint</b>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Parse(System.String)">
            <summary>
            Parses the string into a ExtJoint object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The ExtJoint object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.ExtJoint@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.ToString">
            <summary>
            Returns the string representation of the extjoint rapid data.
            </summary>
            <returns>The string representation with the value of the ExtJoint rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>    
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the ExtJoint data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the ExtJoint data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the ExtJoint data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExtJoint.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Eax_a">
            <summary>Gets or sets the value of Eax_a.</summary>
            <value> A float that represents the Eax_a value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Eax_b">
            <summary>Gets or sets the value of Eax_b.</summary>
            <value> A float that represents the Eax_b value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Eax_c">
            <summary>Gets or sets the value of Eax_c.</summary>
            <value> A float that represents the Eax_c value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Eax_d">
            <summary>Gets or sets the value of Eax_d.</summary>
            <value> A float that represents the Eax_d value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Eax_e">
            <summary>Gets or sets the value of Eax_e.</summary>
            <value> A float that represents the Eax_e value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Eax_f">
            <summary>Gets or sets the value of Eax_f.</summary>
            <value> A float that represents the Eax_f value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ExtJoint.Empty">
            <summary>
            Gets an empty ExtJoint object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.JointTarget">
            <summary>
            Represents a rapid data of type <b>JointTarget</b>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.JointTarget.RobAx">
            <summary>Gets or sets the value of RobAx.</summary>
            <value> A RobJoint that represents the RobAx value.</value>	
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.JointTarget.ExtAx">
            <summary>Gets or sets the value of ExtAx.</summary>
            <value> A ExtJoint that represents the RobAx ExtAx.</value>				
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.Parse(System.String)">
            <summary>
            Parses the string into a JointTarget object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The JointTarget object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.JointTarget@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.ToString">
            <summary>
            Returns the string representation of the jointtarget rapid data.
            </summary>
            <returns>The string representation with the value of the jointtarget rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the JointTarget data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the JointTarget data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the JointTarget data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.JointTarget.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.JointTarget.Empty">
            <summary>
            Gets an empty JointTarget object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.LoadData">
            <summary>
            Represents a rapid data of type <b>loaddata</b>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.LoadData.Cog">
            <summary>Gets or sets the value of Cog.</summary>
            <value> A Pos that represents the Cog value.</value>		
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.LoadData.Aom">
            <summary>Gets or sets the value of Aom.</summary>
            <value> A Orient that represents the Aom value.</value>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.LoadData.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.LoadData.Parse(System.String)">
            <summary>
            Parses the string into a LoadData object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The LoadData object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.LoadData.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.LoadData@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.LoadData.ToString">
            <summary>
            Returns the string representation of the loaddata rapid data.
            </summary>
            <returns>The string representation with the value of the loaddata rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.LoadData.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.LoadData.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.LoadData.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.LoadData.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.LoadData.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.LoadData.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.LoadData.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the LoadData data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.LoadData.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the LoadData data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.LoadData.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the LoadData data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.LoadData.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.LoadData.Empty">
            <summary>
            Gets an empty LoadData object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.LoadData.Mass">
            <summary>Gets or sets the value of Mass.</summary>
            <value> A float that represents the Mass value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.LoadData.Ix">
            <summary>Gets or sets the value of Ix.</summary>
            <value> A float that represents the Ix value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.LoadData.Iy">
            <summary>Gets or sets the value of Iy.</summary>
            <value> A float that represents the Iy value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.LoadData.Iz">
            <summary>Gets or sets the value of Iz.</summary>
            <value> A float that represents the Iz value.</value>		
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Num">
            <summary>
            Represents a rapid data of type <b>num</b>.	
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.Num"/> class with a specific value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.op_Implicit(ABB.Robotics.Controllers.RapidDomain.Num)~System.Double">
            <summary>
            Converts a Num struct to a double.
            </summary>
            <param name="f">A Num struct reference.</param>
            <returns>The double value that is stored in the Num  struct</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.FillFromNum(System.Double)">
            <summary>
            Fills the struct with a double value.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.Parse(System.String)">
            <summary>
            Parses the string into a Num object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The Num object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.Num@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.ToString">
            <summary>
            Returns the string representation of the num rapid data.
            </summary>
            <returns>The string representation with the value of the num rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Num.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>  
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Num.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Num.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the Num data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the Num data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the Num data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Num.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Num.Empty">
            <summary>
            Gets an empty instance.
            </summary>
            <value>The empty instance.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Num.Value">
            <summary>
            Gets/Sets the value of the object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Dnum">
            <summary>
            Represents a rapid data of type <b>Dnum</b>.	
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Dnum.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.Dnum"/> class with a specific value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Dnum.op_Implicit(ABB.Robotics.Controllers.RapidDomain.Dnum)~System.Double">
            <summary>
            Converts a Dnum struct to a double.
            </summary>
            <param name="f">A Dnum struct reference.</param>
            <returns>The double value that is stored in the Dnum  struct</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Dnum.FillFromDnum(System.Double)">
            <summary>
            Fills the struct with a double value.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Dnum.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Dnum.Parse(System.String)">
            <summary>
            Parses the string into a Dnum object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The Dnum object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Dnum.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.Dnum@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Dnum.ToString">
            <summary>
            Returns the string representation of the Dnum rapid data.
            </summary>
            <returns>The string representation with the value of the Dnum rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Dnum.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the Dnum data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Dnum.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Dnum.Fill(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Dnum.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Dnum.Empty">
            <summary>
            Gets an empty instance.
            </summary>
            <value>The empty instance.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Dnum.Value">
            <summary>
            Gets/Sets the value of the object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Orient">
            <summary>
            Represents a rapid data of type <b>orient</b>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.FillFromEulerAngles(System.Double,System.Double,System.Double)">
            <summary>
            Fills the struct with the quaternian values calculated from Euler angles.
            </summary>
            <param name="x">X angle.</param>
            <param name="y">Y angle.</param>
            <param name="z">Z angle.</param>
            <remarks>A rotation defined with z,y,x Euler angles is expressed as quaternion.</remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.ToEulerAngles(System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns the eular angles of the quaternion stored in the struct.
            </summary>
            <returns>The string representation with the value of the loaddata rapid data.</returns>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.Parse(System.String)">
            <summary>
            Parses the string into a Orient object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The Orient object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.Orient@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.quaternion_to_rot_matrix(ABB.Robotics.Controllers.RapidDomain.Orient.Quaternion@)">
            <summary>
            Converts quaternions to a rotational matrix.
            </summary>
            <param name="q">Quaternion reference.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.rot_matrix_to_quaternion(ABB.Robotics.Controllers.RapidDomain.Orient.Rot_matrix)">
            <summary>
            Converts a rotational matrix to a quaternion.
            </summary>
            <param name="m">The matrix.</param>
            <returns>Quternion reference.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.ToString">
            <summary>
            Returns the string representation of the orient rapid data.
            </summary>
            <returns>The string representation with the value of the orient rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Orient.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Orient.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Orient.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the Orient data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the Orient data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the Orient data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Orient.Empty">
            <summary>
            Gets an empty orient object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Orient.Q1">
            <summary>Gets or sets the value of Q1.</summary>
            <value> A double that represents the Q1 value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Orient.Q2">
            <summary>Gets or sets the value of Q2.</summary>
            <value> A double that represents the Q2 value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Orient.Q3">
            <summary>Gets or sets the value of Q3.</summary>
            <value> A double that represents the Q3 value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Orient.Q4">
            <summary>Gets or sets the value of Q4.</summary>
            <value> A double that represents the Q4 value.</value>		
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Orient.Quaternion">
            <summary> Quaternion struct</summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Orient.Rot_matrix">
            <summary>
            Rot_Matrix class, used to calculate Euler angles from quaternion values
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.Orient.Rot_matrix.a">
            <summary> Matrix definitions. </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Orient.Rot_matrix.#ctor(System.Double)">
            <summary>
            This constructor is done to avoid warning compile messages
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Pos">
            <summary>
            Represents a rapid data of type <b>pos</b>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pos.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pos.Parse(System.String)">
            <summary>
            Parses the string into a Pos object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The Pos object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pos.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.Pos@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pos.ToString">
            <summary>
            Returns the string representation of the pos rapid data.
            </summary>
            <returns>The string representation with the value of the pos rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pos.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Pos.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pos.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Pos.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pos.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Pos.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pos.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the Pos data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pos.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the Pos data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pos.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the Pos data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pos.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Pos.Empty">
            <summary>
            Creates an empty Pos object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Pos.X">
            <summary>Gets or sets the value of X.</summary>
            <value> A float that represents the X value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Pos.Y">
            <summary>Gets or sets the value of Y.</summary>
            <value> A float that represents the Y value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Pos.Z">
            <summary>Gets or sets the value of Z.</summary>
            <value> A float that represents the Z value.</value>		
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Pose">
            <summary>
            Represents a rapid data of type <b>pose</b>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.Pose.Trans">
            <summary>Gets or sets the value of Trans.</summary>
            <value> A Pos that represents the Trans value.</value>		
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.Pose.Rot">
            <summary>Gets or sets the value of Rot.</summary>
            <value> A Orient that represents the Rot value.</value>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pose.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pose.Parse(System.String)">
            <summary>
            Parses the string into a Pose object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The Pose object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pose.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.Pose@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pose.ToString">
            <summary>
            Returns the string representation of the pose rapid data.
            </summary>
            <returns>The string representation with the value of the pose rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pose.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Pose.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pose.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Pose.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pose.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Pose.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pose.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the Pose data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pose.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the Pose data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pose.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the Pose data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Pose.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Pose.Empty">
            <summary>
            Gets a new Empty object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RobJoint">
            <summary>
            Represents a rapid data of type <b>robjoint</b>.
            </summary>	
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.Parse(System.String)">
            <summary>
            Parses the string into a RobJoint object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The RobJoint object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.RobJoint@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.ToString">
            <summary>
            Returns the string representation of the robjoint rapid data.
            </summary>
            <returns>The string representation with the value of the robjoint rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the RobJoint data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the RobJoint data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the RobJoint data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobJoint.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RobJoint.Rax_1">
            <summary>Gets or sets the value of Rax_1.</summary>
            <value> A float that represents the Rax_1 value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RobJoint.Rax_2">
            <summary>Gets or sets the value of Rax_2.</summary>
            <value> A float that represents the Rax_2 value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RobJoint.Rax_3">
            <summary>Gets or sets the value of Rax_3.</summary>
            <value> A float that represents the Rax_3 value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RobJoint.Rax_4">
            <summary>Gets or sets the value of Rax_4.</summary>
            <value> A float that represents the Rax_4 value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RobJoint.Rax_5">
            <summary>Gets or sets the value of Rax_5.</summary>
            <value> A float that represents the Rax_5 value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RobJoint.Rax_6">
            <summary>Gets or sets the value of Rax_6.</summary>
            <value> A float that represents the Rax_6 value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RobJoint.Empty">
            <summary>
            Gets an empty RobJoint object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RobTarget">
            <summary>
            Represents a rapid data of type <b>robtarget</b>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.RobTarget.Trans">
            <summary>Gets or sets the value of Trans.</summary>
            <value> A Pos that represents the Trans value.</value>		
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.RobTarget.Rot">
            <summary>Gets or sets the value of Rot.</summary>
            <value> A Orient that represents the Rot value.</value>		
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.RobTarget.Robconf">
            <summary>Gets or sets the value of Robconf.</summary>
            <value> A ConfData that represents the Robconf value.</value>		
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.RobTarget.Extax">
            <summary>Gets or sets the value of Extax.</summary>
            <value> A ExtJoint that represents the Extax value.</value>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.Parse(System.String)">
            <summary>
            Parses the string into a RobTarget object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The RobTarget object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.RobTarget@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.ToString">
            <summary>
            Returns the string representation of the robtarget rapid data.
            </summary>
            <returns>The string representation with the value of the robtarget rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the RobTarget data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the RobTarget data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the RobTarget data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RobTarget.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RobTarget.Empty">
            <summary>
            Gets an empty RobTarget object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.String">
            <summary>
            Represents a rapid data of type <b>string</b>.	
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.String.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.String"/> class with a specific value.
            </summary>
            <param name="value">New string value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.String.op_Implicit(ABB.Robotics.Controllers.RapidDomain.String)~System.String">
            <summary>
            Converts a String struct to a string.
            </summary>
            <param name="f">A String struct reference.</param>
            <returns>The string value that is stored in the String struct</returns>
            <remarks><b>NOTE</b> the returned string <b>does not contain</b> quaternion marks. In order to retrieve the string with the quaternion marks, use the method <see cref="M:ABB.Robotics.Controllers.RapidDomain.String.ToString"/></remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.String.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.String.Parse(System.String)">
            <summary>
            Parses the string into a String object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The String object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.String.Trim(System.String)">
            <summary>
            Removes any " from beginning and end of string. 
            " must be both in begining and end to be removed.
            </summary>
            <param name="value">String to trim.</param>
            <returns>The clean string.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.String.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.String@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.String.ToString">
            <summary>
            Returns the string representation of the string rapid data.
            </summary>
            <returns>The string representation with the value of the string rapid data.</returns>
            <remarks><b>NOTE</b> the returned string <b>does contain</b> quaternion marks. </remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.String.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the string data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.String.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.String.Fill(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.String.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.String.Empty">
            <summary>
            Gets a new empyty String object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.String.Value">
            <summary>
            Gets/Sets the Value of the String.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ToolData">
            <summary>
            Represents a rapid data of type <b>tooldata</b>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ToolData.Tframe">
            <summary>Gets or sets the value of Tframe.</summary>
            <value> A Pose that represents the Tframe value.</value>		
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ToolData.Tload">
            <summary>Gets or sets the value of Tload.</summary>
            <value> A LoadData that represents the Tload value.</value>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ToolData.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ToolData.Parse(System.String)">
            <summary>
            Parses the string into a ToolData object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The ToolData object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ToolData.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.ToolData@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ToolData.ToString">
            <summary>
            Returns the string representation of the tooldata rapid data.
            </summary>
            <returns>The string representation with the value of the tooldata rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ToolData.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.ToolData.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ToolData.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.ToolData.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ToolData.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.ToolData.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ToolData.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the ToolData data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ToolData.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the ToolData data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ToolData.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the ToolData data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ToolData.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ToolData.Empty">
            <summary>
            Gets an empty ToolData object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ToolData.Robhold">
            <summary>Gets or sets the value of Robhold.</summary>
            <value> A bool that represents the Robhold value.</value>		
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UserDefined">
            <summary>
            Represents an <b>user defined</b> rapid data type.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.#ctor(System.String,System.String)">
            <summary>
            Initializes a new user defined struct of a specified rapid data type defined in a specified controller.
            </summary>
            <param name="controllerID">Controller ID where the rapid data type is defined.</param>
            <param name="dataType">A user defined rapid data type.</param>
            <exception cref="T:System.ArgumentNullException"><i>dataType</i> or <i>ArgumentNullException</i> are null or empty.</exception>
            <exception cref="T:System.ArgumentException"><i>dataType</i> does not represent the user defined data type in the specified controller.</exception>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.#ctor(ABB.Robotics.Controllers.RapidDomain.RapidDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.UserDefined"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.ToString">
            <summary>
            Returns the string representation of the user defined rapid data.
            </summary>
            <returns>The string representation with the value of the user defined rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:System.InvalidOperationException">UserDefinedDataType struct does not have a rapid data type definition.".</exception>
            <remarks>In order to fill the struct, users must use the method <see cref="M:ABB.Robotics.Controllers.RapidDomain.IRapidData.FillFromString(System.String)"/> on each on the the <see cref="P:ABB.Robotics.Controllers.RapidDomain.UserDefined.Components"/> of this struct.</remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to string structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. 
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the UserDefined data type.</exception>		
            <remarks>In order to fill the struct, users must use the method <see cref="M:ABB.Robotics.Controllers.RapidDomain.IRapidData.FillFromString(System.String)"/> on each on the the <see cref="P:ABB.Robotics.Controllers.RapidDomain.UserDefined.Components"/> of this struct.</remarks>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the UserDefined data type.</exception>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to string structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the UserDefined data type.</exception>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UserDefined.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UserDefined.Components">
            <summary>Gets or sets the value of of an array of IRapidData.</summary>
            <value> An array of IRapidData that represents the rapid data types of the user data type.</value>		
            <exception cref="T:System.InvalidOperationException">UserDefinedDataType struct does not have a rapid data type definition.".</exception>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.WobjData">
            <summary>
            Represents a rapid data of type <b>wobjdata</b>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.WobjData.Uframe">
            <summary>Gets or sets the value of Uframe.</summary>
            <value> A Pose that represents the Uframe value.</value>		
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.WobjData.Oframe">
            <summary>Gets or sets the value of Oframe.</summary>
            <value> A Pose that represents the Oframe value.</value>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.WobjData.GetDataType(ABB.Robotics.Controllers.Controller)">
            <summary>
            Gets the datatype object for this type from the supplied controller.
            </summary>
            <param name="controller">Controller containing the datatype.</param>
            <returns>A valid datatype object if it exist on the controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.WobjData.Parse(System.String)">
            <summary>
            Parses the string into a WobjData object.
            </summary>
            <param name="value">Value to parse into object.</param>
            <returns>The WobjData object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.WobjData.TryParse(System.String,ABB.Robotics.Controllers.RapidDomain.WobjData@)">
            <summary>
            Attempts to parse the string into object.
            </summary>
            <param name="value">Value to parse.</param>
            <param name="result">The result of the parse operation.</param>
            <returns>True if parse succeeded.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.WobjData.ToString">
            <summary>
            Returns the string representation of the wobjdata rapid data.
            </summary>
            <returns>The string representation with the value of the wobjdata rapid data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.WobjData.FillFromString(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.WobjData.FillFromString2(System.String)"/> instead.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.WobjData.Fill(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.WobjData.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)"/> instead.
            </summary>
            <param name="root">Root of data.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.WobjData.Fill(System.String)">
            <summary>
            Fills the structure with the new value. This is Obsolete, use <see cref="M:ABB.Robotics.Controllers.RapidDomain.WobjData.Fill2(System.String)"/> instead.
            </summary>
            <param name="value">Value to fill structure with.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.WobjData.FillFromString2(System.String)">
            <summary>
            Fills the struct with a valid rapid string representation.
            </summary>
            <param name="newValue">The new value stored by the struct.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>newValue</i> does not represent the WobjData data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.WobjData.Fill2(ABB.Robotics.Controllers.RapidDomain.DataNode)">
            <summary>
            Fills the RapidData object from the specified parser root.
            </summary>
            <param name="root">Root of data.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>root</i> does not represent the WobjData data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.WobjData.Fill2(System.String)">
            <summary>
            Fills the structure with the new value.
            </summary>
            <param name="value">Value to fill structure with.</param>
            <exception cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"><i>value</i> does not represent the WobjData data type.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.WobjData.ToStructure">
            <summary>
            Converts the datastructure into a DataNode tree.
            </summary>
            <returns>The root of the corresponding data tree.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.WobjData.Empty">
            <summary>
            Gets an empty WobjData object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.WobjData.Robhold">
            <summary>Gets or sets the value of Robhold.</summary>
            <value> A bool that represents the Robhold value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.WobjData.Ufprog">
            <summary>Gets or sets the value of Ufprog.</summary>
            <value> A bool that represents the Ufprog value.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.WobjData.Ufmec">
            <summary>Gets or sets the value of Ufmec.</summary>
            <value> A string that represents the Ufmec value.</value>		
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.DynamicArray">
            <summary>
            This class implements the dynamic array behavior that
            allows access of element directly on the controller
            without uploading them to the pc. This has drawbacks
            such as inconsitent data and raceconditions between
            Rapid and pc application code.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidArray">
            <summary>
            Base implementation class for IRapidArray interface.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidArray.System#IDisposable#Dispose">
            <summary>
            Implements default Dispose impl.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidArray.GetEnumerator">
            <summary>
            Gets the enumerator for the array.
            </summary>
            <returns>Enumerator object for array.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidArray.GetLength(System.Int32)">
            <summary>
            Gets the length in the specified dimension.
            </summary>
            <param name="dimension">Dimension to query for length.</param>
            <returns>Length.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidArray.Parse(System.String)">
            <summary>
            Parses the string.
            </summary>
            <param name="value">Value to parse.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidArray.ToString">
            <summary>
            Turns the array into a object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidArray.Dispose(System.Boolean)">
            <summary>
            Called when object is disposed.
            </summary>
            <param name="disposing">True if called during dispose false during finalization.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidArray.Item(System.Int32)">
            <summary>
            Gets/sets data in a one dimension array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidArray.Item(System.Int32,System.Int32)">
            <summary>
            Gets/Sets data in a two dimension array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidArray.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets/Sets data in a 3 dimension array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidArray.Length">
            <summary>
            Gets the length of the array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidArray.Rank">
            <summary>
            Gets the rank of the array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidArray.Data">
            <summary>
            Gets the rapid data object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidArray.Symbol">
            <summary>
            Gets the current symbol object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidArray.Rapid">
            <summary>
            Gets a ref to the internal rapid object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.DynamicArray.DynamicArrayEnumerator">
            <summary>
            This class is used internally to enumerate a dynamic array object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DynamicArray.DynamicArrayEnumerator.#ctor(ABB.Robotics.Controllers.RapidDomain.DynamicArray)">
            <summary>
            Creates a array enumerator for the specfied DynamicArray object.
            </summary>
            <param name="array">Dynamic array to enumerate.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ExecutionCycle">
            <summary>
            Possible execution cycle settings.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionCycle.None">
            <summary>
            No more execution cycles.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionCycle.Once">
            <summary>
            Execute a single cycle.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionCycle.Forever">
            <summary>
            Execute forever.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionCycle.Undefined">
            <summary>
            Undefined, is returned by the Rapid object when two tasks
            have different remaining cycles.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionCycle.AsIs">
            <summary>
            Leave execution cycle counter as is.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionCycle.Max">
            <summary>
            The maximum number of cycles, except for Forever.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ExecutionMode">
            <summary>
            Specifies how to execute the program.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionMode.Continuous">
            <summary>
            Continuous execution.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionMode.StepIn">
            <summary>
            Stepwise execution.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionMode.StepOver">
            <summary>
            Step over instruction.
            </summary>		
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionMode.StepOut">
            <summary>
            Step out of routine.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionMode.StepBack">
            <summary>
            Backward stepwise execution.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionMode.StepLast">
            <summary>
            Same as last time.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionMode.StepMotion">
            <summary>
            Execute to next motion instruction.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionMode.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Module">
            <summary>
            This class represents a Module Rapid object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.IRapidSymbol">
            <summary>
            This interface specifies a searchable RapidSymbol. Classes that
            are not searchable shall throw NotImplementedException if SearchRapidSymbol
            is called.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.IRapidSymbol.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,System.String,System.String)">
            <summary>
            Searches the current symbol for other symbols.
            </summary>
            <param name="searchProperties">Properties to search for.</param>
            <param name="dataType">Type to search for.</param>
            <param name="searchExpression">Expression used to match search, regular expression.</param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.IRapidSymbol.Name">
            <summary>
            Gets the name of the symbol (RAPID Identifier)
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.IRapidSymbol.Type">
            <summary>
            Gets the underlying type of Symbol
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Module.Delete">
            <summary>
            Deletes the module from the memory of the controller.
            
            
            </summary>
            <remarks>
            Requires mastership of Rapid domain. Requires the <see cref="F:ABB.Robotics.Controllers.Grant.LoadRapidProgram" text="UAS_RAPID_LOADPROGRAM"/>
            grant.
            
            
            </remarks>                                                                                                                                   
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Module.GetRapidData(System.String[])">
            <summary>
            Gets a <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidData"/> object that reference a Rapid data 
            instance in the robot controller.  
            </summary>
            <param name="rapidData"></param>
            <returns>RapidData object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Module.GetRapidData(ABB.Robotics.Controllers.RapidDomain.RapidSymbol)">
            <summary>
            Gets the data for specified symbol.
            </summary>
            <param name="symbol">Symbol to get data for.</param>
            <returns>RapidData object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Module.GetRoutines">
            <summary>
            Returns all routines in the current Module. 
            </summary>
            <returns>All routines in the current module.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Module.GetRoutine(System.String)">
            <summary>
            Gets a <see cref="T:ABB.Robotics.Controllers.RapidDomain.Routine"/> object to a specific routine.
            </summary>
            <param name="name">Name of the routine.</param>
            <returns>A <see cref="T:ABB.Robotics.Controllers.RapidDomain.Routine"/> object to access the routine. If the routine does not exist, the return value is <b>null</b>.</returns>				
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Module.SaveToFile(System.String)">
            <summary>
            Save Rapid module, which <see cref="T:ABB.Robotics.Controllers.RapidDomain.Module"/> object
            referes, to specified file. 
            </summary>
            <param name="filePath">Path to the file where Rapid module
                                   should be saved.</param>
            
            
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.BackupController" text="UAS_BACKUP"/>
            grant.
            </remarks>                                                                                   
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Module.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,System.String,System.String)">
            <summary>
            Searches the current symbol for other symbols.
            </summary>
            <param name="searchProperties">Properties to search for.</param>
            <param name="dataType">Type to search after.</param>
            <param name="searchExpression">Expression used to match search, regular expression.</param>
            <returns>All matching symbols.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Module.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,System.String)">
            <summary>
            Searches the current symbol for other symbols.
            </summary>
            <param name="searchProperties">Properties to search for.</param>    
            <param name="searchExpression">Expression used to match search, regular expression.</param>
            <returns>All matching symbols.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Module.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,ABB.Robotics.Controllers.RapidDomain.RapidDataType,System.String)">
            <summary>
            Searches the current symbols of the specified data type.
            </summary>
            <param name="searchProperties">Search properties.</param>
            <param name="type">Type of data to search for.</param>
            <param name="searchExpression">Expression used to match search, regular expression.</param>
            <returns>All matching symbols.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Module.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,ABB.Robotics.Controllers.RapidDomain.RapidDataType)">
            <summary>
            Searches the current symbols of the specified data type.
            </summary>
            <param name="searchProperties">Search properties.</param>
            <param name="type">Type of data to search for.</param>    
            <returns>All matching symbols.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Module.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties)">
            <summary>
            Searches the current symbol for symbols.
            </summary>
            <param name="searchProperties">Properties for search.</param>
            <returns>All matching symbols.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Module.Attributes">
            <summary>
            Gets the attributes for this module.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Module.IsEncoded">
            <summary>
            Gets a flag indicating encode state of the module.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Module.IsNoView">
            <summary>
            Gets a flag indicating if the module is a NoView module.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Module.IsNoStepIn">
            <summary>
            Gets a flag indicating if the module can be stepped into.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Module.IsViewOnly">
            <summary>
            Gets a flag indicating if the module is a view only module.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Module.IsReadOnly">
            <summary>
            Gets a flag indicating if the module is a ReadOnly module.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Module.IsSystem">
            <summary>
            Gets a flag indicating if the module is a system module.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Module.Type">
            <summary>
            Gets the kind of symbol
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ModuleAttributes">
            <summary>
            This enum defines all attributes that may be 
            applied to a module.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ModuleAttributes.None">
            <summary>
            No attributes available.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ModuleAttributes.System">
            <summary>
            Module is a system module.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ModuleAttributes.Encoded">
            <summary>
            Module is encoded.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ModuleAttributes.NoView">
            <summary>
            Don't show this module.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ModuleAttributes.NoStepIn">
            <summary>
            Don't step into this module.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ModuleAttributes.ViewOnly">
            <summary>
            Only allow showing of this module.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ModuleAttributes.ReadOnly">
            <summary>
            Module is readonly.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ExecutionStatus">
            <summary>
            Execution status of the controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionStatus.Unknown">
            <summary>
            Status is unknown.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionStatus.Running">
            <summary>
            At least one normal RAPID task is executing or performing regain.
            </summary>    
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionStatus.Stopped">
            <summary>
            No normal RAPID task is executing or performing regain.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.TaskExecutionStatus">
            <summary>
            Execution status of the Task.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.TaskExecutionStatus.Ready">
            <summary>
            The task has no PCP or execution context.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.TaskExecutionStatus.Stopped">
            <summary>
            Task is not executing or not performing regain.
            PCP and execution context is defined in task.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.TaskExecutionStatus.Running">
            <summary>
            Task is executing or performing regain.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.TaskExecutionStatus.UnInitiated">
            <summary>
            The program server is not initialized. State only assumed during startup.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.TaskExecutionStatus.Unknown">
            <summary>
            Status is unknown.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo">
            <summary>
            Reason why an execution event has occurred.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.Undefined">
            <summary>
            No extended information exists for the event.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.Started">
            <summary>
            Execution is started with no previous execution context at current execution level.
            </summary>    
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.Restarted">
            <summary>
            Execution is restarted after a stop.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.EventRoutineStarted">
            <summary>
            Execution of an event routine was started by the system.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopInstr">
            <summary>
            Execution stopped after instruction.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopExit">
            <summary>
            Execution stopped due to the RAPID instruction EXIT. 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopReady">
            <summary>
            Execution stopped because no more cycles.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopUserRoutineReady">
            <summary>
            Execution stopped because the end of a user routine was reached (routine called on user demand).
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopStep">
            <summary>
            Execution stopped after a step.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopBreak">
            <summary>
            Execution stopped due to the RAPID instruction BREAK.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopOrdered">
            <summary>
            Execution stopped due to ordered stop.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopError">
             <summary>
            Execution stopped due to error.
             </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopAtBeginning">
             <summary>
            Execution stopped because cannot execute backward past beginning.
             </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopAtStructure">
             <summary>
            Execution stopped because cannot execute backward past structure.
             </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopEventRoutineReady">
            <summary>
            Execution stopped as the end of an event routine was reached (routine called by the system).
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopMotion">
            <summary>
            Execution stopped before or after motion instruction.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.ExecutionEventInfo.StopRegainReady">
            <summary>
            Execution stopped because path regain was ready.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.DataValueChangedEventArgs">
            <summary>
            Provides the data of the ValueChanged event of the RapidData class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.DataValueChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.DataValueChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.DataValueChangedEventHandler">
            <summary>
            The signature of a DataValueChanged event handler.
            All events are based on the EventHandler generic instead.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ExecutionStatusChangedEventArgs">
            <summary>
            Provides the data of the ExecutionStatusChanged event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExecutionStatusChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.ExecutionStatusChangedEventArgs"/> class.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExecutionStatusChangedEventArgs.Unpack(Adapters.Rapid)">
            <summary>
            Unpacks the ExecutionStatus from ROBAPI RobControllerExecutionState.
            </summary> 
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ExecutionStatusChangedEventArgs.Status">
            <summary>
            Gets the execution status of the controller.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ExecutionChangedEventArgs">
            <summary>
            Provides the data of the ExecutionChanged event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExecutionChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.ExecutionChangedEventArgs"/> class.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.ExecutionChangedEventArgs.Unpack(Adapters.Rapid)">
            <summary>
            Unpacks the ExecutionEventInfo, gets the details in ExecutionChangedEventArgs.
            </summary> 
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.ExecutionChangedEventArgs.ExecutionEvent">
            <summary>
            Gets info about the execution event that has occurred.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.ExecutionStatusChangedEventHandler">
            <summary>
            Defines the event for execution status changed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidDataResolveEventHandler">
            <summary>
            The signature of a RapidData resolve event handler.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Rapid">
            <summary>
            This class represents the <c>RAPID</c> domain of a Robot controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.#ctor(ABB.Robotics.Controllers.Controller)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.Rapid"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.ABB#Robotics#Controllers#IMastershipResource#Request">
            <summary>
            Call this method to request the mastership of 
            the resource.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.ABB#Robotics#Controllers#IMastershipResource#Ensure">
            <summary>
            Call this method to ensure the mastership of 
            the resource.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.ABB#Robotics#Controllers#IMastershipResource#Release">
            <summary>
            call this method to release the mastership of 
            the resource.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.GetRapidData(System.String[])">
            <summary>
            Gets a Rapid object that reference a Rapid data instance in the robot controller.  
            </summary>
            <param name="rapidData">
            The path represented as a sets of strings, which locates the 
            Rapid data declaration.		
            </param>
            <returns>
            The RapidData object. If the Rapid data doesn't exists null is returned.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.GetRapidDataType(System.String[])">
            <summary>
            Gets an instance of the RadidDataType object for the specified data.
            </summary>
            <param name="rapidData">
            The path represented as a sets of strings, which locates the 
            Rapid type declaration.
            </param>
            <returns>The Data type.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.GetRapidDataType(ABB.Robotics.Controllers.RapidDomain.RapidSymbol)">
            <summary>
            Gets the datatype for a specific symbol. The symbol has to have a 
            data type for this to work.
            </summary>
            <param name="symbol">The rapid symbol.</param>
            <returns>The data type.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.GetTasks">
            <summary>
            Gets all tasks on the controller.		
            </summary>
            <returns>The array of task objects.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.GetTask(System.String)">
            <summary>
            Gets the task with the specified name.
            </summary>
            <param name="taskName">The task name.</param>
            <returns>The task object</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.IsValidIdentifier(System.String)">
            <summary>
            Gets if a string is a valid RAPID identifier.
            </summary>
            <param name="name">The string to be checked.</param>
            <returns>True if the string is a valid RAPID identifier.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.Start">
            <summary>
            Starts RAPID program execution.
            </summary>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.Start(System.Boolean)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <param name="throwOnError">True to get exception instead of
                                       just Error for "unmapped"
                                       results.</param>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.Start(ABB.Robotics.Controllers.RapidDomain.RegainMode,ABB.Robotics.Controllers.RapidDomain.ExecutionMode)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <param name="regain">Regain mode.</param>
            <param name="execution">Execution mode.</param>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.Start(ABB.Robotics.Controllers.RapidDomain.RegainMode,ABB.Robotics.Controllers.RapidDomain.ExecutionMode,ABB.Robotics.Controllers.RapidDomain.ExecutionCycle)">
            <summary>
            Starts RAPID program execution
            </summary>
            <param name="regain">Regain mode.</param>
            <param name="execution">Execution mode.</param>
            <param name="cycle">The number of cycles to execute the
                                program.</param>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.Start(ABB.Robotics.Controllers.RapidDomain.RegainMode,ABB.Robotics.Controllers.RapidDomain.ExecutionMode,ABB.Robotics.Controllers.RapidDomain.ExecutionCycle,ABB.Robotics.Controllers.RapidDomain.StartCheck)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <param name="regain">Regain mode.</param>
            <param name="execution">Execution mode.</param>
            <param name="cycle">The number of cycles to execute the
                                program.</param>
            <param name="check">Check to perform prior to start.</param>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.Start(ABB.Robotics.Controllers.RapidDomain.RegainMode,ABB.Robotics.Controllers.RapidDomain.ExecutionMode,ABB.Robotics.Controllers.RapidDomain.ExecutionCycle,ABB.Robotics.Controllers.RapidDomain.StartCheck,System.Boolean)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <param name="regain">Regain mode.</param>
            <param name="execution">Execution mode.</param>
            <param name="cycle">The number of cycles to execute
                                the program.</param>
            <param name="check">Check to perform prior to start.</param>
            <param name="throwOnError">True to get exception instead of
                                       just Error for "unmapped"
                                       results.</param>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.Stop">
            <summary>
            Stops RAPID execution when the current cycle has completed.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Rapid.Stop(ABB.Robotics.Controllers.RapidDomain.StopMode)">
            <summary>
            Stops RAPID execution according to the mode.
            </summary>
            <param name="mode">The stop mode.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Rapid.Cycle">
            <summary>
            Get/sets the behavior of the execution cycle. It can
            also be used to set the remaining cycle counter, even though
            it is recommended to control this by using the RemaningCycles property.
            </summary>
            <remarks>
            Execution cycle is normally set through the Start( ... ) method. Setting this property is
            only applicable to running RAPID programs.
            
            Set Requires Mastership of Rapid domain.
            Set Requires UAS_RAPID_EXECUTE grant.
            Set Requires Auto mode.    
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Rapid.ExecutionStatus">
            <summary>
            Gets the execution status of the controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Rapid.MaximumIdentifierLength">
            <summary>
            Gets the maximum length of an identifier.
            </summary>
            <value>The maximum length of an identifier.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Rapid.RemainingCycles">
            <summary>
            Gets/Sets the remaining cycle counter.
            </summary>
            <remarks>
            This is normally set through the Start( ... ) method. Setting this property is
            only applicable to running RAPID programs.
            
            Set Requires Mastership of Rapid domain.
            Set Requires UAS_RAPID_EXECUTE grant.
            Set Requires Auto mode.    
            </remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Rapid.UIInstruction">
            <summary>
            Get UIInstruction object.
            Supported from RW5.12
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Rapid.IsMaster">
            <summary>
            gets the current mastership state.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.RapidDomain.Rapid.ExecutionCycleChanged">
            <summary>
            Raised when the execution cycle is changed.
            Supported from RW5.09.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.RapidDomain.Rapid.ExecutionStatusChanged">
            <summary>
            Raised when the program execution status of the controller changes. The execution status 
            corresponds to the CycleOn system output, i.e. whether any normal task is executing or a regain is under way. 
            In other words, if the robot(s) may be moving.
            </summary>
            <remarks>
            The event does NOT react to start or stop of RAPID event routines, such as RESET, START, STOP, POWER_ON etc.
            </remarks>
        </member>
        <member name="E:ABB.Robotics.Controllers.RapidDomain.Rapid.ExecutionChanged">
             <summary>
             Raised when a program execution event occurs. 
             </summary>
             <remarks>
             Use this event for more detailed information about program execution events than provided by the event 
             <see cref="E:ABB.Robotics.Controllers.RapidDomain.Rapid.ExecutionStatusChanged"/>. For example, this event reacts to RAPID event routines that are
             started and stopped by the system e.g. RESET, START, STOP, POWER_ON etc.
             </remarks>
             <example>
             This example shows how to delete a program and wait until the StopEventRoutineReady execution event is received
             before loading a new program from the HOME directory of the controller file system.
             <code>
             Controller _controller = new Controller();
             Tasks[] _tasks = _controller.Rapid.GetTasks();
              
             
            private void btnUnloadLoad_Click(object sender, EventArgs e)
            {
               using (Mastership m = Mastership.Request(_controller.Rapid))
               {
                   //start listening to ExecutionChanged events
                   _controller.Rapid.ExecutionChanged += new EventHandler &lt; ExecutionChangedEventArgs &gt; (Rapid_ExecutionChanged);
                   tasks[0].DeleteProgram();
               }
            } 
              
            private void Rapid_ExecutionChanged(object sender, ExecutionChangedEventArgs e)
            {
              if (e.ExecutionEvent == ExecutionEventInfo.StopEventRoutineReady)
              {
                 using (Mastership m = Mastership.Request(_controller.Rapid))
                 {
                     string remoteDir = _controller.FileSystem.RemoteDirectory;
                        
                     string modFile = remoteDir + "MainModule.mod";
                     bool success = tasks[0].LoadModuleFromFile(modFile, RapidLoadMode.Add);
                    
                     string pgfFile = remoteDir + "SamplePrg.pgf";
                     success = tasks[0].LoadProgramFromFile(pgfFile, RapidLoadMode.Replace);
                     
                     //stop listening to ExecutionChanged events
                     _controller.Rapid.ExecutionChanged -= new EventHandler &lt; ExecutionChangedEventArgs &gt; (Rapid_ExecutionChanged);
                   }
               }
            }
            </code> 
            </example>
        </member>
        <member name="E:ABB.Robotics.Controllers.RapidDomain.Rapid.MastershipChanged">
            <summary>
            This event is raised then the mastership of the resource is changed.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.RapidDomain.Rapid.RapidDataResolve">
            <summary>
            This event is raised prior when a IRapidData object shall
            be created as the value for a RapidData object. Any listener
            shall, if possible, return a fresh instance of a corresponding
            type that implements IRapidData. This event will be raised
            until a instance is created or all listeners have been called.
            If resolve wasn't possible a UserDefined instance will be
            created for the data.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.RapidDomain.Rapid.TaskEnabledChanged">
            <summary>
            This event is raised when the task enabled property changes.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidData">
            <summary>
            This class represents a RAPID data.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.RapidData._size">
            <summary>
            PDD1732 and WI 9170 - RAPID larger array
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.#ctor(ABB.Robotics.Controllers.Controller,ABB.Robotics.Controllers.RapidDomain.RapidSymbol)">
            <summary>
            Initializes a RapidData instance.
            </summary>
            <param name="controller">Controller object.</param>
            <param name="symbol">Symbol to get data from.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.ProcessLargeData">
            <summary>
            WI 12077 Resolved Rapid Related Unit Test Cases
            Helper function called when to get rapid data of size > 1024 for non array
            Ex: Url for "/RAPID/T_ROB1/Sample/RnGroupTestValue" is made to "/RAPID/T_ROB1/Sample/RnGroupTestValue{1}"
            _col is used to loop count, then string will be appended to get final result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.ReadItem(System.Int32)">
            <summary>
            Reads an element of one dimensional RAPID data array.
            </summary>
            <param name="x">Index of the item to read.</param>
            <returns>Returns an <see cref="T:ABB.Robotics.Controllers.RapidDomain.IRapidData"/> instance that contains the value of the item.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.ReadItem(System.Int32,System.Int32)">
            <summary>
            Reads an element of a two dimensional RAPID data array.
            </summary>
            <param name="y">Index, in the second dimension, of the item to read.</param>	
            <param name="x">Index, in the first dimension, of the item to read.</param>
            <returns>Returns an <see cref="T:ABB.Robotics.Controllers.RapidDomain.IRapidData"/> instance that contains the value of the item.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.SearchRecordComponents(ABB.Robotics.Controllers.RapidDomain.RapidSymbol[])">
            <summary>
            PDD1732 and WI 9170 - RAPID larger array
            </summary>
            <param name="rsCol"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.ComputeSize(System.String)">
            <summary>
            PDD1732 and WI 9170 - RAPID larger array
            </summary>
            <param name="strDataType"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.GetRapidDataSize(System.String)">
            <summary>
            PDD1732 and WI 9170 - RAPID larger array
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.ReadItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads an element of a three dimensional RAPID data array.
            </summary>
            <param name="z">Index, in the third dimension, of the item to read.</param>
            <param name="y">Index, in the second dimension, of the item to read.</param>
            <param name="x">Index, in the first dimension, of the item to read.</param>
            <returns>Returns a <see cref="T:ABB.Robotics.Controllers.RapidDomain.IRapidData"/> instance that contains the value of the item.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.ReadItem(System.Int32[])">
            <summary>
            Reads an element of a RAPID data array (one, two or three dimensions)
            </summary>
            <param name="index">Index of the item to read.</param>
            <returns>Returns an <see cref="T:ABB.Robotics.Controllers.RapidDomain.IRapidData"/> instance that contains the value of the item.</returns>
            <exception cref="T:System.IndexOutOfRangeException"><i>index</i> The index is not valid for the data.</exception>
            <exception cref="T:System.InvalidOperationException">Rapid data is not an array.</exception>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.WriteItem(ABB.Robotics.Controllers.RapidDomain.IRapidData,System.Int32)">
            <summary>
            Writes to the specified element of a RAPID array.
            </summary>
            <param name="newValue">An <see cref="T:ABB.Robotics.Controllers.RapidDomain.IRapidData"/> instance that contains the value to write.</param>
            <param name="x">Index of the element.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.WriteItem(ABB.Robotics.Controllers.RapidDomain.IRapidData,System.Int32,System.Int32)">
            <summary>
            Writes to the specified element of a two dimensional RAPID array.
            </summary>
            <param name="newValue">An <see cref="T:ABB.Robotics.Controllers.RapidDomain.IRapidData"/> instance that contains the value to write.</param>
            <param name="y">Index, in the second dimension, of the item to write.</param>
            <param name="x">Index, in the first dimension, of the item to write.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.ProcessLargeRapidDataWrite(System.String,System.String)">
            <summary>
            PDD1732 and WI 9170 - RAPID larger array
            Helper function called when to set or writeItem rapid data of size > 1024 
            data -> To be written, row -> if null for non-array else for array 1d,2d or 3d
            Ex: [0,0,0],[0,0,0] -> [0,0,0] and [0,0,0] array of string for each get
            Each above data will used to Set in loop instead of sending entire bulk data [0,0,0],[0,0,0]
            </summary>
            <param name="data"></param>
            <param name="row"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.WriteItem(ABB.Robotics.Controllers.RapidDomain.IRapidData,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes to the specified element of a three dimensional RAPID array.
            </summary>
            <param name="newValue">An <see cref="T:ABB.Robotics.Controllers.RapidDomain.IRapidData"/> instance that contains the value to write.</param>
            <param name="z">Index, in the third dimension, of the item to write.</param>
            <param name="y">Index, in the second dimension, of the item to write.</param>
            <param name="x">Index, in the first dimension, of the item to write.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.WriteItem(ABB.Robotics.Controllers.RapidDomain.IRapidData,System.Int32[])">
            <summary>
            Writes to the specified element of a RAPID data array of any number of dimensions.
            </summary>
            <param name="newValue">An <see cref="T:ABB.Robotics.Controllers.RapidDomain.IRapidData"/> instance that contains the value to write.</param>
            <param name="index">Index of the item to write.</param>
            <exception cref="T:System.IndexOutOfRangeException"><i>index</i> The index is not valid for the data.</exception>
            <exception cref="T:System.InvalidOperationException">RAPID data is not an array.</exception>
            <exception cref="T:System.ArgumentNullException"><i>newValue</i> is null or empty string.</exception>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.Subscribe(System.EventHandler{ABB.Robotics.Controllers.RapidDomain.DataValueChangedEventArgs},ABB.Robotics.Controllers.EventPriority)">
            <summary>
            Subscribes to changes of persistent RAPID data.
            </summary>
            <param name="EventHandler">EventHandler</param>
            <param name="EventPriority">EventPriority</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.Unsubscribe(System.EventHandler{ABB.Robotics.Controllers.RapidDomain.DataValueChangedEventArgs})">
            <summary>
            Unsubscribes to changes of persistent RAPID data.
            </summary>
            <param name="EventHandler">EventHandler</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.GetDataAdapter">
            <summary>
            Gets the data adapter object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidData.GetDataAdapter(ABB.Robotics.Url)">
            <summary>
            Gets the data adapter object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidData.BaseIndex">
            <summary>
            Gets or sets the base index of array.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidData.StringValue">
            <summary>
            Reads/writes the value of the RAPID data in the form of a string. This property
            can be used instead of <see cref="M:ABB.Robotics.Controllers.RapidDomain.IRapidData.ToString"/> and <see cref="M:ABB.Robotics.Controllers.RapidDomain.IRapidData.FillFromString(System.String)"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidData.Value">
            <summary>
            Gets or sets the value of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidData"/>.
            </summary>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidData.IsArray">
            <summary>Checks whether the RAPID data is an array (of one or several dimensions).</summary>
            <value><b>true</b> if the data is an array; otherwise <b>false</b>.</value>		
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidData.IsTaskPers">
            <summary>Checks whether the RAPID data is declared PERS or TASKPERS. Only of interest for persistent data.</summary>
            <value><b>true</b> if the RAPID data is declared TASKPERS; otherwise <b>false</b>.</value>		
            <remarks>Will return false if used with RapidData that is not declared as persistent (but constant for example).</remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidData.IsLocal">
            <summary>Checks whether the RAPID data is declared locally.</summary>
            <value><b>true</b> if the RAPID data is not declared in a global module.</value>		
            <remarks>Will always return false when used with RapidData of <see cref="T:ABB.Robotics.Controllers.RapidDomain.SymbolTypes"/> Atomic, RecordComponent or Parameter.</remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidData.TypeUrl">
            <summary>Gets the URL to the type, eg. "RAPID/num".</summary>
            <remarks>Not valid for RapidData of <see cref="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Record"/>. (Will return empty string)</remarks>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidData.RapidType">
            <summary>Gets the name of the RAPID data type, eg. "num".</summary>
            <remarks>Not valid for RapidData of <see cref="F:ABB.Robotics.Controllers.RapidDomain.SymbolTypes.Record"/>. (Will return empty string)</remarks>
        </member>
        <member name="E:ABB.Robotics.Controllers.RapidDomain.RapidData.ValueChanged">
            <summary>
            Raised when the value of the data has changed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidData.Symbol">
            <summary>
            Gets the symbol for this data object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidDataType">
            <summary>
            RAPID data type descriptor.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbol">
            <summary>
            Represents the rapid symbol for rapid domain of controller.
            </summary>	
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbol.#ctor(ABB.Robotics.Controllers.RapidDomain.RapidSymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbol"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbol.IsData(ABB.Robotics.Controllers.RapidDomain.RapidSymbol)">
            <summary>
            Checks if a symbol is a RAPID data.
            </summary>
            <param name="symbol">Symbol to check.</param>
            <returns>True if the symbol is data.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbol.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,System.String,System.String)">
            <summary>
            Searches the symbol for other symbols, currently not implemented.
            </summary>
            <param name="searchProperties">Not implemented.</param>
            <param name="dataType">Not implemented.</param>
            <param name="searchExpression">Not implemented.</param>
            <returns>Not implemented.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbol.Type">
            <summary>
            Gets the type enum for this symbol.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbol.Scope">
            <summary>
            Gets the scope of the symbol as a string array [TASK, MODULE, ROUTINE, SYMBOL]
            </summary>       
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbol.Rapid">
            <summary>
            Gets/Sets the internal rapid reference.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbol.TypeBlockUrl">
            <summary>
            Gets the Type block url for this symbol (only valid for variables.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbol.Url">
            <summary>
            Gets the Url of this symbol, eg. {RAPID/T_ROB1/LINKEDM/offset_ratio}.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataType.#ctor(ABB.Robotics.Controllers.RapidDomain.RapidSymbol)">
            <summary>
            Initializes a new instance of RapidDataType.
            </summary>
            <param name="symbol">A rapid symbol.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataType.GetComponents">
             <summary>
             Gets the sub components of a composite data type.
             </summary>
             <returns>Sub components of the type. Returns an empty array if the type is atomic.</returns>
             <example>This example searches all the sub components (down to atomic types) of the robtarget data type
             and writes the names and the data type of each component to the console.
             <code>using ABB.Robotics;
             using ABB.Robotics.Controllers;
             using ABB.Robotics.Controllers.RapidDomain;
             ...
            private void btnSearchRobtarget_Click_1(object sender, EventArgs e) 
            { 
                Controller c = new Controller();
                Task tRob1 = c.Rapid.GetTask("T_ROB1");
                RapidDataType theDataType; 
                
                RapidSymbol[] rsCol; 
                // define search properties 
                RapidSymbolSearchProperties sProp = RapidSymbolSearchProperties.CreateDefaultForData(true); 
                sProp.SearchMethod = SymbolSearchMethod.Block; 
                sProp.LocalSymbols = true; 
            
                // get all data of robtarget type 
                rsCol = tRob1.SearchRapidSymbol(sProp, "RAPID/robtarget", "");  
                // write the name of the first robtarget
                Console.WriteLine("Symbol name = " + rsCol[0].Name);
                // get data type 
                theDataType = RapidDataType.GetDataType(rsCol[0]); 
                Console.WriteLine("DataType = " + theDataType.Name);  //robtarget
                // get sub components of robtarget
                RapidSymbol[] symbols = theDataType.GetComponents(); 
                SearchRecordComponents(symbols); 
            } 
            
            private void SearchRecordComponents(RapidSymbol[] rsCol) 
            { 
                RapidDataType  theDataType; 
                foreach (RapidSymbol rs in rsCol) 
                { 
                    Console.WriteLine("Symbol name = " + rs.Name); 
                    theDataType = RapidDataType.GetDataType(rs); 
                    Console.WriteLine("DataType = " + theDataType.Name); 
                    if (theDataType.IsRecord) 
                    { 
                        RapidSymbol[] symbols = theDataType.GetComponents(); 
                        //recursive until atomic type is found
                        SearchRecordComponents(symbols); 
                    } 
                } 
            } 
            
            
            When the button is clicked the following lines will be written to the console:
            
            Symbol name = p10 
            DataType = robtarget 
            
            Symbol name = trans 
            DataType = pos 
            Symbol name = x 
            DataType = num 
            Symbol name = y 
            DataType = num 
            Symbol name = z 
            DataType = num 
            
            Symbol name = rot 
            DataType = orient 
            Symbol name = q1 
            DataType = num 
            Symbol name = q2 
            DataType = num 
            Symbol name = q3 
            DataType = num 
            Symbol name = q4 
            DataType = num 
            
            Symbol name = robconf 
            DataType = confdata 
            Symbol name = cf1 
            DataType = num 
            Symbol name = cf4 
            DataType = num 
            Symbol name = cf6 
            DataType = num 
            Symbol name = cfx 
            DataType = num 
            
            Symbol name = extax 
            DataType = extjoint 
            Symbol name = eax_a 
            DataType = num 
            Symbol name = eax_b 
            DataType = num 
            Symbol name = eax_c 
            DataType = num 
            Symbol name = eax_d 
            DataType = num 
            Symbol name = eax_e 
            DataType = num 
            Symbol name = eax_f 
            DataType = num 
             </code>
             </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataType.GetDataType(ABB.Robotics.Controllers.RapidDomain.RapidSymbol)">
            <summary>
            Gets the data type of a symbol. Exception if no
            data type is available, eg. for symbols such as Routine or Module.
            </summary>
            <param name="symbol">Symbol to get datatype of.</param>
            <returns>The data type of the symbol.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidDataType.IsRecord">
            <summary>
            Whether the data type is a composite data type or not.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidDataType.IsAtomic">
            <summary>
            Whether the data type is atomic or not.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException">
            <summary>
            The exception that is thrown when the string does not represents a RapidDataDefinition.
            </summary>	
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidDataFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.TextHelper.CreateValues(System.String[])">
            <summary>
            Creates a list of values separated by a coma.
            </summary>
            <param name="items">Array of strings that will be inserted.</param>
            <returns>A string with the new list representation.</returns>		
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.TextHelper.GetSubValues(System.String,System.String[]@)">
            <summary>
            Gets the subvalues from a rapid data definition.
            </summary>
            <param name="data">Source data</param>
            <param name="values">An array of string that contains the subvalues.</param>
            <remarks> This method works for data with one level of record components.</remarks>		
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidException">
            <summary>
            Base exception for Rapid operations.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidModuleNotFoundException">
            <summary>
            Thrown when a rapid module is missing.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidModuleNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidModuleNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidModuleNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidModuleNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidModuleNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidModuleNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidModuleNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidModuleNotFoundException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidModuleNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException">
            <summary>
            Thrown when a routine is missing.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets data for serialization.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidRoutineNotFoundException.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException">
            <summary>
            Thrown when a rapid symbol is missing.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException.Name">
            <summary>
            Gets the name of the missing symbol.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException">
            <summary>
            Thrown when a task is missing.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException.Name">
            <summary>
            Gets the name of rapid task.
            </summary>
            <value>The name of rapid task .</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException">
            <summary>
            Exception thrown when read or write to a non active UI Instruction.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException"/> class.
            </summary>
            <param name="taskName">Task name.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidTaskNotFoundException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.UIInstructionNotActiveException.TaskName">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidException">
            <summary>
            Base exception for Rapid operations.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidModuleNotFoundException">
            <summary>
            Thrown when a rapid module is missing.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidModuleNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidModuleNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidModuleNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidModuleNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidModuleNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidModuleNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidModuleNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidModuleNotFoundException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidModuleNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidRoutineNotFoundException">
            <summary>
            Thrown when a routine is missing.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidRoutineNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidRoutineNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidRoutineNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidRoutineNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidRoutineNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidRoutineNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidRoutineNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidRoutineNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidRoutineNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidRoutineNotFoundException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidRoutineNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets data for serialization.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidRoutineNotFoundException.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidSymbolNotFoundException">
            <summary>
            Thrown when a rapid symbol is missing.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidSymbolNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidSymbolNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidSymbolNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidSymbolNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidSymbolNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidSymbolNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidSymbolNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidSymbolNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidSymbolNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidSymbolNotFoundException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidSymbolNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidSymbolNotFoundException.Name">
            <summary>
            Gets the name of the missing symbol.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidTaskNotFoundException">
            <summary>
            Thrown when a task is missing.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidTaskNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidTaskNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidTaskNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidTaskNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidTaskNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidTaskNotFoundException"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidTaskNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidTaskNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidTaskNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RapidTaskNotFoundException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidTaskNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidTaskNotFoundException.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.RegainMode">
            <summary>
            The path regain mode for RAPID program execution.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.RegainMode.Continue">
            <summary>
            Brings the mechnical unit back to path only if the 
            unit is within the configurable maximum distance from the path.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.RegainMode.Regain">
            <summary>
            Moves the mechanical unit back to path.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.RegainMode.Clear">
            <summary>
            Clears the current path and continues the movement directly to next target.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Routine">
            <summary>
            This class represents a Routine Rapid object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Routine.GetRapidData(System.String[])">
            <summary>
            Gets a <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidData"/> object that reference a Rapid data 
            instance in the robot controller.  
            </summary>
            <param name="rapidData"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Routine.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,System.String,System.String)">
            <summary>
            Searches the current symbol for other symbols.
            </summary>
            <param name="searchProperties">Properties to search for.</param>
            <param name="dataType">Type to search after.</param>
            <param name="searchExpression">Expression used to match search, regular expression.</param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Routine.Type">
            <summary>
            Returns routine.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.StartCheck">
            <summary>
            Specifies the conditions that should be fulfilled in 
            order to start RAPID program execution.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.StartCheck.None">
            <summary>
            No check is performed.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.StartCheck.CallChain">
            <summary>
            A check is performed that the task entry point 
            (main routine) is the call chain root.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.StartResult">
            <summary>
            Represents the results of a start RAPID program execution operation.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.StartResult.Ok">
            <summary>
            Start ok.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.StartResult.RegainRequest">
            <summary>
            Task not started, regain to path request.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.StartResult.RegainRequestNoClear">
            <summary>
            Task not started, unable to clear path.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.StartResult.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.StartResult.PathRemain">
            <summary>
            Task not started, previous path remains.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.StartResult.IllegalEntryPoint">
            <summary>
            Task not started, unable to find entry point.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.StartResultUtility">
            <summary>
            Converts HRESULTS into StartResults.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.StopMode">
            <summary>
            Specifies how to stop RAPID program execution.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.StopMode.Cycle">
            <summary>
            Stops RAPID execution when the current cycle is completed.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.StopMode.Instruction">
            <summary>
            Stops RAPID execution when the current instruction is completed.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.RapidDomain.StopMode.Immediate">
            <summary>
            Stops RAPID execution immediately.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.Task">
            <summary>
            This class represents a RAPID Task.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.DeleteProgram">
            <summary>
            Deletes the RAPID program of the task from the controller program memory.
            </summary>
            <remarks>All program modules of the task will be deleted from program memory. If they have been saved they will however remain in the controller file system.
            <para>Requires mastership of RAPID domain.</para>
            <para>Requires the <see cref="F:ABB.Robotics.Controllers.Grant.LoadRapidProgram" text="UAS_RAPID_LOADPROGRAM"/> grant.</para>
            <para>Use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Task.DeleteProgram(System.Int32)"/>if you want to load another program directly after the deletion.</para>
            </remarks>                                                                                                                                   
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.DeleteProgram(System.Int32)">
            <summary>
            Deletes the RAPID program of the task from the controller program memory. 
            Returns as soon as the execution of the RESET event routine is ready. 
            </summary>
            <param name="timeout">Milliseconds used as timeout.</param>
            <remarks>THIS METHOD ONLY WORKS WITH RW 5.12 AND LATER!
            <para>All program modules of the task will be deleted from program memory. If they have been saved they will however remain in the controller file system.</para>
            <para>Requires mastership of RAPID domain.</para>
            <para>Requires the <see cref="F:ABB.Robotics.Controllers.Grant.LoadRapidProgram" text="UAS_RAPID_LOADPROGRAM"/> grant.</para>
            <para>When a RAPID program has been deleted the controller program server executes a RESET event routine a short while. 
            This method returns as soon as the program server is ready to load another RAPID program.</para>
            </remarks>  
            <exception cref="T:ABB.Robotics.TimeoutException">The method did not finish within the specified time limit.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.GetModule(System.String)">
            <summary>
            Returns the requested module.
            </summary>
            <param name="name">Name of module.</param>
            <returns>Module.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.GetModules">
            <summary>
            Returns the modules defined in the task.
            </summary>
            <returns>A Module array.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.GetRapidData(System.String[])">
            <summary>
            Gets a <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidData"/> object that references a RAPID data 
            instance in the robot controller.  
            </summary>
            <param name="rapidData">An array of strings, which specifies where in
            the RAPID domain the RAPID data is declared.</param>
            <returns>A <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidData"/> object. If the RAPID data doesn't
            exist null is returned.</returns>        
            <remarks>If you do not know the name of the module where the data is declared SearchRapidSymbol(...) can be used.
            <para> </para>
            <para>To access RAPID data in a shared module just send the name of the data as parameter, see the second example below.</para>
            <para> </para>
            <para><b>NOTE!</b> RAPID data declared in a <b>- Hidden</b> or <b>-Shared -Hidden</b> module cannot be accessed.</para>
            </remarks>        
            <exception cref="T:System.ArgumentNullException">rapidData is null or length is less then 1</exception>
            <example>This example utilizes a function that returns the sum of all <b>reg1</b> 
            variables in the system. Variable <b>reg1</b> is by default declared
            in the RAPID module <b>USER</b>.
            <code>
            private int SumOfAllReg1(Controller c)
            {
            	int result = 0;
            	try
            	{
            		// Get all tasks
            		Task[] tasks = _controller.Rapid.GetTasks();
            		
            		foreach (Task t in tasks)
            		{
            			RapidData rdReg1 = t.GetRapidData("user", "reg1");
            			
            			result += int.Parse(rdReg1.Value.ToString());
            		} 
            	}
                catch (ABB.Robotics.Controllers.RapidDomain.RapidModuleNotFoundException ee)
                {
                    // TODO: Add error handling
                }
                catch (ABB.Robotics.Controllers.RapidDomain.RapidSymbolNotFoundException ee)
                {
                    // TODO: Add error handling
                }
            	catch (GeneralException ee)
            	{
            		// TODO: Add error handling
            	}
            	catch (System.Exception ee)
            	{
            		// TODO: Add error handling
            	}
            	finally
            	{
            		// Release resources
            	}
            	
            	return result;
            }
            </code>
            <para>This example gets the shared RAPID data nMessageID seen from task T_ROB1.</para>
            <code>
            private RapidData GetMessageID()
            {
                RapidData rData = null;
                Task tRob1 = null;
                try
                {
                    // Create temporary controller object to get task
                    using (Controller c = new Controller())
                    {
                        tRob1 = c.Rapid.GetTask("T_ROB1");
            
                        if (tRob1 != null)
                        {
                            rData = tRob1.GetRapidData("nMessageID");
                        }
                    }
                }
                catch (GeneralException ee)
                {
                    // TODO: Add error handling
                }
                catch (System.Exception ee)
                {
                    // TODO: Add error handling
                }
                finally
                {
                    // Release temporary resources
                    if (tRob1 != null)
                    {
                        tRob1.Dispose();
                        tRob1 = null;
                    }
                }
                return rData;
            }
            </code>
            </example>
            
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.GetRapidData(ABB.Robotics.Controllers.RapidDomain.RapidSymbol)">
            <summary>
            Gets a <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidData"/> object from a <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbol"/>.     
            </summary>
            <param name="symbol">Symbol to get data for.</param>
            <returns>RapidData object.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.LoadModuleFromFile(System.String,ABB.Robotics.Controllers.RapidDomain.RapidLoadMode)">
            <summary>
            Loads a RAPID module to the task in the robot controller.
            </summary>
            <param name="filePath">Path to the file containing the RAPID
                                   module. Valid extensions for a RAPID
                                   module file is .mod and .sys.</param>
            <param name="mode">Specifies the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidLoadMode"/>
                               of the operation.</param>
            <remarks>
            Requires mastership of RAPID domain. Requires the <see cref="F:ABB.Robotics.Controllers.Grant.LoadRapidProgram" text="UAS_RAPID_LOADPROGRAM"/>
            grant.
            </remarks>
            <returns>
            True if loading succeeds without any errors, otherwise false.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.DeleteModule(System.String)">
            <summary>
            Delete a RAPID module to the task in the robot controller.
            </summary>
            <param name="filePath">Path to the file containing the RAPID
                                   module. Valid extensions for a RAPID
                                   module file is .mod and .sys.</param>
            <remarks>
            Requires mastership of RAPID domain.
            </remarks>
            <returns>
            True if loading succeeds without any errors, otherwise false.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.LoadProgramFromFile(System.String,ABB.Robotics.Controllers.RapidDomain.RapidLoadMode)">
            <summary>
            Loads a RAPID program to the controller program memory
            </summary>
            <param name="filePath">Path to the file containing the RAPID
                                   program. Valid extension for a RAPID
                                   program file is .pgf.</param>
            <param name="mode">Specifies the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidLoadMode"/>
                               of the operation.</param>
            <remarks>
            <para>Requires mastership of RAPID domain.</para>
            <para>Requires the <see cref="F:ABB.Robotics.Controllers.Grant.LoadRapidProgram" text="UAS_RAPID_LOADPROGRAM"/>grant.</para>
            <para>Use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Task.LoadProgramFromFile(System.String,ABB.Robotics.Controllers.RapidDomain.RapidLoadMode,System.Int32)"/> if you need to make another call to the RAPID program server, eg. <see cref="M:ABB.Robotics.Controllers.RapidDomain.Task.Start"/> , directly after having loaded the program.</para>
            </remarks>
            <returns>
            True if loading succeeds without any build errors, otherwise false.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.LoadProgramFromFile(System.String,ABB.Robotics.Controllers.RapidDomain.RapidLoadMode,System.Int32)">
            <summary>
            Loads a RAPID program to the controller program memory. Returns as soon as the execution of the RAPID RESET event routine is ready. 
            </summary>
            <param name="filePath">Path to the file containing the RAPID
                                   program. Valid extension for a RAPID
                                   program file is .pgf.</param>
            <param name="mode">Specifies the <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidLoadMode"/>
                               of the operation.</param>
            <param name="timeout">Milliseconds used as timeout.</param>
            <returns>
            True if loading succeeds without any build errors, otherwise false.
            </returns>
            <remarks>THIS METHOD ONLY WORKS WITH RW 5.12 AND LATER!
            <para>Requires mastership of RAPID domain.</para>
            <para>Requires the <see cref="F:ABB.Robotics.Controllers.Grant.LoadRapidProgram" text="UAS_RAPID_LOADPROGRAM"/> grant.</para>
            <para>The program server will be busy executing a RAPID event routine a short while after the program has been loaded. 
            This method returns as soon as the controller program server is ready for another call.</para>
            </remarks> 
            <exception cref="T:ABB.Robotics.TimeoutException">The method did not finish within the specified time limit.</exception>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.SaveProgramToFile(System.String)">
            <summary>
            Saves the current RAPID program at the specified path.
            </summary>
            <param name="filePath">Controller path to save program at.</param>
            
            <remarks>
            Requires the <see cref="F:ABB.Robotics.Controllers.Grant.BackupController" text="UAS_BACKUP"/>
            grant.
            </remarks>                                                                                   
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,System.String,System.String)">
             <summary>
             General <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbol"/> search method. Searches the task for symbols that match the specified criteria. 
             </summary>
             <param name="searchProperties">Instance of <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties"/> ,which defines the
             search criteria.</param>
             <param name="dataType">Name of the data type to search for. Use string.Empty
             if not of interest.</param>
             <param name="searchExpression">The regular expression to search for. Use string.Empty
             if not of interest.</param>
             <returns>An array of matching <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbol"/>. If none is found an array of length zero is returned.</returns>
             <remarks>To search data in Shared module, set <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties"/><b>.SearchMethod</b> to 
             <see cref="T:ABB.Robotics.Controllers.RapidDomain.SymbolSearchMethod"/><b>.Scope</b>. See the second example below.
             <para> </para>
             <para><b>NOTE!</b> RAPID data declared in a <b>- Hidden</b> or <b>-Shared -Hidden</b> module cannot be found.</para>
             </remarks>    
             <example>This example lists all functions and RAPID data instances of
             type num declared in task T_ROB1. The name of <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbol"/> and
             the module where it is declared are added to a listview.
             <code>
             private void btnSearch_Click(object sender,EventArgs e)
            	{
            		try
            		{
            			Task task = _controller.Rapid.GetTask("T_ROB1");             			
                     				
                     RapidSymbolSearchProperties sProp = 
                     RapidSymbolSearchProperties.CreateDefault();
                     sProp.Types = SymbolTypes.Function | SymbolTypes.Data;
                     sProp.InUse = false;
                     sProp.Recursive = true;
                     sProp.SearchMethod = SymbolSearchMethod.Block;
            
                     RapidSymbol[] datas = task.SearchRapidSymbol(sProp, "num", string.Empty);    
            
            			foreach (RapidSymbol rs in datas)
            			{
            				ListViewItem li = new ListViewItem(rs.Name);
            			  
            				li.SubItems.Add(rs.Scope[1]);
             
            				// Add item
            				listView1.Items.Add(li);
            			}
            		}
            		catch (System.Exception ee)
            		{
            			// Handle any error here
            		}
            	}
             </code>
             <para> </para>
             <para>This example shows a simple search method that finds declared data of the type defined 
             by the parameter sDataType. The parameter bSystem determines the scope to search. The search is made from task T_ROB1.</para>
             <code>
             private RapidSymbol[] GetSymbols(string stDataType, bool bSystem)
             {
                 RapidSymbol[] result = new RapidSymbol[0];
                 Task tRob1 = null;
                 try
                 {
                     // Create temporary controller object to get task
                     using (Controller c = new Controller())
                     {
                         tRob1 = c.Rapid.GetTask("T_ROB1");
             
                         if (tRob1 != null)
                         {
                             RapidSymbolSearchProperties sProps = RapidSymbolSearchProperties.CreateDefault();
             
                             // Setup sProps according to parameter bSystem
                             if (bSystem == true)
                             {
                                 // Search data that the task can see in System scope, e.g. Shared data
            
                                 sProps.GlobalSymbols = true;
                                 sProps.InUse = false;
                                 sProps.LocalSymbols = false;
                                 sProps.Recursive = false;
                                 sProps.SearchMethod = SymbolSearchMethod.Scope;
                                 sProps.Types = SymbolTypes.Data;
                             }
                             else
                             {
                                 // Search Task scope
                                 sProps.Types = SymbolTypes.Data;
                                 sProps.InUse = false;
                                 sProps.SearchMethod = SymbolSearchMethod.Block;                                 
                             }
             
                             // Perform the search
                             result = tRob1.SearchRapidSymbol(sProps, stDataType, string.Empty);
                         }
                         else
                         {
                             // No task to search from
                         }
                     }
                 }
                 catch (GeneralException ee)
                 {
                     // TODO: Add error handling
                 }
                 catch (System.Exception ee)
                 {
                     // TODO: Add error handling
                 }
                 finally
                 {
                     // Release temporary resources
                     if (tRob1 != null)
                     {
                         tRob1.Dispose();
                         tRob1 = null;
                     }
                 }
                 return result;
             }
             </code>
             </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,System.String)">
            <summary>
            General <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbol"/> search method. Searches the task for symbols that match the specified criteria. 
            </summary>
            <param name="searchProperties">Search properties.</param>    
            <param name="searchExpression">Expression used to match search, regular expression.</param>
            <returns>All matching symbols.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,ABB.Robotics.Controllers.RapidDomain.RapidDataType,System.String)">
            <summary>
            General <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbol"/> search method. Searches the task for symbols that match the specified criteria. 
            </summary>
            <param name="searchProperties">Search properties.</param>
            <param name="type">The data type to search for.</param>
            <param name="searchExpression">Expression used to match search, regular expression.</param>
            <returns>All matching symbols.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties,ABB.Robotics.Controllers.RapidDomain.RapidDataType)">
            <summary>
            Searches the task for <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbol"/> of the specified data type.
            </summary>
            <param name="searchProperties">Search properties.</param>
            <param name="type">Data type to match.</param>    
            <returns>All matching symbols.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.SearchRapidSymbol(ABB.Robotics.Controllers.RapidDomain.RapidSymbolSearchProperties)">
            <summary>
            General <see cref="T:ABB.Robotics.Controllers.RapidDomain.RapidSymbol"/> search method. Searches the task for symbols that match the specified criteria. 
            </summary>
            <param name="searchProperties">Properties for search.</param>
            <returns>All matching symbols.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.Start">
            <summary>
            Starts RAPID program execution. Use <see cref="M:ABB.Robotics.Controllers.RapidDomain.Task.Start(System.Boolean)"/> to get an exception if the start fails.
            </summary>
            <returns>
            Start result. No exception is thrown if start of execution fails.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.Start(System.Boolean)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <param name="throwOnError">True to get exception instead of
                                       just Error for "unmapped" start
                                       results.</param>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.Start(ABB.Robotics.Controllers.RapidDomain.RegainMode,ABB.Robotics.Controllers.RapidDomain.ExecutionMode)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <param name="regain">Regain mode.</param>
            <param name="execution">Execution mode.</param>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.Start(ABB.Robotics.Controllers.RapidDomain.RegainMode,ABB.Robotics.Controllers.RapidDomain.ExecutionMode,ABB.Robotics.Controllers.RapidDomain.ExecutionCycle)">
            <summary>
            Starts RAPID program execution
            </summary>
            <param name="regain">Regain mode.</param>
            <param name="execution">Execution mode.</param>
            <param name="cycle">The number of cycles to execute the
                                program.</param>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.Start(ABB.Robotics.Controllers.RapidDomain.RegainMode,ABB.Robotics.Controllers.RapidDomain.ExecutionMode,ABB.Robotics.Controllers.RapidDomain.ExecutionCycle,ABB.Robotics.Controllers.RapidDomain.StartCheck)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <param name="regain">Regain mode.</param>
            <param name="execution">Execution mode.</param>
            <param name="cycle">The number of cycles to execute the
                                program.</param>
            <param name="check">Check to perform prior to start.</param>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.Start(ABB.Robotics.Controllers.RapidDomain.RegainMode,ABB.Robotics.Controllers.RapidDomain.ExecutionMode,ABB.Robotics.Controllers.RapidDomain.ExecutionCycle,ABB.Robotics.Controllers.RapidDomain.StartCheck,System.Boolean)">
            <summary>
            Starts RAPID program execution.
            </summary>
            <param name="regain">Regain mode.</param>
            <param name="execution">Execution mode.</param>
            <param name="cycle">The number of cycles to execute
                                the program.</param>
            <param name="check">Check to perform prior to start.</param>
            <param name="throwOnError">True to get exception instead of
                                       just Error for "unmapped" start
                                       results.</param>
            <returns>
            Start result.
            </returns>
            <remarks>
            Requires mastership of Rapid domain. Requires <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode. 
            </remarks>                                                                                                                       
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.Stop">
            <summary>
            Stops execution after next Cycle.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.Stop(ABB.Robotics.Controllers.RapidDomain.StopMode)">
            <summary>
            Stops execution.
            </summary>
            <param name="mode">Stop mode to use.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.ResetProgramPointer">
            <summary>
            Resets the program pointer of this task to the main entry point.
            </summary>
            <remarks>
            Requires mastership of RAPID domain. Requires the <see cref="F:ABB.Robotics.Controllers.Grant.ExecuteRapid" text="UAS_RAPID_EXECUTE"/>
            grant. Requires Auto mode.
            </remarks>                                                                                                                           
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.UnloadProgram">
            <summary>
            Deletes the RAPID program of the task from the controller program memory.
            </summary>
            <remarks>All program modules of the task will be deleted from program memory. If they have been saved they will however remain in the controller file system.
            <para>Requires auto mode. Requires mastership of RAPID domain.</para>
            <para>Requires the <see cref="F:ABB.Robotics.Controllers.Grant.LoadRapidProgram" text="UAS_RAPID_LOADPROGRAM"/> grant.</para>
            <para>If another program is to be loaded after the deletion you may need to use a short delay, as the controller program server must finish a RAPID event routine before it can do anything else.</para>
            </remarks>              
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.SetProgramPointer(System.String,System.String)">
             <summary>
             Sets program pointer to the first instruction of a routine (global or local).
             </summary>
             <param name="module">The name of the module in which the routine is defined.</param>
             <param name="routine">The name of the routine to which PP will be set.</param>
             <remarks>Any previous execution stack will be cleared.
             <para>Requires mastership of Rapid domain.</para>  
             <para>Requires automatic mode.</para>
             </remarks>
             <exception cref="T:System.ArgumentException">PP is not set because one or both parameters are wrong.</exception>
             <exception cref="T:System.InvalidOperationException">Mastership is held by another client.</exception>
             <example>This example sets the program pointer to the routine "DoProcessService" in "MainModule".
             <code>
             using ABB.Robotics;
             using ABB.Robotics.Controllers;
             using ABB.Robotics.Controllers.RapidDomain;
             ...
             try
             {
                 Controller controller = new Controller();
                 Task[] tasks = c.Rapid.GetTasks();
                 Mastership master;
               
                 if (controller.OperatingMode == ControllerOperatingMode.Auto) 
                 {
                    using (master = Mastership.Request(controller.Rapid))
                    {
                        tasks[0].SetProgramPointer("MainModule", "DoProcessService");
                    }
                 }
                 else
                 {
                     MessageBox.Show("Setting the program pointer is not allowed in manual mode from a remote client.");
                 }
              }
              catch (System.InvalidOperationException ex)
              {
                  MessageBox.Show("Mastership is held by another client.");
              }
              catch (System.Exception ex)
              {
                 //TODO: Add error handling
              }
              finally
              {
                  //must release mastership in case an error occurred when SetProgramPointer was executed
                  if (master != null)
                  {
                      master.Dispose();
                      master = null;
                  }
              }
            }
             </code>
             </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.GetRobTarget(System.String,System.String)">
            <summary>
            Gets RobTarget of the task using the specified tool and work object.     
            </summary>
            <param name="tool">Tool</param>
            <param name="workobject">Work object</param>
            <returns>RobTarget object <see cref="T:ABB.Robotics.Controllers.RapidDomain.RobTarget"/>.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.GetRobTarget">
            <summary>
            Gets the current position (as a robtarget using current tool and work object).     
            </summary>
            <returns>RobTarget object <see cref="T:ABB.Robotics.Controllers.RapidDomain.RobTarget"/>.</returns>
            <example>This is how to get the current RobTarget of all tasks.
            <code>
            using ABB.Robotics;
            using ABB.Robotics.Controllers;
            using ABB.Robotics.Controllers.RapidDomain;
            ...
            Controller c = new Controller();
            Task[] allTasks = c.Rapid.GetTasks();
            foreach (Task t in allTasks)
            {
               if (t.Name.Contains("T_ROB"))
               {
                   RobTarget rt = t.GetRobTarget();
                   Console.WriteLine("RobTarget: {0}", rt.ToString());
               }
            }
            </code>
            </example>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.GetJointTarget">
            <summary>
            Get JointTarget from task.     
            </summary>
            <returns>JointTarget object <see cref="T:ABB.Robotics.Controllers.RapidDomain.JointTarget"/>.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.Task.GetEventServer">
            <summary>
            Returns the internal event server.
            </summary>
            <returns>Event server object.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Task.Cycle">
            <summary>
            Get/Sets execution cycle.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Task.Enabled">
            <summary>       
            Gets or sets the  Enabled state of the Task. 'Enabled' is also referred to as activated/deactivated in the user interface.
            Returns true if the task is activated in the task selection panel and will react to start requests.
            Returns false if the task is deactivated and will not react to start requests.
            
            The Enabled state can only be changed by a local controller client and is not allowed by remote clients.
            
            RobotStudio connects to virtual controllers, that belongs to a station, as a local client.
            In all other scenarios, only the FlexPendant is connected as a local client. Other clients are remote.
            
            </summary>
            <remarks>
            The Enabled state can only be changed by a local controller client and is not allowed by remote clients.
            
            Set requires controller to be in auto mode. Requires Mastership.
            </remarks>
            <exception cref="T:ABB.Robotics.ModeRejectException"/>
            <seealso cref="M:ABB.Robotics.Controllers.RapidDomain.Rapid.Start"/>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Task.ExecutionType">
            <summary>
            Gets the current execution type.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Task.Motion">
            <summary>
            Returns true if task is a motion task.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Task.MotionPointer">
            <summary>
            Gets the current position of the motion pointer.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Task.ProgramPointer">
            <summary>
            Gets the current position of the program pointer.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Task.RemainingCycles">
            <summary>
            Gets/Sets the remaining cycle counter.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Task.TaskType">
            <summary>
            Gets the task type, i.e. Normal, Static or Semi-static.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Task.Type">
            <summary>
            Gets the kind of symbol, i.e. Record, Persistent, Constant, Parameter, Trap, Task etc.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.Task.ExecutionStatus">
            <summary>
            Gets the execution status of the task.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.RapidDomain.Task.MotionPointerChanged">
            <summary>
            This event is raised when the motion pointer changes.
            </summary>
        </member>
        <member name="E:ABB.Robotics.Controllers.RapidDomain.Task.ProgramPointerChanged">
            <summary>
            This event is raised when the program pointer changes.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RegularExpression">
            <summary>
            This abstracts a ABB Regular exprssion. Use this instead of strings
            to avoid formatting errors.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.#ctor(System.String)">
            <summary>
            Creates the regular expression on the supplied string. The string
            MUST be the expression from the beginning.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.Equals(ABB.Robotics.Controllers.RegularExpression)">
            <summary>
            Compares two objects and returns true if the 
            objects are considered equal.
            </summary>
            <param name="exp">The object to compare with.</param>
            <returns>True if the objects are considered equal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.Equals(System.Object)">
            <summary>
            Compares two objects and returns true if the 
            objects are considered equal.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>True if the objects are considered equal.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.GetHashCode">
            <summary>
            Gets the hashcode of the regular expression.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.MatchAll">
            <summary>
            Matches all symbols
            </summary>
            <returns>New regular expression.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.MatchAny(System.String)">
            <summary>
            Creates a regular expression that matches any char in the supplied set.
            </summary>
            <param name="text">Text to match.</param>		
            <returns>New regular exrepsssion.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.MatchAny(System.String,System.Boolean)">
            <summary>
            Creates a regular expression that matches any char in the supplied set.
            </summary>
            <param name="text">Text to match.</param>
            <param name="inText">True to match any charachter in the text.</param>
            <returns>New regular exrepsssion.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.MatchBeginsWith(System.String)">
            <summary>
            Creates a regular expression that starts with the supplied text.
            </summary>
            <param name="text">Text to match.</param>		
            <returns>New regular exrepsssion.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.MatchExact(System.String)">
            <summary>
            Creates a regular expression that matches the supplied string exact.
            </summary>
            <param name="text">Text to match.</param>
            <returns>New regular exrepsssion.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.op_Explicit(ABB.Robotics.Controllers.RegularExpression)~System.String">
            <summary>
            "Casts" the expression object to a string object.
            </summary>
            <param name="exp">The expression to cast.</param>
            <returns>The string representation of the expression.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.op_Equality(ABB.Robotics.Controllers.RegularExpression,ABB.Robotics.Controllers.RegularExpression)">
            <summary>
            Compares two expressions for equlity.
            </summary>
            <param name="exp1">expression 1</param>
            <param name="exp2">expression 2</param>
            <returns>true if the expressions are equal</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.op_Inequality(ABB.Robotics.Controllers.RegularExpression,ABB.Robotics.Controllers.RegularExpression)">
            <summary>
            Compares two expressions for un-equlity.
            </summary>
            <param name="exp1">expression 1</param>
            <param name="exp2">expression 2</param>
            <returns>true if the expressions are unequal</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.op_Addition(ABB.Robotics.Controllers.RegularExpression,ABB.Robotics.Controllers.RegularExpression)">
            <summary>
            Adds two regular expressions into a third expression.
            </summary>
            <param name="exp1">Expression 1.</param>
            <param name="exp2">Expression 2.</param>
            <returns>The sum of the two expressions.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RegularExpression.ToString">
            <summary>
            Returns the string representation of the regular expression.
            </summary>
            <returns>The regular expression.</returns>
        </member>
        <member name="T:ABB.Robotics.Controllers.RobotWare">
            <summary>
            Describes a RobotWare version. Two instances are considered equal
            if they have the same version and the same option objects. The 
            name isn't regarded.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWare.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RobotWare"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWare.Equals(ABB.Robotics.Controllers.RobotWare)">
            <summary>
            Equalses the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWare.Equals(System.Object)">
            <summary>
            Merges the functionality of Equals( string ) and Equals( NamedObject ).
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns>True if the names are equals.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWare.GetHashCode">
            <summary>
            Gets the hash code of the object based on the name.
            </summary>
            <returns>Hash code for object.</returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RobotWare.Options">
            <summary>
            Gets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.RobotWare.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.RobotWareOption">
            <summary>
            An option of the controller software.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOption.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RobotWareOption"/> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOption.#ctor(ABB.Robotics.Controllers.RobotWareOption,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RobotWareOption"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOption.Equals(ABB.Robotics.Controllers.RobotWareOption)">
            <summary>
            Equalses the specified info.
            </summary>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOption.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            	<see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOption.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOption.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.RobotWareOption.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.RobotWareOption.IsSubOption">
            <summary>
            Gets a value indicating whether this instance is sub option.
            </summary>
            <value>
            	<c>true</c> if this instance is sub option; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ABB.Robotics.Controllers.RobotWareOption.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.RobotWareOption.SubOptions">
            <summary>
            Gets the sub options.
            </summary>
            <value>The sub options.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.RobotWareOptionCollection">
            <summary>
            A collection of robot ware info objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOptionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RobotWareOptionCollection"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOptionCollection.Contains(ABB.Robotics.Controllers.RobotWareOption)">
            <summary>
            Determines whether collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if collection contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOptionCollection.CopyTo(ABB.Robotics.Controllers.RobotWareOption[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The start index.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOptionCollection.IndexOf(ABB.Robotics.Controllers.RobotWareOption)">
            <summary>
            Gets the index of the value in the collection.
            </summary>
            <param name="value">The value.</param>
            <returns>The index of the value if exist; otherwise -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOptionCollection.OnClear">
            <summary>
            Performs additional custom processes
            when clearing the contents of the <see cref="T:System.Collections.CollectionBase"/> instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareOptionCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the
            <see cref="T:System.Collections.CollectionBase"/> instance.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> can be found.</param>
            <param name="value">The value of the element to remove from <paramref name="index"/>.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RobotWareOptionCollection.Empty">
            <summary>
            Gets a static option collection normally used to avoid null references.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RobotWareOptionCollection.Item(System.Int32)">
            <summary>
            Gets the option object at the specified index.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RobotWareCollection">
            <summary>
            Holds a collection of RobotWareInfo objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.RobotWareCollection"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareCollection.Contains(ABB.Robotics.Controllers.RobotWare)">
            <summary>
            Determines whether collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if collection contains the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareCollection.IndexOf(ABB.Robotics.Controllers.RobotWare)">
            <summary>
            Get the index of the value in the collection.
            </summary>
            <param name="value">The value.</param>
            <returns>The index of the value, if it exist; otherwise -1.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareCollection.CopyTo(ABB.Robotics.Controllers.RobotWare[],System.Int32)">
            <summary>
            Copies to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The start index.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareCollection.OnClear">
            <summary>
            Performs additional custom processes
            when clearing the contents of the <see cref="T:System.Collections.CollectionBase"/> instance.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RobotWareCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the
            <see cref="T:System.Collections.CollectionBase"/> instance.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> can be found.</param>
            <param name="value">The value of the element to remove from <paramref name="index"/>.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.RobotWareCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.Controllers.RobotWare"/> at the specified index.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.SystemRobotWare">
            <summary>
            Describes the currently running RobotWare.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.SystemRobotWare.#ctor(ABB.Robotics.Controllers.RobotWare,ABB.Robotics.Controllers.RobotWare[])">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.SystemRobotWare"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="installedSystems">The installed systems.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.SystemRobotWare.InstalledSystems">
            <summary>
            Gets the currently installed systems of the controller.
            </summary>
        </member>
        <member name="T:ABB.Robotics.SplFunctionAttribute">
            <exclude/>
            <summary>
            This attribute is used to mark a type for a required licensed
            function.
            </summary>
            <remarks>
            Only for internal use.
            </remarks>                                                   
        </member>
        <member name="M:ABB.Robotics.SplFunctionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.SplFunctionAttribute"/> class.
            </summary>
            <param name="function">The function.</param>
            <param name="version">The version.</param>
        </member>
        <member name="P:ABB.Robotics.SplFunctionAttribute.AllowInternal">
            <summary>
            Gets/Sets a flag to indicate if the internal function shall be checked
            as "part" of this function. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.SplFunctionAttribute.Comparer">
            <summary>
            Gets the comparer object for SplFunctions.
            </summary>
        </member>
        <member name="P:ABB.Robotics.SplFunctionAttribute.Mode">
            <summary>
            Gets/Sets a flag to indicate if the function shall be checked during runtime 
            or designtime. Any designtime licenses are also checked at runtime to verify 
            that they where available on the computer during the build.
            </summary>
        </member>
        <member name="P:ABB.Robotics.SplFunctionAttribute.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="P:ABB.Robotics.SplFunctionAttribute.Version">
            <summary>
            Gets the version of the function.
            </summary>
        </member>
        <member name="T:ABB.Robotics.SplFunctionAttribute.FunctionComparer">
            <summary>
            Compares two instances of SplFunctionAttribute, they are
            considered equal if name and version are identical.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.StateChangedEventArgs">
            <summary>
            Event args for StateChanged.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.StateChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.StateChangedEventArgs"/> class.
            </summary>		
        </member>
        <member name="M:ABB.Robotics.Controllers.StateChangedEventArgs.Unpack(Adapters.Controller)">
            <summary>
            Unpacks the ControllerState from ROBAPI RobControllerState.
            </summary> 
        </member>
        <member name="P:ABB.Robotics.Controllers.StateChangedEventArgs.NewState">
            <summary>
            New state of controller.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.RapidDomain.TaskEnabledChangedEventArgs">
            <summary>
            This event arguments for a TaskEnabledChangedEvent.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.TaskEnabledChangedEventArgs.#ctor">
            <summary>
            Initializes a Enabled Changed Event args object.
            </summary>   
        </member>
        <member name="M:ABB.Robotics.Controllers.RapidDomain.TaskEnabledChangedEventArgs.Unpack(ABB.Robotics.Controllers.Internal.Rapid,Adapters.Rapid)">
            <summary>
            Sets the task name and Enabled property of the Task which generated the event.
            </summary>        
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.TaskEnabledChangedEventArgs.TaskName">
            <summary>
            Gets the Task Name of the Task which generated the event.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.RapidDomain.TaskEnabledChangedEventArgs.Enabled">
            <summary>
            Gets the Enabled property of the Task which generated the event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.IEventArgsSupportUnpack">
            <summary>
            This interface is for internal use only. It is used as a flag
            to the raiser that the event args needs a Unpack call to complete
            it's inner state.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.UasCollectionBase">
            <summary>
            Summary description for UasCollectionBase.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UasCollectionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UasCollectionBase"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UasCollectionBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UasCollectionBase"/> class.
            </summary>
            <param name="isReadonly">if set to <c>true</c> [is readonly].</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.UasCollectionBase.IsReadOnly">
            <summary>
            When implemented by a class, gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <value></value>
        </member>
        <member name="T:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection">
            <summary>
            A collection of application grant objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection.Lock">
            <summary>
            Set readonly for the collection and its objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection.Add(ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo)">
            <summary>
            Adds an applicationgrant to the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection.IndexOf(ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo)">
            <summary>
            Retrieves the index of a specific applicationgrant.
            Returns -1 if the applicationgrant can't be found.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection.Insert(System.Int32,ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo)">
            <summary>
            Inserts an application grant into the collection.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection.Remove(ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo)">
            <summary>
            Removes an applicationgrant from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an applicationgrant at a specific index.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection.Contains(ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo)">
            <summary>
            Checks (by name) if the the collection contains a specific applicationgrant.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo"/> at the specified index.
            </summary>
            <value>The value at specified index.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection">
            <summary>
            A collection of grant objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection.Lock">
            <summary>
            Set readonly for the collection and its objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection.Add(ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo)">
            <summary>
            Adds a grant to the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection.IndexOf(ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo)">
            <summary>
            Retrieves the index of a specific grant.
            Returns -1 if the grant can't be found.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection.Insert(System.Int32,ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo)">
            <summary>
            Inserts a grant into the collection.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection.Remove(ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo)">
            <summary>
            Removes a grant from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a grant at a specific index.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection.Contains(ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo)">
            <summary>
            Checks (by name) if the the collection contains a specific grant.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo"/> at the specified index.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantConfiguration">
            <summary>
            Grant configuration object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantConfiguration"/> class.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantConfiguration.Grants">
            <summary>
            Gets or sets the grants.
            </summary>
            <value>The grants.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantConfiguration.ApplicationGrants">
            <summary>
            Gets or sets the application grants.
            </summary>
            <value>The application grants.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo">
            <summary>
            Information about an application grant.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.#ctor(System.String,System.String,ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion,ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion,ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="valueType">Type of the value.</param>
            <param name="startVersion">The start version.</param>
            <param name="endVersion">The end version.</param>
            <param name="listValue">The list value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.#ctor(System.String,System.String,ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion,ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="valuetype">The valuetype.</param>
            <param name="startVersion">The start version.</param>
            <param name="endVersion">The end version.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.ValueType">
            <summary>
            Gets or sets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.MinValue">
            <summary>
            Gets or sets the min value.
            </summary>
            <value>The min value.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.MaxValue">
            <summary>
            Gets or sets the max value.
            </summary>
            <value>The max value.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.StartVersion">
            <summary>
            Gets or sets the start version.
            </summary>
            <value>The start version.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.EndVersion">
            <summary>
            Gets or sets the end version.
            </summary>
            <value>The end version.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.ListValue">
            <summary>
            Gets or sets the list value.
            </summary>
            <value>The list value.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.ResourceID">
            <summary>
            Gets or sets the resource ID.
            </summary>
            <value>The resource ID.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.HelpID">
            <summary>
            Gets or sets the help ID.
            </summary>
            <value>The help ID.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ApplicationGrantInfo.Unit">
            <summary>
            Gets or sets the unit.
            </summary>
            <value>The max value.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo">
            <summary>
            Information about a grant object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo.#ctor(System.String,ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion,ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="startversion">The startversion.</param>
            <param name="endversion">The endversion.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo.StartVersion">
            <summary>
            Gets or sets the start version.
            </summary>
            <value>The start version.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo.EndVersion">
            <summary>
            Gets or sets the end version.
            </summary>
            <value>The end version.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo.ResourceID">
            <summary>
            Gets or sets the resource ID.
            </summary>
            <value>The resource ID.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.GrantInfo.HelpID">
            <summary>
            Gets or sets the help ID.
            </summary>
            <value>The help ID.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue">
            <summary>
            A special list of objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue.Add(System.String)">
            <summary>
            Adds a string to the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue.IndexOf(System.String)">
            <summary>
            Retrieves the index of a specific string.
            Returns -1 if the string cannot be found.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue.Insert(System.Int32,System.String)">
            <summary>
            Inserts a string into the collection.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue.Remove(System.String)">
            <summary>
            Removes a string from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue.RemoveAt(System.Int32)">
            <summary>
            Removes a string at a specific index.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue.Contains(System.String)">
            <summary>
            Checks (by name) if the the collection contains a specific string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue.Lock">
            <summary>
            Set readonly for the collection and its objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.ListValue.Value">
            <summary>
             
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion">
            <summary>
            Special version for Uas.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion"/> class.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="revision">The revision.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion.Major">
            <summary>
            Gets or sets the major.
            </summary>
            <value>The major.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion.Minor">
            <summary>
            Gets or sets the minor.
            </summary>
            <value>The minor.</value>
        </member>
        <member name="P:ABB.Robotics.Controllers.UserAuthorizationManagement.UasVersion.Revision">
            <summary>
            Gets or sets the revision.
            </summary>
            <value>The revision.</value>
        </member>
        <member name="T:ABB.Robotics.Controllers.UasStringCollection">
            <summary>
            Summary description for UasStringCollection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UasStringCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UasStringCollection"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UasStringCollection.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.UasStringCollection"/> class.
            </summary>
            <param name="isReadonly">if set to <c>true</c> [is readonly].</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.UasStringCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Specialized.StringCollection"/> is read-only.
            </summary>
            <value></value>
        </member>
        <member name="T:ABB.Robotics.Controllers.UserAuthorizationSystem">
            <summary>
            This class abstracts the UAS system of the controller
            into the CAPI programming model.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationSystem.CheckDemandGrant(ABB.Robotics.Controllers.Grant)">
            <summary>
            Checks if the current user has the supplied grant.
            </summary>
            <param name="grant">Grant to check for.</param>
            <returns>True if grant is held by the user.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationSystem.CheckDemandGrant(ABB.Robotics.Controllers.Grant,System.String@)">
            <summary>
            Checks if the current user has the required grant.
            </summary>
            <param name="grant">grant to check for.</param>
            <param name="value">Value of grant.</param>
            <returns>true if the user has the grant.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationSystem.CheckDemandGrant(System.String)">
            <summary>
            Checks if the current user has the required grant.
            </summary>
            <param name="grant">grant to check for.</param>
            <returns>true if the user has the grant.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationSystem.CheckDemandGrant(System.String,System.String@)">
            <summary>
            Checks if the current user has the required grant.
            </summary>
            <param name="grant">grant to check for.</param>
            <param name="value">The value of the grant.</param>
            <returns>true if the user has the grant.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationSystem.DemandGrant(ABB.Robotics.Controllers.Grant)">
            <summary>
            Demands the Grant. Throws a GrantDemandRejectedException on rejections.
            </summary>
            <param name="grant">Grant to demand.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationSystem.DemandGrant(ABB.Robotics.Controllers.Grant,System.String@)">
            <summary>
            Checks if the current user has the required grant.
            </summary>
            <param name="grant">grant to check for.</param>		
            <param name="value">The value of the grant.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationSystem.DemandGrant(System.String)">
            <summary>
            Checks if the current user has the required grant.
            </summary>
            <param name="grant">grant to check for.</param>		
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationSystem.DemandGrant(System.String,System.String@)">
            <summary>
            Checks if the current user has the required grant.
            </summary>
            <param name="grant">grant to check for.</param>		
            <param name="value">Value of the grant.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationSystem.GetCurrentGrants">
            <summary>
            Get the grants of the current user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.UserAuthorizationSystem.GetGrantDefinitions">
            <summary>
            Get resource definitions for all available grants.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.Virtual.AutoConditionsChangedEventArgs.Unpack(Adapters.Controller)">
            <summary>
            Unpacks the AutoConditionsChanged, gets the AutoCondList in AutoConditionsChangedEventArgs.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.StartControllerCallback">
            <summary>
            Delegate for async controller starts.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.VirtualControllerState">
            <summary>
            Gets the state of the virtual controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.VirtualControllerState.Unknown">
            <summary>
            No controller is attached to the object.
            Either it isn't started, is stopped or detached.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.VirtualControllerState.Starting">
            <summary>
            The controller is starting. 
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.VirtualControllerState.Started">
            <summary>
            The controller is started.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.VirtualControllerState.Stopped">
            <summary>
            The Started has been stopped.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.VirtualController">
            <summary>
            Administration class for virtual controller objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Creates a virtual controller object.
            </summary>
            <param name="path">Path to system directory.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.#ctor">
            <summary>
            Creates a virtual controller object. This is private and
            for internal use only.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.Attach(ABB.Robotics.Controllers.ControllerInfo)">
            <summary>
            Attaches a virtual controller object to an existing virtual controller.
            </summary>
            <param name="controller">Controller to attach.</param>
            <returns>The attached controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.Attach(System.Guid)">
            <summary>
            Attaches a virtual controller object.
            </summary>
            <param name="systemId">System id for controller to attach.</param>
            <returns>The attached controller.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.BeginStart(System.IO.DirectoryInfo,ABB.Robotics.Controllers.ControllerStartMode,System.AsyncCallback)">
            <summary>
            Begins a async start controller operation. The state will
            contain the VirtualController object.
            </summary>
            <param name="path">System path.</param>
            <param name="mode">Start behavior of controller.</param>
            <param name="callback">Callback to call when operation completes.</param>		
            <returns>The async result for this operation.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.BeginStart(ABB.Robotics.Controllers.ControllerStartMode,System.AsyncCallback,System.Object)">
            <summary>
            Begins a async start controller operation. 
            </summary>
            <param name="mode">Start behavior of controller.</param>
            <param name="callback">Callback to call when operation completes.</param>		
            <returns>The async result for this operation.</returns>
            <param name="state">State for this operation. If this is null then the current object will be stored in state.</param>
            <returns>The async result for this operation.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.Detach">
            <summary>
            Detaches the current controller from this object. This operation
            can not be undone without creating a new object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.Dispose">
            <summary>
            Disposes the current VC object, if connect it will disconnect.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.EndStart(System.IAsyncResult)">
            <summary>
            Ends the async start operation.
            </summary>
            <param name="result">Result from BeginStart operation.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.GetSystemId(System.IO.DirectoryInfo)">
            <summary>
            Gets the System id from the path.
            </summary>
            <param name="directory">Virtual controller directory.</param>
            <returns>The system id of the system.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.GetSystemId(System.String)">
            <summary>
            Gets the System id from the path.
            </summary>
            <param name="directory">Virtual controller directory.</param>
            <returns>The system id of the system.</returns>		
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.Start(System.IO.DirectoryInfo)">
            <summary>
            Starts a new VirtualController.
            </summary>
            <param name="path">System path.</param>		
            <returns>The virtual controller object.</returns>	
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.Start(System.IO.DirectoryInfo,ABB.Robotics.Controllers.ControllerStartMode)">
            <summary>
            Starts a new VirtualController.
            </summary>
            <param name="path">System path.</param>
            <param name="mode">Controlls the start behavior of the controller.</param>
            <returns>The virtual controller object.</returns>		
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualController.Stop">
            <summary>
            Stops the virtual controller. The controller must be started 
            before this method can succeed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.VirtualController.Info">
            <summary>
            Gets the ControllerInfo object for this virtual controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.VirtualController.Panel">
            <summary>
            Gets a virtual panel for this virtual controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.VirtualController.Path">
            <summary>
            Path to the system directory.
            </summary>
        </member>
        <member name="P:ABB.Robotics.Controllers.VirtualController.State">
            <summary>
            Gets the current state of the Virtual Controller object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.ControllerStartMode">
            <summary>
            Defines the start mode of a Controller.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerStartMode.Warm">
            <summary>
            Restart with current system and current settings.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerStartMode.Cold">
            <summary>
            Delete current system and start boot server.
            </summary>
        </member>
        <member name="F:ABB.Robotics.Controllers.ControllerStartMode.IStart">
            <summary>
            Restart with current system and default settings..
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.VirtualPanel">
            <summary>
            handles all specific functions that are specific to
            the virtual controller. Through this interface we can
            change most "settings" on the panel of the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.#ctor(ABB.Robotics.Controllers.Controller)">
            <summary>
            private ctor to avoid object creation
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.Finalize">
            <summary>
            Makes sure to disconnect any existing subscriptions.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.Attach(ABB.Robotics.Controllers.Controller)">
            <summary>
            attaches a panel object to a controller
            </summary>
            <param name="controller">controller to attach, must be virtual</param>
            <returns>the panel object</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.BeginChangeOperatingMode(ABB.Robotics.Controllers.ControllerOperatingMode,System.AsyncCallback,System.Object)">
            <summary>
            Starts an asynchronous operating-mode change operation.
            </summary>
            <param name="newMode">New mode of controller.</param>
            <param name="callback">Callback of completion routine.</param>
            <param name="state">User defined state object.</param>
            <returns>Async result.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.BeginChangeState(ABB.Robotics.Controllers.ControllerState,System.AsyncCallback)">
            <summary>
            Starts an asynchronous state change operation of controller.
            </summary>
            <param name="newState">New state of controller.</param>
            <param name="callback">Callback of completion routine.</param>        
            <returns>Async result.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.ChangeMode(ABB.Robotics.Controllers.ControllerOperatingMode)">
            <summary>
            New controller operating mode, no Change modes are valid.
            </summary>
            <param name="newMode">New controller operating mode.</param>	
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.ChangeMode(ABB.Robotics.Controllers.ControllerOperatingMode,System.Int32)">
            <summary>
            Starts a change operating mode and waits for specifed time
            for the operation to complete. Throws a timeout exception if
            the new mode isn't reached in the specified time.
            </summary>
            <param name="newMode">New mode of the Controller.</param>
            <param name="timeout">Max time to reach new mode.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.ChangeMode(ABB.Robotics.Controllers.ControllerOperatingMode,System.TimeSpan)">
            <summary>
            Starts a change operating mode and waits for specifed time
            for the operation to complete. Throws a timeout exception if
            the new mode isn't reached in the specified time.
            </summary>
            <param name="newMode">New mode of the Controller.</param>
            <param name="timeout">Max time to reach new mode.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.EndChangeOperatingMode(System.IAsyncResult)">
            <summary>
            This completes the change operating mode async operation.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.EnableDevice(ABB.Robotics.Controllers.ControllerEnableState)">
            <summary>
            Enable or disable the device.
            </summary>
            <param name="state">New enable state of the device.</param>        
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.AcknowledgeModeChange(Adapters.ControllerAcknowledge)">
            <summary>
            Pre acknowledges any mode changes.
            </summary>
            <param name="ack">Ack type</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.ChangeAckMode(System.Boolean)">
            <summary>
            Changes the current ACK mode.
            </summary>
            <param name="enable">True to start auto ack from this object.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.Dispose(System.Boolean)">
            <summary>
            Clean up of current object.
            </summary>
            <param name="disposing">True if called in dispose context.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.GetAck(ABB.Robotics.Controllers.ControllerOperatingMode)">
            <summary>
            Gets the acknowledge needed for this mode.
            </summary>
            <param name="mode">Mode to ack.</param>
            <returns>Ack.</returns>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanel.OnAutoChange(System.Object,System.DateTime)">
            <summary>
            Callback for autochange events.
            </summary>
            <param name="data">Data object.</param>
            <param name="timestamp">Timestamp of event.</param>
        </member>
        <member name="P:ABB.Robotics.Controllers.VirtualPanel.AcknowledgeModeChanges">
            <summary>
            Gets / sets the acknowledge behavior of mode changes.
            </summary>
        </member>
        <member name="T:ABB.Robotics.Controllers.VirtualPanelAttachFailedException">
            <summary>
            this exception is thrown if an Attach operation failes.
            NOTE: You cannot attach anything but virtual controllers.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanelAttachFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.VirtualPanelAttachFailedException"/> class.
            </summary>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanelAttachFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.VirtualPanelAttachFailedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanelAttachFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.VirtualPanelAttachFailedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanelAttachFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.Controllers.VirtualPanelAttachFailedException"/> class.
            </summary>
            <param name="info">SEE MSDN.</param>
            <param name="context">SEE MSDN.</param>
        </member>
        <member name="M:ABB.Robotics.Controllers.VirtualPanelAttachFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            See MSDN.
            </summary>
            <param name="info">See MSDN.</param>
            <param name="context">See MSDN.</param>
        </member>
    </members>
</doc>
